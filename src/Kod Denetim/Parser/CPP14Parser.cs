//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\msekin\Desktop\New folder\CPP14.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class CPP14Parser : Parser {
	public const int
		Directive=1, Alignas=2, Alignof=3, Asm=4, Auto=5, Bool=6, Break=7, Case=8, 
		Catch=9, Char=10, Char16=11, Char32=12, Class=13, Const=14, Constexpr=15, 
		Const_cast=16, Continue=17, Decltype=18, Default=19, Delete=20, Do=21, 
		Double=22, Dynamic_cast=23, Else=24, Enum=25, Explicit=26, Export=27, 
		Extern=28, False=29, Final=30, Float=31, For=32, Friend=33, Goto=34, If=35, 
		Inline=36, Int=37, Long=38, Mutable=39, Namespace=40, New=41, Noexcept=42, 
		Nullptr=43, Operator=44, Override=45, Private=46, Protected=47, Public=48, 
		Register=49, Reinterpret_cast=50, Return=51, Short=52, Signed=53, Sizeof=54, 
		Static=55, Static_assert=56, Static_cast=57, Struct=58, Switch=59, Template=60, 
		This=61, Thread_local=62, Throw=63, True=64, Try=65, Typedef=66, Typeid=67, 
		Typename=68, Union=69, Unsigned=70, Using=71, Virtual=72, Void=73, Volatile=74, 
		Wchar=75, While=76, LeftParen=77, RightParen=78, LeftBracket=79, RightBracket=80, 
		LeftBrace=81, RightBrace=82, Plus=83, Minus=84, Star=85, Div=86, Mod=87, 
		Caret=88, And=89, Or=90, Tilde=91, Not=92, Assign=93, Less=94, Greater=95, 
		PlusAssign=96, MinusAssign=97, StarAssign=98, DivAssign=99, ModAssign=100, 
		XorAssign=101, AndAssign=102, OrAssign=103, LeftShift=104, LeftShiftAssign=105, 
		Equal=106, NotEqual=107, LessEqual=108, GreaterEqual=109, AndAnd=110, 
		OrOr=111, PlusPlus=112, MinusMinus=113, Comma=114, ArrowStar=115, Arrow=116, 
		Question=117, Colon=118, Doublecolon=119, Semi=120, Dot=121, DotStar=122, 
		Ellipsis=123, Identifier=124, Integerliteral=125, Decimalliteral=126, 
		Octalliteral=127, Hexadecimalliteral=128, Binaryliteral=129, Integersuffix=130, 
		Characterliteral=131, Floatingliteral=132, Stringliteral=133, Userdefinedintegerliteral=134, 
		Userdefinedfloatingliteral=135, Userdefinedstringliteral=136, Userdefinedcharacterliteral=137, 
		Whitespace=138, Newline=139, BlockComment=140, LineComment=141;
	public const int
		RULE_translationunit = 0, RULE_primaryexpression = 1, RULE_idexpression = 2, 
		RULE_unqualifiedid = 3, RULE_qualifiedid = 4, RULE_nestednamespecifier = 5, 
		RULE_lambdaexpression = 6, RULE_lambdaintroducer = 7, RULE_lambdacapture = 8, 
		RULE_capturedefault = 9, RULE_capturelist = 10, RULE_capture = 11, RULE_simplecapture = 12, 
		RULE_initcapture = 13, RULE_lambdadeclarator = 14, RULE_postfixexpression = 15, 
		RULE_expressionlist = 16, RULE_pseudodestructorname = 17, RULE_unaryexpression = 18, 
		RULE_unaryoperator = 19, RULE_newexpression = 20, RULE_newplacement = 21, 
		RULE_newtypeid = 22, RULE_newdeclarator = 23, RULE_noptrnewdeclarator = 24, 
		RULE_newinitializer = 25, RULE_deleteexpression = 26, RULE_noexceptexpression = 27, 
		RULE_castexpression = 28, RULE_pmexpression = 29, RULE_multiplicativeexpression = 30, 
		RULE_additiveexpression = 31, RULE_shiftexpression = 32, RULE_relationalexpression = 33, 
		RULE_equalityexpression = 34, RULE_andexpression = 35, RULE_exclusiveorexpression = 36, 
		RULE_inclusiveorexpression = 37, RULE_logicalandexpression = 38, RULE_logicalorexpression = 39, 
		RULE_conditionalexpression = 40, RULE_assignmentexpression = 41, RULE_assignmentoperator = 42, 
		RULE_expression = 43, RULE_constantexpression = 44, RULE_statement = 45, 
		RULE_labeledstatement = 46, RULE_expressionstatement = 47, RULE_compoundstatement = 48, 
		RULE_statementseq = 49, RULE_selectionstatement = 50, RULE_condition = 51, 
		RULE_iterationstatement = 52, RULE_forinitstatement = 53, RULE_forrangedeclaration = 54, 
		RULE_forrangeinitializer = 55, RULE_jumpstatement = 56, RULE_declarationstatement = 57, 
		RULE_declarationseq = 58, RULE_declaration = 59, RULE_blockdeclaration = 60, 
		RULE_aliasdeclaration = 61, RULE_simpledeclaration = 62, RULE_static_assertdeclaration = 63, 
		RULE_emptydeclaration = 64, RULE_attributedeclaration = 65, RULE_declspecifier = 66, 
		RULE_declspecifierseq = 67, RULE_storageclassspecifier = 68, RULE_functionspecifier = 69, 
		RULE_typedefname = 70, RULE_typespecifier = 71, RULE_trailingtypespecifier = 72, 
		RULE_typespecifierseq = 73, RULE_trailingtypespecifierseq = 74, RULE_simpletypespecifier = 75, 
		RULE_typename = 76, RULE_decltypespecifier = 77, RULE_elaboratedtypespecifier = 78, 
		RULE_enumname = 79, RULE_enumspecifier = 80, RULE_enumhead = 81, RULE_opaqueenumdeclaration = 82, 
		RULE_enumkey = 83, RULE_enumbase = 84, RULE_enumeratorlist = 85, RULE_enumeratordefinition = 86, 
		RULE_enumerator = 87, RULE_namespacename = 88, RULE_originalnamespacename = 89, 
		RULE_namespacedefinition = 90, RULE_namednamespacedefinition = 91, RULE_originalnamespacedefinition = 92, 
		RULE_extensionnamespacedefinition = 93, RULE_unnamednamespacedefinition = 94, 
		RULE_namespacebody = 95, RULE_namespacealias = 96, RULE_namespacealiasdefinition = 97, 
		RULE_qualifiednamespacespecifier = 98, RULE_usingdeclaration = 99, RULE_usingdirective = 100, 
		RULE_asmdefinition = 101, RULE_linkagespecification = 102, RULE_attributespecifierseq = 103, 
		RULE_attributespecifier = 104, RULE_alignmentspecifier = 105, RULE_attributelist = 106, 
		RULE_attribute = 107, RULE_attributetoken = 108, RULE_attributescopedtoken = 109, 
		RULE_attributenamespace = 110, RULE_attributeargumentclause = 111, RULE_balancedtokenseq = 112, 
		RULE_balancedtoken = 113, RULE_initdeclaratorlist = 114, RULE_initdeclarator = 115, 
		RULE_declarator = 116, RULE_ptrdeclarator = 117, RULE_noptrdeclarator = 118, 
		RULE_parametersandqualifiers = 119, RULE_trailingreturntype = 120, RULE_ptroperator = 121, 
		RULE_cvqualifierseq = 122, RULE_cvqualifier = 123, RULE_refqualifier = 124, 
		RULE_declaratorid = 125, RULE_typeid = 126, RULE_abstractdeclarator = 127, 
		RULE_ptrabstractdeclarator = 128, RULE_noptrabstractdeclarator = 129, 
		RULE_abstractpackdeclarator = 130, RULE_noptrabstractpackdeclarator = 131, 
		RULE_parameterdeclarationclause = 132, RULE_parameterdeclarationlist = 133, 
		RULE_parameterdeclaration = 134, RULE_functiondefinition = 135, RULE_functionbody = 136, 
		RULE_initializer = 137, RULE_braceorequalinitializer = 138, RULE_initializerclause = 139, 
		RULE_initializerlist = 140, RULE_bracedinitlist = 141, RULE_classname = 142, 
		RULE_classspecifier = 143, RULE_classhead = 144, RULE_classheadname = 145, 
		RULE_classvirtspecifier = 146, RULE_classkey = 147, RULE_memberspecification = 148, 
		RULE_memberdeclaration = 149, RULE_memberdeclaratorlist = 150, RULE_memberdeclarator = 151, 
		RULE_virtspecifierseq = 152, RULE_virtspecifier = 153, RULE_purespecifier = 154, 
		RULE_baseclause = 155, RULE_basespecifierlist = 156, RULE_basespecifier = 157, 
		RULE_classordecltype = 158, RULE_basetypespecifier = 159, RULE_accessspecifier = 160, 
		RULE_conversionfunctionid = 161, RULE_conversiontypeid = 162, RULE_conversiondeclarator = 163, 
		RULE_ctorinitializer = 164, RULE_meminitializerlist = 165, RULE_meminitializer = 166, 
		RULE_meminitializerid = 167, RULE_operatorfunctionid = 168, RULE_literaloperatorid = 169, 
		RULE_templatedeclaration = 170, RULE_templateparameterlist = 171, RULE_templateparameter = 172, 
		RULE_typeparameter = 173, RULE_simpletemplateid = 174, RULE_templateid = 175, 
		RULE_templatename = 176, RULE_templateargumentlist = 177, RULE_templateargument = 178, 
		RULE_typenamespecifier = 179, RULE_explicitinstantiation = 180, RULE_explicitspecialization = 181, 
		RULE_tryblock = 182, RULE_functiontryblock = 183, RULE_handlerseq = 184, 
		RULE_handler = 185, RULE_exceptiondeclaration = 186, RULE_throwexpression = 187, 
		RULE_exceptionspecification = 188, RULE_dynamicexceptionspecification = 189, 
		RULE_typeidlist = 190, RULE_noexceptspecification = 191, RULE_rightShift = 192, 
		RULE_rightShiftAssign = 193, RULE_operator = 194, RULE_literal = 195, 
		RULE_booleanliteral = 196, RULE_pointerliteral = 197, RULE_userdefinedliteral = 198;
	public static readonly string[] ruleNames = {
		"translationunit", "primaryexpression", "idexpression", "unqualifiedid", 
		"qualifiedid", "nestednamespecifier", "lambdaexpression", "lambdaintroducer", 
		"lambdacapture", "capturedefault", "capturelist", "capture", "simplecapture", 
		"initcapture", "lambdadeclarator", "postfixexpression", "expressionlist", 
		"pseudodestructorname", "unaryexpression", "unaryoperator", "newexpression", 
		"newplacement", "newtypeid", "newdeclarator", "noptrnewdeclarator", "newinitializer", 
		"deleteexpression", "noexceptexpression", "castexpression", "pmexpression", 
		"multiplicativeexpression", "additiveexpression", "shiftexpression", "relationalexpression", 
		"equalityexpression", "andexpression", "exclusiveorexpression", "inclusiveorexpression", 
		"logicalandexpression", "logicalorexpression", "conditionalexpression", 
		"assignmentexpression", "assignmentoperator", "expression", "constantexpression", 
		"statement", "labeledstatement", "expressionstatement", "compoundstatement", 
		"statementseq", "selectionstatement", "condition", "iterationstatement", 
		"forinitstatement", "forrangedeclaration", "forrangeinitializer", "jumpstatement", 
		"declarationstatement", "declarationseq", "declaration", "blockdeclaration", 
		"aliasdeclaration", "simpledeclaration", "static_assertdeclaration", "emptydeclaration", 
		"attributedeclaration", "declspecifier", "declspecifierseq", "storageclassspecifier", 
		"functionspecifier", "typedefname", "typespecifier", "trailingtypespecifier", 
		"typespecifierseq", "trailingtypespecifierseq", "simpletypespecifier", 
		"typename", "decltypespecifier", "elaboratedtypespecifier", "enumname", 
		"enumspecifier", "enumhead", "opaqueenumdeclaration", "enumkey", "enumbase", 
		"enumeratorlist", "enumeratordefinition", "enumerator", "namespacename", 
		"originalnamespacename", "namespacedefinition", "namednamespacedefinition", 
		"originalnamespacedefinition", "extensionnamespacedefinition", "unnamednamespacedefinition", 
		"namespacebody", "namespacealias", "namespacealiasdefinition", "qualifiednamespacespecifier", 
		"usingdeclaration", "usingdirective", "asmdefinition", "linkagespecification", 
		"attributespecifierseq", "attributespecifier", "alignmentspecifier", "attributelist", 
		"attribute", "attributetoken", "attributescopedtoken", "attributenamespace", 
		"attributeargumentclause", "balancedtokenseq", "balancedtoken", "initdeclaratorlist", 
		"initdeclarator", "declarator", "ptrdeclarator", "noptrdeclarator", "parametersandqualifiers", 
		"trailingreturntype", "ptroperator", "cvqualifierseq", "cvqualifier", 
		"refqualifier", "declaratorid", "typeid", "abstractdeclarator", "ptrabstractdeclarator", 
		"noptrabstractdeclarator", "abstractpackdeclarator", "noptrabstractpackdeclarator", 
		"parameterdeclarationclause", "parameterdeclarationlist", "parameterdeclaration", 
		"functiondefinition", "functionbody", "initializer", "braceorequalinitializer", 
		"initializerclause", "initializerlist", "bracedinitlist", "classname", 
		"classspecifier", "classhead", "classheadname", "classvirtspecifier", 
		"classkey", "memberspecification", "memberdeclaration", "memberdeclaratorlist", 
		"memberdeclarator", "virtspecifierseq", "virtspecifier", "purespecifier", 
		"baseclause", "basespecifierlist", "basespecifier", "classordecltype", 
		"basetypespecifier", "accessspecifier", "conversionfunctionid", "conversiontypeid", 
		"conversiondeclarator", "ctorinitializer", "meminitializerlist", "meminitializer", 
		"meminitializerid", "operatorfunctionid", "literaloperatorid", "templatedeclaration", 
		"templateparameterlist", "templateparameter", "typeparameter", "simpletemplateid", 
		"templateid", "templatename", "templateargumentlist", "templateargument", 
		"typenamespecifier", "explicitinstantiation", "explicitspecialization", 
		"tryblock", "functiontryblock", "handlerseq", "handler", "exceptiondeclaration", 
		"throwexpression", "exceptionspecification", "dynamicexceptionspecification", 
		"typeidlist", "noexceptspecification", "rightShift", "rightShiftAssign", 
		"operator", "literal", "booleanliteral", "pointerliteral", "userdefinedliteral"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'alignas'", "'alignof'", "'asm'", "'auto'", "'bool'", "'break'", 
		"'case'", "'catch'", "'char'", "'char16_t'", "'char32_t'", "'class'", 
		"'const'", "'constexpr'", "'const_cast'", "'continue'", "'decltype'", 
		"'default'", "'delete'", "'do'", "'double'", "'dynamic_cast'", "'else'", 
		"'enum'", "'explicit'", "'export'", "'extern'", "'false'", "'final'", 
		"'float'", "'for'", "'friend'", "'goto'", "'if'", "'inline'", "'int'", 
		"'long'", "'mutable'", "'namespace'", "'new'", "'noexcept'", "'nullptr'", 
		"'operator'", "'override'", "'private'", "'protected'", "'public'", "'register'", 
		"'reinterpret_cast'", "'return'", "'short'", "'signed'", "'sizeof'", "'static'", 
		"'static_assert'", "'static_cast'", "'struct'", "'switch'", "'template'", 
		"'this'", "'thread_local'", "'throw'", "'true'", "'try'", "'typedef'", 
		"'typeid'", "'typename'", "'union'", "'unsigned'", "'using'", "'virtual'", 
		"'void'", "'volatile'", "'wchar_t'", "'while'", "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'&'", "'|'", 
		"'~'", "'!'", "'='", "'<'", "'>'", "'+='", "'-='", "'*='", "'/='", "'%='", 
		"'^='", "'&='", "'|='", "'<<'", "'<<='", "'=='", "'!='", "'<='", "'>='", 
		"'&&'", "'||'", "'++'", "'--'", "','", "'->*'", "'->'", "'?'", "':'", 
		"'::'", "';'", "'.'", "'.*'", "'...'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Directive", "Alignas", "Alignof", "Asm", "Auto", "Bool", "Break", 
		"Case", "Catch", "Char", "Char16", "Char32", "Class", "Const", "Constexpr", 
		"Const_cast", "Continue", "Decltype", "Default", "Delete", "Do", "Double", 
		"Dynamic_cast", "Else", "Enum", "Explicit", "Export", "Extern", "False", 
		"Final", "Float", "For", "Friend", "Goto", "If", "Inline", "Int", "Long", 
		"Mutable", "Namespace", "New", "Noexcept", "Nullptr", "Operator", "Override", 
		"Private", "Protected", "Public", "Register", "Reinterpret_cast", "Return", 
		"Short", "Signed", "Sizeof", "Static", "Static_assert", "Static_cast", 
		"Struct", "Switch", "Template", "This", "Thread_local", "Throw", "True", 
		"Try", "Typedef", "Typeid", "Typename", "Union", "Unsigned", "Using", 
		"Virtual", "Void", "Volatile", "Wchar", "While", "LeftParen", "RightParen", 
		"LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Plus", "Minus", 
		"Star", "Div", "Mod", "Caret", "And", "Or", "Tilde", "Not", "Assign", 
		"Less", "Greater", "PlusAssign", "MinusAssign", "StarAssign", "DivAssign", 
		"ModAssign", "XorAssign", "AndAssign", "OrAssign", "LeftShift", "LeftShiftAssign", 
		"Equal", "NotEqual", "LessEqual", "GreaterEqual", "AndAnd", "OrOr", "PlusPlus", 
		"MinusMinus", "Comma", "ArrowStar", "Arrow", "Question", "Colon", "Doublecolon", 
		"Semi", "Dot", "DotStar", "Ellipsis", "Identifier", "Integerliteral", 
		"Decimalliteral", "Octalliteral", "Hexadecimalliteral", "Binaryliteral", 
		"Integersuffix", "Characterliteral", "Floatingliteral", "Stringliteral", 
		"Userdefinedintegerliteral", "Userdefinedfloatingliteral", "Userdefinedstringliteral", 
		"Userdefinedcharacterliteral", "Whitespace", "Newline", "BlockComment", 
		"LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CPP14.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CPP14Parser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class TranslationunitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(CPP14Parser.Eof, 0); }
		public DeclarationseqContext declarationseq() {
			return GetRuleContext<DeclarationseqContext>(0);
		}
		public TranslationunitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_translationunit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTranslationunit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTranslationunit(this);
		}
	}

	[RuleVersion(0)]
	public TranslationunitContext translationunit() {
		TranslationunitContext _localctx = new TranslationunitContext(Context, State);
		EnterRule(_localctx, 0, RULE_translationunit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignas) | (1L << Asm) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << Decltype) | (1L << Double) | (1L << Enum) | (1L << Explicit) | (1L << Extern) | (1L << Float) | (1L << Friend) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << Namespace) | (1L << Operator) | (1L << Register) | (1L << Short) | (1L << Signed) | (1L << Static) | (1L << Static_assert) | (1L << Struct) | (1L << Template) | (1L << Thread_local))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (Typedef - 66)) | (1L << (Typename - 66)) | (1L << (Union - 66)) | (1L << (Unsigned - 66)) | (1L << (Using - 66)) | (1L << (Virtual - 66)) | (1L << (Void - 66)) | (1L << (Volatile - 66)) | (1L << (Wchar - 66)) | (1L << (LeftParen - 66)) | (1L << (LeftBracket - 66)) | (1L << (Star - 66)) | (1L << (And - 66)) | (1L << (Tilde - 66)) | (1L << (AndAnd - 66)) | (1L << (Doublecolon - 66)) | (1L << (Semi - 66)) | (1L << (Ellipsis - 66)) | (1L << (Identifier - 66)))) != 0)) {
				{
				State = 398; declarationseq(0);
				}
			}

			State = 401; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryexpressionContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode This() { return GetToken(CPP14Parser.This, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdexpressionContext idexpression() {
			return GetRuleContext<IdexpressionContext>(0);
		}
		public LambdaexpressionContext lambdaexpression() {
			return GetRuleContext<LambdaexpressionContext>(0);
		}
		public PrimaryexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPrimaryexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPrimaryexpression(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryexpressionContext primaryexpression() {
		PrimaryexpressionContext _localctx = new PrimaryexpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_primaryexpression);
		try {
			State = 411;
			switch (TokenStream.La(1)) {
			case False:
			case Nullptr:
			case True:
			case Integerliteral:
			case Characterliteral:
			case Floatingliteral:
			case Stringliteral:
			case Userdefinedintegerliteral:
			case Userdefinedfloatingliteral:
			case Userdefinedstringliteral:
			case Userdefinedcharacterliteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 403; literal();
				}
				break;
			case This:
				EnterOuterAlt(_localctx, 2);
				{
				State = 404; Match(This);
				}
				break;
			case LeftParen:
				EnterOuterAlt(_localctx, 3);
				{
				State = 405; Match(LeftParen);
				State = 406; expression(0);
				State = 407; Match(RightParen);
				}
				break;
			case Decltype:
			case Operator:
			case Tilde:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 4);
				{
				State = 409; idexpression();
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 5);
				{
				State = 410; lambdaexpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdexpressionContext : ParserRuleContext {
		public UnqualifiedidContext unqualifiedid() {
			return GetRuleContext<UnqualifiedidContext>(0);
		}
		public QualifiedidContext qualifiedid() {
			return GetRuleContext<QualifiedidContext>(0);
		}
		public IdexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterIdexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitIdexpression(this);
		}
	}

	[RuleVersion(0)]
	public IdexpressionContext idexpression() {
		IdexpressionContext _localctx = new IdexpressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_idexpression);
		try {
			State = 415;
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 413; unqualifiedid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 414; qualifiedid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnqualifiedidContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public OperatorfunctionidContext operatorfunctionid() {
			return GetRuleContext<OperatorfunctionidContext>(0);
		}
		public ConversionfunctionidContext conversionfunctionid() {
			return GetRuleContext<ConversionfunctionidContext>(0);
		}
		public LiteraloperatoridContext literaloperatorid() {
			return GetRuleContext<LiteraloperatoridContext>(0);
		}
		public ClassnameContext classname() {
			return GetRuleContext<ClassnameContext>(0);
		}
		public DecltypespecifierContext decltypespecifier() {
			return GetRuleContext<DecltypespecifierContext>(0);
		}
		public TemplateidContext templateid() {
			return GetRuleContext<TemplateidContext>(0);
		}
		public UnqualifiedidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unqualifiedid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUnqualifiedid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUnqualifiedid(this);
		}
	}

	[RuleVersion(0)]
	public UnqualifiedidContext unqualifiedid() {
		UnqualifiedidContext _localctx = new UnqualifiedidContext(Context, State);
		EnterRule(_localctx, 6, RULE_unqualifiedid);
		try {
			State = 426;
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 417; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 418; operatorfunctionid();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 419; conversionfunctionid();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 420; literaloperatorid();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 421; Match(Tilde);
				State = 422; classname();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 423; Match(Tilde);
				State = 424; decltypespecifier();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 425; templateid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedidContext : ParserRuleContext {
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public UnqualifiedidContext unqualifiedid() {
			return GetRuleContext<UnqualifiedidContext>(0);
		}
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public QualifiedidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterQualifiedid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitQualifiedid(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedidContext qualifiedid() {
		QualifiedidContext _localctx = new QualifiedidContext(Context, State);
		EnterRule(_localctx, 8, RULE_qualifiedid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428; nestednamespecifier(0);
			State = 430;
			_la = TokenStream.La(1);
			if (_la==Template) {
				{
				State = 429; Match(Template);
				}
			}

			State = 432; unqualifiedid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestednamespecifierContext : ParserRuleContext {
		public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public NamespacenameContext namespacename() {
			return GetRuleContext<NamespacenameContext>(0);
		}
		public DecltypespecifierContext decltypespecifier() {
			return GetRuleContext<DecltypespecifierContext>(0);
		}
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public SimpletemplateidContext simpletemplateid() {
			return GetRuleContext<SimpletemplateidContext>(0);
		}
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public NestednamespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestednamespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNestednamespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNestednamespecifier(this);
		}
	}

	[RuleVersion(0)]
	public NestednamespecifierContext nestednamespecifier() {
		return nestednamespecifier(0);
	}

	private NestednamespecifierContext nestednamespecifier(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NestednamespecifierContext _localctx = new NestednamespecifierContext(Context, _parentState);
		NestednamespecifierContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_nestednamespecifier, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 445;
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 435; Match(Doublecolon);
				}
				break;
			case 2:
				{
				State = 436; typename();
				State = 437; Match(Doublecolon);
				}
				break;
			case 3:
				{
				State = 439; namespacename();
				State = 440; Match(Doublecolon);
				}
				break;
			case 4:
				{
				State = 442; decltypespecifier();
				State = 443; Match(Doublecolon);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 459;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 457;
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new NestednamespecifierContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_nestednamespecifier);
						State = 447;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 448; Match(Identifier);
						State = 449; Match(Doublecolon);
						}
						break;
					case 2:
						{
						_localctx = new NestednamespecifierContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_nestednamespecifier);
						State = 450;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 452;
						_la = TokenStream.La(1);
						if (_la==Template) {
							{
							State = 451; Match(Template);
							}
						}

						State = 454; simpletemplateid();
						State = 455; Match(Doublecolon);
						}
						break;
					}
					} 
				}
				State = 461;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LambdaexpressionContext : ParserRuleContext {
		public LambdaintroducerContext lambdaintroducer() {
			return GetRuleContext<LambdaintroducerContext>(0);
		}
		public CompoundstatementContext compoundstatement() {
			return GetRuleContext<CompoundstatementContext>(0);
		}
		public LambdadeclaratorContext lambdadeclarator() {
			return GetRuleContext<LambdadeclaratorContext>(0);
		}
		public LambdaexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLambdaexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLambdaexpression(this);
		}
	}

	[RuleVersion(0)]
	public LambdaexpressionContext lambdaexpression() {
		LambdaexpressionContext _localctx = new LambdaexpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_lambdaexpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462; lambdaintroducer();
			State = 464;
			_la = TokenStream.La(1);
			if (_la==LeftParen) {
				{
				State = 463; lambdadeclarator();
				}
			}

			State = 466; compoundstatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaintroducerContext : ParserRuleContext {
		public LambdacaptureContext lambdacapture() {
			return GetRuleContext<LambdacaptureContext>(0);
		}
		public LambdaintroducerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaintroducer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLambdaintroducer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLambdaintroducer(this);
		}
	}

	[RuleVersion(0)]
	public LambdaintroducerContext lambdaintroducer() {
		LambdaintroducerContext _localctx = new LambdaintroducerContext(Context, State);
		EnterRule(_localctx, 14, RULE_lambdaintroducer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468; Match(LeftBracket);
			State = 470;
			_la = TokenStream.La(1);
			if (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (This - 61)) | (1L << (And - 61)) | (1L << (Assign - 61)) | (1L << (Identifier - 61)))) != 0)) {
				{
				State = 469; lambdacapture();
				}
			}

			State = 472; Match(RightBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdacaptureContext : ParserRuleContext {
		public CapturedefaultContext capturedefault() {
			return GetRuleContext<CapturedefaultContext>(0);
		}
		public CapturelistContext capturelist() {
			return GetRuleContext<CapturelistContext>(0);
		}
		public LambdacaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdacapture; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLambdacapture(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLambdacapture(this);
		}
	}

	[RuleVersion(0)]
	public LambdacaptureContext lambdacapture() {
		LambdacaptureContext _localctx = new LambdacaptureContext(Context, State);
		EnterRule(_localctx, 16, RULE_lambdacapture);
		try {
			State = 480;
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 474; capturedefault();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 475; capturelist(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 476; capturedefault();
				State = 477; Match(Comma);
				State = 478; capturelist(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CapturedefaultContext : ParserRuleContext {
		public CapturedefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_capturedefault; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCapturedefault(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCapturedefault(this);
		}
	}

	[RuleVersion(0)]
	public CapturedefaultContext capturedefault() {
		CapturedefaultContext _localctx = new CapturedefaultContext(Context, State);
		EnterRule(_localctx, 18, RULE_capturedefault);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			_la = TokenStream.La(1);
			if ( !(_la==And || _la==Assign) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CapturelistContext : ParserRuleContext {
		public CaptureContext capture() {
			return GetRuleContext<CaptureContext>(0);
		}
		public CapturelistContext capturelist() {
			return GetRuleContext<CapturelistContext>(0);
		}
		public CapturelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_capturelist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCapturelist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCapturelist(this);
		}
	}

	[RuleVersion(0)]
	public CapturelistContext capturelist() {
		return capturelist(0);
	}

	private CapturelistContext capturelist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CapturelistContext _localctx = new CapturelistContext(Context, _parentState);
		CapturelistContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_capturelist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 485; capture();
			State = 487;
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 486; Match(Ellipsis);
				}
				break;
			}
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 497;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CapturelistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_capturelist);
					State = 489;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 490; Match(Comma);
					State = 491; capture();
					State = 493;
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						State = 492; Match(Ellipsis);
						}
						break;
					}
					}
					} 
				}
				State = 499;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CaptureContext : ParserRuleContext {
		public SimplecaptureContext simplecapture() {
			return GetRuleContext<SimplecaptureContext>(0);
		}
		public InitcaptureContext initcapture() {
			return GetRuleContext<InitcaptureContext>(0);
		}
		public CaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_capture; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCapture(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCapture(this);
		}
	}

	[RuleVersion(0)]
	public CaptureContext capture() {
		CaptureContext _localctx = new CaptureContext(Context, State);
		EnterRule(_localctx, 22, RULE_capture);
		try {
			State = 502;
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 500; simplecapture();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 501; initcapture();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimplecaptureContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public ITerminalNode This() { return GetToken(CPP14Parser.This, 0); }
		public SimplecaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simplecapture; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterSimplecapture(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitSimplecapture(this);
		}
	}

	[RuleVersion(0)]
	public SimplecaptureContext simplecapture() {
		SimplecaptureContext _localctx = new SimplecaptureContext(Context, State);
		EnterRule(_localctx, 24, RULE_simplecapture);
		try {
			State = 508;
			switch (TokenStream.La(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 504; Match(Identifier);
				}
				break;
			case And:
				EnterOuterAlt(_localctx, 2);
				{
				State = 505; Match(And);
				State = 506; Match(Identifier);
				}
				break;
			case This:
				EnterOuterAlt(_localctx, 3);
				{
				State = 507; Match(This);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitcaptureContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public InitcaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initcapture; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterInitcapture(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitInitcapture(this);
		}
	}

	[RuleVersion(0)]
	public InitcaptureContext initcapture() {
		InitcaptureContext _localctx = new InitcaptureContext(Context, State);
		EnterRule(_localctx, 26, RULE_initcapture);
		try {
			State = 515;
			switch (TokenStream.La(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 510; Match(Identifier);
				State = 511; initializer();
				}
				break;
			case And:
				EnterOuterAlt(_localctx, 2);
				{
				State = 512; Match(And);
				State = 513; Match(Identifier);
				State = 514; initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdadeclaratorContext : ParserRuleContext {
		public ParameterdeclarationclauseContext parameterdeclarationclause() {
			return GetRuleContext<ParameterdeclarationclauseContext>(0);
		}
		public ITerminalNode Mutable() { return GetToken(CPP14Parser.Mutable, 0); }
		public ExceptionspecificationContext exceptionspecification() {
			return GetRuleContext<ExceptionspecificationContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public TrailingreturntypeContext trailingreturntype() {
			return GetRuleContext<TrailingreturntypeContext>(0);
		}
		public LambdadeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdadeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLambdadeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLambdadeclarator(this);
		}
	}

	[RuleVersion(0)]
	public LambdadeclaratorContext lambdadeclarator() {
		LambdadeclaratorContext _localctx = new LambdadeclaratorContext(Context, State);
		EnterRule(_localctx, 28, RULE_lambdadeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517; Match(LeftParen);
			State = 518; parameterdeclarationclause();
			State = 519; Match(RightParen);
			State = 521;
			_la = TokenStream.La(1);
			if (_la==Mutable) {
				{
				State = 520; Match(Mutable);
				}
			}

			State = 524;
			_la = TokenStream.La(1);
			if (_la==Noexcept || _la==Throw) {
				{
				State = 523; exceptionspecification();
				}
			}

			State = 527;
			_la = TokenStream.La(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 526; attributespecifierseq(0);
				}
			}

			State = 530;
			_la = TokenStream.La(1);
			if (_la==Arrow) {
				{
				State = 529; trailingreturntype();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixexpressionContext : ParserRuleContext {
		public PrimaryexpressionContext primaryexpression() {
			return GetRuleContext<PrimaryexpressionContext>(0);
		}
		public SimpletypespecifierContext simpletypespecifier() {
			return GetRuleContext<SimpletypespecifierContext>(0);
		}
		public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		public TypenamespecifierContext typenamespecifier() {
			return GetRuleContext<TypenamespecifierContext>(0);
		}
		public BracedinitlistContext bracedinitlist() {
			return GetRuleContext<BracedinitlistContext>(0);
		}
		public ITerminalNode Dynamic_cast() { return GetToken(CPP14Parser.Dynamic_cast, 0); }
		public TypeidContext typeid() {
			return GetRuleContext<TypeidContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Static_cast() { return GetToken(CPP14Parser.Static_cast, 0); }
		public ITerminalNode Reinterpret_cast() { return GetToken(CPP14Parser.Reinterpret_cast, 0); }
		public ITerminalNode Const_cast() { return GetToken(CPP14Parser.Const_cast, 0); }
		public ITerminalNode Typeid() { return GetToken(CPP14Parser.Typeid, 0); }
		public PostfixexpressionContext postfixexpression() {
			return GetRuleContext<PostfixexpressionContext>(0);
		}
		public IdexpressionContext idexpression() {
			return GetRuleContext<IdexpressionContext>(0);
		}
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public PseudodestructornameContext pseudodestructorname() {
			return GetRuleContext<PseudodestructornameContext>(0);
		}
		public PostfixexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPostfixexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPostfixexpression(this);
		}
	}

	[RuleVersion(0)]
	public PostfixexpressionContext postfixexpression() {
		return postfixexpression(0);
	}

	private PostfixexpressionContext postfixexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PostfixexpressionContext _localctx = new PostfixexpressionContext(Context, _parentState);
		PostfixexpressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_postfixexpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 596;
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 533; primaryexpression();
				}
				break;
			case 2:
				{
				State = 534; simpletypespecifier();
				State = 535; Match(LeftParen);
				State = 537;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof) | (1L << Static_cast) | (1L << This) | (1L << Throw))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (True - 64)) | (1L << (Typeid - 64)) | (1L << (Typename - 64)) | (1L << (Unsigned - 64)) | (1L << (Void - 64)) | (1L << (Wchar - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (LeftBrace - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Or - 64)) | (1L << (Tilde - 64)) | (1L << (Not - 64)) | (1L << (PlusPlus - 64)) | (1L << (MinusMinus - 64)) | (1L << (Doublecolon - 64)) | (1L << (Identifier - 64)) | (1L << (Integerliteral - 64)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (Characterliteral - 131)) | (1L << (Floatingliteral - 131)) | (1L << (Stringliteral - 131)) | (1L << (Userdefinedintegerliteral - 131)) | (1L << (Userdefinedfloatingliteral - 131)) | (1L << (Userdefinedstringliteral - 131)) | (1L << (Userdefinedcharacterliteral - 131)))) != 0)) {
					{
					State = 536; expressionlist();
					}
				}

				State = 539; Match(RightParen);
				}
				break;
			case 3:
				{
				State = 541; typenamespecifier();
				State = 542; Match(LeftParen);
				State = 544;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof) | (1L << Static_cast) | (1L << This) | (1L << Throw))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (True - 64)) | (1L << (Typeid - 64)) | (1L << (Typename - 64)) | (1L << (Unsigned - 64)) | (1L << (Void - 64)) | (1L << (Wchar - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (LeftBrace - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Or - 64)) | (1L << (Tilde - 64)) | (1L << (Not - 64)) | (1L << (PlusPlus - 64)) | (1L << (MinusMinus - 64)) | (1L << (Doublecolon - 64)) | (1L << (Identifier - 64)) | (1L << (Integerliteral - 64)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (Characterliteral - 131)) | (1L << (Floatingliteral - 131)) | (1L << (Stringliteral - 131)) | (1L << (Userdefinedintegerliteral - 131)) | (1L << (Userdefinedfloatingliteral - 131)) | (1L << (Userdefinedstringliteral - 131)) | (1L << (Userdefinedcharacterliteral - 131)))) != 0)) {
					{
					State = 543; expressionlist();
					}
				}

				State = 546; Match(RightParen);
				}
				break;
			case 4:
				{
				State = 548; simpletypespecifier();
				State = 549; bracedinitlist();
				}
				break;
			case 5:
				{
				State = 551; typenamespecifier();
				State = 552; bracedinitlist();
				}
				break;
			case 6:
				{
				State = 554; Match(Dynamic_cast);
				State = 555; Match(Less);
				State = 556; typeid();
				State = 557; Match(Greater);
				State = 558; Match(LeftParen);
				State = 559; expression(0);
				State = 560; Match(RightParen);
				}
				break;
			case 7:
				{
				State = 562; Match(Static_cast);
				State = 563; Match(Less);
				State = 564; typeid();
				State = 565; Match(Greater);
				State = 566; Match(LeftParen);
				State = 567; expression(0);
				State = 568; Match(RightParen);
				}
				break;
			case 8:
				{
				State = 570; Match(Reinterpret_cast);
				State = 571; Match(Less);
				State = 572; typeid();
				State = 573; Match(Greater);
				State = 574; Match(LeftParen);
				State = 575; expression(0);
				State = 576; Match(RightParen);
				}
				break;
			case 9:
				{
				State = 578; Match(Const_cast);
				State = 579; Match(Less);
				State = 580; typeid();
				State = 581; Match(Greater);
				State = 582; Match(LeftParen);
				State = 583; expression(0);
				State = 584; Match(RightParen);
				}
				break;
			case 10:
				{
				State = 586; Match(Typeid);
				State = 587; Match(LeftParen);
				State = 588; expression(0);
				State = 589; Match(RightParen);
				}
				break;
			case 11:
				{
				State = 591; Match(Typeid);
				State = 592; Match(LeftParen);
				State = 593; typeid();
				State = 594; Match(RightParen);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 638;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 636;
					switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
					case 1:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 598;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 599; Match(LeftBracket);
						State = 600; expression(0);
						State = 601; Match(RightBracket);
						}
						break;
					case 2:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 603;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 604; Match(LeftBracket);
						State = 605; bracedinitlist();
						State = 606; Match(RightBracket);
						}
						break;
					case 3:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 608;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 609; Match(LeftParen);
						State = 611;
						_la = TokenStream.La(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof) | (1L << Static_cast) | (1L << This) | (1L << Throw))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (True - 64)) | (1L << (Typeid - 64)) | (1L << (Typename - 64)) | (1L << (Unsigned - 64)) | (1L << (Void - 64)) | (1L << (Wchar - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (LeftBrace - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Or - 64)) | (1L << (Tilde - 64)) | (1L << (Not - 64)) | (1L << (PlusPlus - 64)) | (1L << (MinusMinus - 64)) | (1L << (Doublecolon - 64)) | (1L << (Identifier - 64)) | (1L << (Integerliteral - 64)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (Characterliteral - 131)) | (1L << (Floatingliteral - 131)) | (1L << (Stringliteral - 131)) | (1L << (Userdefinedintegerliteral - 131)) | (1L << (Userdefinedfloatingliteral - 131)) | (1L << (Userdefinedstringliteral - 131)) | (1L << (Userdefinedcharacterliteral - 131)))) != 0)) {
							{
							State = 610; expressionlist();
							}
						}

						State = 613; Match(RightParen);
						}
						break;
					case 4:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 614;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 615; Match(Dot);
						State = 617;
						_la = TokenStream.La(1);
						if (_la==Template) {
							{
							State = 616; Match(Template);
							}
						}

						State = 619; idexpression();
						}
						break;
					case 5:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 620;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 621; Match(Arrow);
						State = 623;
						_la = TokenStream.La(1);
						if (_la==Template) {
							{
							State = 622; Match(Template);
							}
						}

						State = 625; idexpression();
						}
						break;
					case 6:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 626;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 627; Match(Dot);
						State = 628; pseudodestructorname();
						}
						break;
					case 7:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 629;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 630; Match(Arrow);
						State = 631; pseudodestructorname();
						}
						break;
					case 8:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 632;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 633; Match(PlusPlus);
						}
						break;
					case 9:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 634;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 635; Match(MinusMinus);
						}
						break;
					}
					} 
				}
				State = 640;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionlistContext : ParserRuleContext {
		public InitializerlistContext initializerlist() {
			return GetRuleContext<InitializerlistContext>(0);
		}
		public ExpressionlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExpressionlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExpressionlist(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionlistContext expressionlist() {
		ExpressionlistContext _localctx = new ExpressionlistContext(Context, State);
		EnterRule(_localctx, 32, RULE_expressionlist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 641; initializerlist(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PseudodestructornameContext : ParserRuleContext {
		public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public SimpletemplateidContext simpletemplateid() {
			return GetRuleContext<SimpletemplateidContext>(0);
		}
		public DecltypespecifierContext decltypespecifier() {
			return GetRuleContext<DecltypespecifierContext>(0);
		}
		public PseudodestructornameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pseudodestructorname; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPseudodestructorname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPseudodestructorname(this);
		}
	}

	[RuleVersion(0)]
	public PseudodestructornameContext pseudodestructorname() {
		PseudodestructornameContext _localctx = new PseudodestructornameContext(Context, State);
		EnterRule(_localctx, 34, RULE_pseudodestructorname);
		int _la;
		try {
			State = 665;
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 644;
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 643; nestednamespecifier(0);
					}
					break;
				}
				State = 646; typename();
				State = 647; Match(Doublecolon);
				State = 648; Match(Tilde);
				State = 649; typename();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 651; nestednamespecifier(0);
				State = 652; Match(Template);
				State = 653; simpletemplateid();
				State = 654; Match(Doublecolon);
				State = 655; Match(Tilde);
				State = 656; typename();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 659;
				_la = TokenStream.La(1);
				if (_la==Decltype || _la==Doublecolon || _la==Identifier) {
					{
					State = 658; nestednamespecifier(0);
					}
				}

				State = 661; Match(Tilde);
				State = 662; typename();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 663; Match(Tilde);
				State = 664; decltypespecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryexpressionContext : ParserRuleContext {
		public PostfixexpressionContext postfixexpression() {
			return GetRuleContext<PostfixexpressionContext>(0);
		}
		public CastexpressionContext castexpression() {
			return GetRuleContext<CastexpressionContext>(0);
		}
		public UnaryoperatorContext unaryoperator() {
			return GetRuleContext<UnaryoperatorContext>(0);
		}
		public ITerminalNode Sizeof() { return GetToken(CPP14Parser.Sizeof, 0); }
		public UnaryexpressionContext unaryexpression() {
			return GetRuleContext<UnaryexpressionContext>(0);
		}
		public TypeidContext typeid() {
			return GetRuleContext<TypeidContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public ITerminalNode Alignof() { return GetToken(CPP14Parser.Alignof, 0); }
		public NoexceptexpressionContext noexceptexpression() {
			return GetRuleContext<NoexceptexpressionContext>(0);
		}
		public NewexpressionContext newexpression() {
			return GetRuleContext<NewexpressionContext>(0);
		}
		public DeleteexpressionContext deleteexpression() {
			return GetRuleContext<DeleteexpressionContext>(0);
		}
		public UnaryexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUnaryexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUnaryexpression(this);
		}
	}

	[RuleVersion(0)]
	public UnaryexpressionContext unaryexpression() {
		UnaryexpressionContext _localctx = new UnaryexpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_unaryexpression);
		try {
			State = 695;
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 667; postfixexpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 668; Match(PlusPlus);
				State = 669; castexpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 670; Match(MinusMinus);
				State = 671; castexpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 672; unaryoperator();
				State = 673; castexpression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 675; Match(Sizeof);
				State = 676; unaryexpression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 677; Match(Sizeof);
				State = 678; Match(LeftParen);
				State = 679; typeid();
				State = 680; Match(RightParen);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 682; Match(Sizeof);
				State = 683; Match(Ellipsis);
				State = 684; Match(LeftParen);
				State = 685; Match(Identifier);
				State = 686; Match(RightParen);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 687; Match(Alignof);
				State = 688; Match(LeftParen);
				State = 689; typeid();
				State = 690; Match(RightParen);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 692; noexceptexpression();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 693; newexpression();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 694; deleteexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryoperatorContext : ParserRuleContext {
		public UnaryoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryoperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUnaryoperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUnaryoperator(this);
		}
	}

	[RuleVersion(0)]
	public UnaryoperatorContext unaryoperator() {
		UnaryoperatorContext _localctx = new UnaryoperatorContext(Context, State);
		EnterRule(_localctx, 38, RULE_unaryoperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 697;
			_la = TokenStream.La(1);
			if ( !(((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (Plus - 83)) | (1L << (Minus - 83)) | (1L << (Star - 83)) | (1L << (And - 83)) | (1L << (Or - 83)) | (1L << (Tilde - 83)) | (1L << (Not - 83)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewexpressionContext : ParserRuleContext {
		public ITerminalNode New() { return GetToken(CPP14Parser.New, 0); }
		public NewtypeidContext newtypeid() {
			return GetRuleContext<NewtypeidContext>(0);
		}
		public NewplacementContext newplacement() {
			return GetRuleContext<NewplacementContext>(0);
		}
		public NewinitializerContext newinitializer() {
			return GetRuleContext<NewinitializerContext>(0);
		}
		public TypeidContext typeid() {
			return GetRuleContext<TypeidContext>(0);
		}
		public NewexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNewexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNewexpression(this);
		}
	}

	[RuleVersion(0)]
	public NewexpressionContext newexpression() {
		NewexpressionContext _localctx = new NewexpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_newexpression);
		int _la;
		try {
			State = 723;
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 700;
				_la = TokenStream.La(1);
				if (_la==Doublecolon) {
					{
					State = 699; Match(Doublecolon);
					}
				}

				State = 702; Match(New);
				State = 704;
				_la = TokenStream.La(1);
				if (_la==LeftParen) {
					{
					State = 703; newplacement();
					}
				}

				State = 706; newtypeid();
				State = 708;
				switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
				case 1:
					{
					State = 707; newinitializer();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 711;
				_la = TokenStream.La(1);
				if (_la==Doublecolon) {
					{
					State = 710; Match(Doublecolon);
					}
				}

				State = 713; Match(New);
				State = 715;
				switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
				case 1:
					{
					State = 714; newplacement();
					}
					break;
				}
				State = 717; Match(LeftParen);
				State = 718; typeid();
				State = 719; Match(RightParen);
				State = 721;
				switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
				case 1:
					{
					State = 720; newinitializer();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewplacementContext : ParserRuleContext {
		public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		public NewplacementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newplacement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNewplacement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNewplacement(this);
		}
	}

	[RuleVersion(0)]
	public NewplacementContext newplacement() {
		NewplacementContext _localctx = new NewplacementContext(Context, State);
		EnterRule(_localctx, 42, RULE_newplacement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 725; Match(LeftParen);
			State = 726; expressionlist();
			State = 727; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewtypeidContext : ParserRuleContext {
		public TypespecifierseqContext typespecifierseq() {
			return GetRuleContext<TypespecifierseqContext>(0);
		}
		public NewdeclaratorContext newdeclarator() {
			return GetRuleContext<NewdeclaratorContext>(0);
		}
		public NewtypeidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newtypeid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNewtypeid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNewtypeid(this);
		}
	}

	[RuleVersion(0)]
	public NewtypeidContext newtypeid() {
		NewtypeidContext _localctx = new NewtypeidContext(Context, State);
		EnterRule(_localctx, 44, RULE_newtypeid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 729; typespecifierseq();
			State = 731;
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 730; newdeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewdeclaratorContext : ParserRuleContext {
		public PtroperatorContext ptroperator() {
			return GetRuleContext<PtroperatorContext>(0);
		}
		public NewdeclaratorContext newdeclarator() {
			return GetRuleContext<NewdeclaratorContext>(0);
		}
		public NoptrnewdeclaratorContext noptrnewdeclarator() {
			return GetRuleContext<NoptrnewdeclaratorContext>(0);
		}
		public NewdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNewdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNewdeclarator(this);
		}
	}

	[RuleVersion(0)]
	public NewdeclaratorContext newdeclarator() {
		NewdeclaratorContext _localctx = new NewdeclaratorContext(Context, State);
		EnterRule(_localctx, 46, RULE_newdeclarator);
		try {
			State = 738;
			switch (TokenStream.La(1)) {
			case Decltype:
			case Star:
			case And:
			case AndAnd:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 733; ptroperator();
				State = 735;
				switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
				case 1:
					{
					State = 734; newdeclarator();
					}
					break;
				}
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 737; noptrnewdeclarator(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoptrnewdeclaratorContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public NoptrnewdeclaratorContext noptrnewdeclarator() {
			return GetRuleContext<NoptrnewdeclaratorContext>(0);
		}
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public NoptrnewdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noptrnewdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNoptrnewdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNoptrnewdeclarator(this);
		}
	}

	[RuleVersion(0)]
	public NoptrnewdeclaratorContext noptrnewdeclarator() {
		return noptrnewdeclarator(0);
	}

	private NoptrnewdeclaratorContext noptrnewdeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NoptrnewdeclaratorContext _localctx = new NoptrnewdeclaratorContext(Context, _parentState);
		NoptrnewdeclaratorContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_noptrnewdeclarator, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 741; Match(LeftBracket);
			State = 742; expression(0);
			State = 743; Match(RightBracket);
			State = 745;
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 744; attributespecifierseq(0);
				}
				break;
			}
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 756;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NoptrnewdeclaratorContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_noptrnewdeclarator);
					State = 747;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 748; Match(LeftBracket);
					State = 749; constantexpression();
					State = 750; Match(RightBracket);
					State = 752;
					switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
					case 1:
						{
						State = 751; attributespecifierseq(0);
						}
						break;
					}
					}
					} 
				}
				State = 758;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NewinitializerContext : ParserRuleContext {
		public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		public BracedinitlistContext bracedinitlist() {
			return GetRuleContext<BracedinitlistContext>(0);
		}
		public NewinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newinitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNewinitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNewinitializer(this);
		}
	}

	[RuleVersion(0)]
	public NewinitializerContext newinitializer() {
		NewinitializerContext _localctx = new NewinitializerContext(Context, State);
		EnterRule(_localctx, 50, RULE_newinitializer);
		int _la;
		try {
			State = 765;
			switch (TokenStream.La(1)) {
			case LeftParen:
				EnterOuterAlt(_localctx, 1);
				{
				State = 759; Match(LeftParen);
				State = 761;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof) | (1L << Static_cast) | (1L << This) | (1L << Throw))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (True - 64)) | (1L << (Typeid - 64)) | (1L << (Typename - 64)) | (1L << (Unsigned - 64)) | (1L << (Void - 64)) | (1L << (Wchar - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (LeftBrace - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Or - 64)) | (1L << (Tilde - 64)) | (1L << (Not - 64)) | (1L << (PlusPlus - 64)) | (1L << (MinusMinus - 64)) | (1L << (Doublecolon - 64)) | (1L << (Identifier - 64)) | (1L << (Integerliteral - 64)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (Characterliteral - 131)) | (1L << (Floatingliteral - 131)) | (1L << (Stringliteral - 131)) | (1L << (Userdefinedintegerliteral - 131)) | (1L << (Userdefinedfloatingliteral - 131)) | (1L << (Userdefinedstringliteral - 131)) | (1L << (Userdefinedcharacterliteral - 131)))) != 0)) {
					{
					State = 760; expressionlist();
					}
				}

				State = 763; Match(RightParen);
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 764; bracedinitlist();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteexpressionContext : ParserRuleContext {
		public ITerminalNode Delete() { return GetToken(CPP14Parser.Delete, 0); }
		public CastexpressionContext castexpression() {
			return GetRuleContext<CastexpressionContext>(0);
		}
		public DeleteexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeleteexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeleteexpression(this);
		}
	}

	[RuleVersion(0)]
	public DeleteexpressionContext deleteexpression() {
		DeleteexpressionContext _localctx = new DeleteexpressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_deleteexpression);
		int _la;
		try {
			State = 779;
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 768;
				_la = TokenStream.La(1);
				if (_la==Doublecolon) {
					{
					State = 767; Match(Doublecolon);
					}
				}

				State = 770; Match(Delete);
				State = 771; castexpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 773;
				_la = TokenStream.La(1);
				if (_la==Doublecolon) {
					{
					State = 772; Match(Doublecolon);
					}
				}

				State = 775; Match(Delete);
				State = 776; Match(LeftBracket);
				State = 777; Match(RightBracket);
				State = 778; castexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoexceptexpressionContext : ParserRuleContext {
		public ITerminalNode Noexcept() { return GetToken(CPP14Parser.Noexcept, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NoexceptexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noexceptexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNoexceptexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNoexceptexpression(this);
		}
	}

	[RuleVersion(0)]
	public NoexceptexpressionContext noexceptexpression() {
		NoexceptexpressionContext _localctx = new NoexceptexpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_noexceptexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 781; Match(Noexcept);
			State = 782; Match(LeftParen);
			State = 783; expression(0);
			State = 784; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastexpressionContext : ParserRuleContext {
		public UnaryexpressionContext unaryexpression() {
			return GetRuleContext<UnaryexpressionContext>(0);
		}
		public TypeidContext typeid() {
			return GetRuleContext<TypeidContext>(0);
		}
		public CastexpressionContext castexpression() {
			return GetRuleContext<CastexpressionContext>(0);
		}
		public CastexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCastexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCastexpression(this);
		}
	}

	[RuleVersion(0)]
	public CastexpressionContext castexpression() {
		CastexpressionContext _localctx = new CastexpressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_castexpression);
		try {
			State = 792;
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 786; unaryexpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 787; Match(LeftParen);
				State = 788; typeid();
				State = 789; Match(RightParen);
				State = 790; castexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PmexpressionContext : ParserRuleContext {
		public CastexpressionContext castexpression() {
			return GetRuleContext<CastexpressionContext>(0);
		}
		public PmexpressionContext pmexpression() {
			return GetRuleContext<PmexpressionContext>(0);
		}
		public PmexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pmexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPmexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPmexpression(this);
		}
	}

	[RuleVersion(0)]
	public PmexpressionContext pmexpression() {
		return pmexpression(0);
	}

	private PmexpressionContext pmexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PmexpressionContext _localctx = new PmexpressionContext(Context, _parentState);
		PmexpressionContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_pmexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 795; castexpression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 805;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 803;
					switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
					case 1:
						{
						_localctx = new PmexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_pmexpression);
						State = 797;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 798; Match(DotStar);
						State = 799; castexpression();
						}
						break;
					case 2:
						{
						_localctx = new PmexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_pmexpression);
						State = 800;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 801; Match(ArrowStar);
						State = 802; castexpression();
						}
						break;
					}
					} 
				}
				State = 807;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplicativeexpressionContext : ParserRuleContext {
		public PmexpressionContext pmexpression() {
			return GetRuleContext<PmexpressionContext>(0);
		}
		public MultiplicativeexpressionContext multiplicativeexpression() {
			return GetRuleContext<MultiplicativeexpressionContext>(0);
		}
		public MultiplicativeexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMultiplicativeexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMultiplicativeexpression(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeexpressionContext multiplicativeexpression() {
		return multiplicativeexpression(0);
	}

	private MultiplicativeexpressionContext multiplicativeexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicativeexpressionContext _localctx = new MultiplicativeexpressionContext(Context, _parentState);
		MultiplicativeexpressionContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_multiplicativeexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 809; pmexpression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 822;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 820;
					switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeexpression);
						State = 811;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 812; Match(Star);
						State = 813; pmexpression(0);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeexpression);
						State = 814;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 815; Match(Div);
						State = 816; pmexpression(0);
						}
						break;
					case 3:
						{
						_localctx = new MultiplicativeexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeexpression);
						State = 817;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 818; Match(Mod);
						State = 819; pmexpression(0);
						}
						break;
					}
					} 
				}
				State = 824;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveexpressionContext : ParserRuleContext {
		public MultiplicativeexpressionContext multiplicativeexpression() {
			return GetRuleContext<MultiplicativeexpressionContext>(0);
		}
		public AdditiveexpressionContext additiveexpression() {
			return GetRuleContext<AdditiveexpressionContext>(0);
		}
		public AdditiveexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAdditiveexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAdditiveexpression(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveexpressionContext additiveexpression() {
		return additiveexpression(0);
	}

	private AdditiveexpressionContext additiveexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditiveexpressionContext _localctx = new AdditiveexpressionContext(Context, _parentState);
		AdditiveexpressionContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_additiveexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 826; multiplicativeexpression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 836;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 834;
					switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
					case 1:
						{
						_localctx = new AdditiveexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveexpression);
						State = 828;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 829; Match(Plus);
						State = 830; multiplicativeexpression(0);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveexpression);
						State = 831;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 832; Match(Minus);
						State = 833; multiplicativeexpression(0);
						}
						break;
					}
					} 
				}
				State = 838;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ShiftexpressionContext : ParserRuleContext {
		public AdditiveexpressionContext additiveexpression() {
			return GetRuleContext<AdditiveexpressionContext>(0);
		}
		public ShiftexpressionContext shiftexpression() {
			return GetRuleContext<ShiftexpressionContext>(0);
		}
		public RightShiftContext rightShift() {
			return GetRuleContext<RightShiftContext>(0);
		}
		public ShiftexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterShiftexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitShiftexpression(this);
		}
	}

	[RuleVersion(0)]
	public ShiftexpressionContext shiftexpression() {
		return shiftexpression(0);
	}

	private ShiftexpressionContext shiftexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ShiftexpressionContext _localctx = new ShiftexpressionContext(Context, _parentState);
		ShiftexpressionContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_shiftexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 840; additiveexpression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 851;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 849;
					switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
					case 1:
						{
						_localctx = new ShiftexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftexpression);
						State = 842;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 843; Match(LeftShift);
						State = 844; additiveexpression(0);
						}
						break;
					case 2:
						{
						_localctx = new ShiftexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftexpression);
						State = 845;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 846; rightShift();
						State = 847; additiveexpression(0);
						}
						break;
					}
					} 
				}
				State = 853;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalexpressionContext : ParserRuleContext {
		public ShiftexpressionContext shiftexpression() {
			return GetRuleContext<ShiftexpressionContext>(0);
		}
		public RelationalexpressionContext relationalexpression() {
			return GetRuleContext<RelationalexpressionContext>(0);
		}
		public RelationalexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterRelationalexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitRelationalexpression(this);
		}
	}

	[RuleVersion(0)]
	public RelationalexpressionContext relationalexpression() {
		return relationalexpression(0);
	}

	private RelationalexpressionContext relationalexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RelationalexpressionContext _localctx = new RelationalexpressionContext(Context, _parentState);
		RelationalexpressionContext _prevctx = _localctx;
		int _startState = 66;
		EnterRecursionRule(_localctx, 66, RULE_relationalexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 855; shiftexpression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 871;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 869;
					switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
					case 1:
						{
						_localctx = new RelationalexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalexpression);
						State = 857;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 858; Match(Less);
						State = 859; shiftexpression(0);
						}
						break;
					case 2:
						{
						_localctx = new RelationalexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalexpression);
						State = 860;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 861; Match(Greater);
						State = 862; shiftexpression(0);
						}
						break;
					case 3:
						{
						_localctx = new RelationalexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalexpression);
						State = 863;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 864; Match(LessEqual);
						State = 865; shiftexpression(0);
						}
						break;
					case 4:
						{
						_localctx = new RelationalexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalexpression);
						State = 866;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 867; Match(GreaterEqual);
						State = 868; shiftexpression(0);
						}
						break;
					}
					} 
				}
				State = 873;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityexpressionContext : ParserRuleContext {
		public RelationalexpressionContext relationalexpression() {
			return GetRuleContext<RelationalexpressionContext>(0);
		}
		public EqualityexpressionContext equalityexpression() {
			return GetRuleContext<EqualityexpressionContext>(0);
		}
		public EqualityexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEqualityexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEqualityexpression(this);
		}
	}

	[RuleVersion(0)]
	public EqualityexpressionContext equalityexpression() {
		return equalityexpression(0);
	}

	private EqualityexpressionContext equalityexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityexpressionContext _localctx = new EqualityexpressionContext(Context, _parentState);
		EqualityexpressionContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_equalityexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 875; relationalexpression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 885;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 883;
					switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
					case 1:
						{
						_localctx = new EqualityexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityexpression);
						State = 877;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 878; Match(Equal);
						State = 879; relationalexpression(0);
						}
						break;
					case 2:
						{
						_localctx = new EqualityexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityexpression);
						State = 880;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 881; Match(NotEqual);
						State = 882; relationalexpression(0);
						}
						break;
					}
					} 
				}
				State = 887;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndexpressionContext : ParserRuleContext {
		public EqualityexpressionContext equalityexpression() {
			return GetRuleContext<EqualityexpressionContext>(0);
		}
		public AndexpressionContext andexpression() {
			return GetRuleContext<AndexpressionContext>(0);
		}
		public AndexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAndexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAndexpression(this);
		}
	}

	[RuleVersion(0)]
	public AndexpressionContext andexpression() {
		return andexpression(0);
	}

	private AndexpressionContext andexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AndexpressionContext _localctx = new AndexpressionContext(Context, _parentState);
		AndexpressionContext _prevctx = _localctx;
		int _startState = 70;
		EnterRecursionRule(_localctx, 70, RULE_andexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 889; equalityexpression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 896;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndexpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_andexpression);
					State = 891;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 892; Match(And);
					State = 893; equalityexpression(0);
					}
					} 
				}
				State = 898;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExclusiveorexpressionContext : ParserRuleContext {
		public AndexpressionContext andexpression() {
			return GetRuleContext<AndexpressionContext>(0);
		}
		public ExclusiveorexpressionContext exclusiveorexpression() {
			return GetRuleContext<ExclusiveorexpressionContext>(0);
		}
		public ExclusiveorexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveorexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExclusiveorexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExclusiveorexpression(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveorexpressionContext exclusiveorexpression() {
		return exclusiveorexpression(0);
	}

	private ExclusiveorexpressionContext exclusiveorexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExclusiveorexpressionContext _localctx = new ExclusiveorexpressionContext(Context, _parentState);
		ExclusiveorexpressionContext _prevctx = _localctx;
		int _startState = 72;
		EnterRecursionRule(_localctx, 72, RULE_exclusiveorexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 900; andexpression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 907;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExclusiveorexpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_exclusiveorexpression);
					State = 902;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 903; Match(Caret);
					State = 904; andexpression(0);
					}
					} 
				}
				State = 909;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InclusiveorexpressionContext : ParserRuleContext {
		public ExclusiveorexpressionContext exclusiveorexpression() {
			return GetRuleContext<ExclusiveorexpressionContext>(0);
		}
		public InclusiveorexpressionContext inclusiveorexpression() {
			return GetRuleContext<InclusiveorexpressionContext>(0);
		}
		public InclusiveorexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveorexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterInclusiveorexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitInclusiveorexpression(this);
		}
	}

	[RuleVersion(0)]
	public InclusiveorexpressionContext inclusiveorexpression() {
		return inclusiveorexpression(0);
	}

	private InclusiveorexpressionContext inclusiveorexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InclusiveorexpressionContext _localctx = new InclusiveorexpressionContext(Context, _parentState);
		InclusiveorexpressionContext _prevctx = _localctx;
		int _startState = 74;
		EnterRecursionRule(_localctx, 74, RULE_inclusiveorexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 911; exclusiveorexpression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 918;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InclusiveorexpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_inclusiveorexpression);
					State = 913;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 914; Match(Or);
					State = 915; exclusiveorexpression(0);
					}
					} 
				}
				State = 920;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalandexpressionContext : ParserRuleContext {
		public InclusiveorexpressionContext inclusiveorexpression() {
			return GetRuleContext<InclusiveorexpressionContext>(0);
		}
		public LogicalandexpressionContext logicalandexpression() {
			return GetRuleContext<LogicalandexpressionContext>(0);
		}
		public LogicalandexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalandexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLogicalandexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLogicalandexpression(this);
		}
	}

	[RuleVersion(0)]
	public LogicalandexpressionContext logicalandexpression() {
		return logicalandexpression(0);
	}

	private LogicalandexpressionContext logicalandexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalandexpressionContext _localctx = new LogicalandexpressionContext(Context, _parentState);
		LogicalandexpressionContext _prevctx = _localctx;
		int _startState = 76;
		EnterRecursionRule(_localctx, 76, RULE_logicalandexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 922; inclusiveorexpression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 929;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalandexpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logicalandexpression);
					State = 924;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 925; Match(AndAnd);
					State = 926; inclusiveorexpression(0);
					}
					} 
				}
				State = 931;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalorexpressionContext : ParserRuleContext {
		public LogicalandexpressionContext logicalandexpression() {
			return GetRuleContext<LogicalandexpressionContext>(0);
		}
		public LogicalorexpressionContext logicalorexpression() {
			return GetRuleContext<LogicalorexpressionContext>(0);
		}
		public LogicalorexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalorexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLogicalorexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLogicalorexpression(this);
		}
	}

	[RuleVersion(0)]
	public LogicalorexpressionContext logicalorexpression() {
		return logicalorexpression(0);
	}

	private LogicalorexpressionContext logicalorexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalorexpressionContext _localctx = new LogicalorexpressionContext(Context, _parentState);
		LogicalorexpressionContext _prevctx = _localctx;
		int _startState = 78;
		EnterRecursionRule(_localctx, 78, RULE_logicalorexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 933; logicalandexpression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 940;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalorexpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logicalorexpression);
					State = 935;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 936; Match(OrOr);
					State = 937; logicalandexpression(0);
					}
					} 
				}
				State = 942;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionalexpressionContext : ParserRuleContext {
		public LogicalorexpressionContext logicalorexpression() {
			return GetRuleContext<LogicalorexpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentexpressionContext assignmentexpression() {
			return GetRuleContext<AssignmentexpressionContext>(0);
		}
		public ConditionalexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterConditionalexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitConditionalexpression(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalexpressionContext conditionalexpression() {
		ConditionalexpressionContext _localctx = new ConditionalexpressionContext(Context, State);
		EnterRule(_localctx, 80, RULE_conditionalexpression);
		try {
			State = 950;
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 943; logicalorexpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 944; logicalorexpression(0);
				State = 945; Match(Question);
				State = 946; expression(0);
				State = 947; Match(Colon);
				State = 948; assignmentexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentexpressionContext : ParserRuleContext {
		public ConditionalexpressionContext conditionalexpression() {
			return GetRuleContext<ConditionalexpressionContext>(0);
		}
		public LogicalorexpressionContext logicalorexpression() {
			return GetRuleContext<LogicalorexpressionContext>(0);
		}
		public AssignmentoperatorContext assignmentoperator() {
			return GetRuleContext<AssignmentoperatorContext>(0);
		}
		public InitializerclauseContext initializerclause() {
			return GetRuleContext<InitializerclauseContext>(0);
		}
		public ThrowexpressionContext throwexpression() {
			return GetRuleContext<ThrowexpressionContext>(0);
		}
		public AssignmentexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAssignmentexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAssignmentexpression(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentexpressionContext assignmentexpression() {
		AssignmentexpressionContext _localctx = new AssignmentexpressionContext(Context, State);
		EnterRule(_localctx, 82, RULE_assignmentexpression);
		try {
			State = 958;
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 952; conditionalexpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 953; logicalorexpression(0);
				State = 954; assignmentoperator();
				State = 955; initializerclause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 957; throwexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentoperatorContext : ParserRuleContext {
		public RightShiftAssignContext rightShiftAssign() {
			return GetRuleContext<RightShiftAssignContext>(0);
		}
		public AssignmentoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentoperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAssignmentoperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAssignmentoperator(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentoperatorContext assignmentoperator() {
		AssignmentoperatorContext _localctx = new AssignmentoperatorContext(Context, State);
		EnterRule(_localctx, 84, RULE_assignmentoperator);
		try {
			State = 971;
			switch (TokenStream.La(1)) {
			case Assign:
				EnterOuterAlt(_localctx, 1);
				{
				State = 960; Match(Assign);
				}
				break;
			case StarAssign:
				EnterOuterAlt(_localctx, 2);
				{
				State = 961; Match(StarAssign);
				}
				break;
			case DivAssign:
				EnterOuterAlt(_localctx, 3);
				{
				State = 962; Match(DivAssign);
				}
				break;
			case ModAssign:
				EnterOuterAlt(_localctx, 4);
				{
				State = 963; Match(ModAssign);
				}
				break;
			case PlusAssign:
				EnterOuterAlt(_localctx, 5);
				{
				State = 964; Match(PlusAssign);
				}
				break;
			case MinusAssign:
				EnterOuterAlt(_localctx, 6);
				{
				State = 965; Match(MinusAssign);
				}
				break;
			case Greater:
				EnterOuterAlt(_localctx, 7);
				{
				State = 966; rightShiftAssign();
				}
				break;
			case LeftShiftAssign:
				EnterOuterAlt(_localctx, 8);
				{
				State = 967; Match(LeftShiftAssign);
				}
				break;
			case AndAssign:
				EnterOuterAlt(_localctx, 9);
				{
				State = 968; Match(AndAssign);
				}
				break;
			case XorAssign:
				EnterOuterAlt(_localctx, 10);
				{
				State = 969; Match(XorAssign);
				}
				break;
			case OrAssign:
				EnterOuterAlt(_localctx, 11);
				{
				State = 970; Match(OrAssign);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AssignmentexpressionContext assignmentexpression() {
			return GetRuleContext<AssignmentexpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 86;
		EnterRecursionRule(_localctx, 86, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 974; assignmentexpression();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 981;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 976;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 977; Match(Comma);
					State = 978; assignmentexpression();
					}
					} 
				}
				State = 983;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConstantexpressionContext : ParserRuleContext {
		public ConditionalexpressionContext conditionalexpression() {
			return GetRuleContext<ConditionalexpressionContext>(0);
		}
		public ConstantexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterConstantexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitConstantexpression(this);
		}
	}

	[RuleVersion(0)]
	public ConstantexpressionContext constantexpression() {
		ConstantexpressionContext _localctx = new ConstantexpressionContext(Context, State);
		EnterRule(_localctx, 88, RULE_constantexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 984; conditionalexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public LabeledstatementContext labeledstatement() {
			return GetRuleContext<LabeledstatementContext>(0);
		}
		public ExpressionstatementContext expressionstatement() {
			return GetRuleContext<ExpressionstatementContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public CompoundstatementContext compoundstatement() {
			return GetRuleContext<CompoundstatementContext>(0);
		}
		public SelectionstatementContext selectionstatement() {
			return GetRuleContext<SelectionstatementContext>(0);
		}
		public IterationstatementContext iterationstatement() {
			return GetRuleContext<IterationstatementContext>(0);
		}
		public JumpstatementContext jumpstatement() {
			return GetRuleContext<JumpstatementContext>(0);
		}
		public DeclarationstatementContext declarationstatement() {
			return GetRuleContext<DeclarationstatementContext>(0);
		}
		public TryblockContext tryblock() {
			return GetRuleContext<TryblockContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 90, RULE_statement);
		int _la;
		try {
			State = 1012;
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 986; labeledstatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 988;
				switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
				case 1:
					{
					State = 987; attributespecifierseq(0);
					}
					break;
				}
				State = 990; expressionstatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 992;
				_la = TokenStream.La(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 991; attributespecifierseq(0);
					}
				}

				State = 994; compoundstatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 996;
				_la = TokenStream.La(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 995; attributespecifierseq(0);
					}
				}

				State = 998; selectionstatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1000;
				_la = TokenStream.La(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 999; attributespecifierseq(0);
					}
				}

				State = 1002; iterationstatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1004;
				_la = TokenStream.La(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1003; attributespecifierseq(0);
					}
				}

				State = 1006; jumpstatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1007; declarationstatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1009;
				_la = TokenStream.La(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1008; attributespecifierseq(0);
					}
				}

				State = 1011; tryblock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledstatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public ITerminalNode Case() { return GetToken(CPP14Parser.Case, 0); }
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public ITerminalNode Default() { return GetToken(CPP14Parser.Default, 0); }
		public LabeledstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLabeledstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLabeledstatement(this);
		}
	}

	[RuleVersion(0)]
	public LabeledstatementContext labeledstatement() {
		LabeledstatementContext _localctx = new LabeledstatementContext(Context, State);
		EnterRule(_localctx, 92, RULE_labeledstatement);
		int _la;
		try {
			State = 1034;
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1015;
				_la = TokenStream.La(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1014; attributespecifierseq(0);
					}
				}

				State = 1017; Match(Identifier);
				State = 1018; Match(Colon);
				State = 1019; statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1021;
				_la = TokenStream.La(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1020; attributespecifierseq(0);
					}
				}

				State = 1023; Match(Case);
				State = 1024; constantexpression();
				State = 1025; Match(Colon);
				State = 1026; statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1029;
				_la = TokenStream.La(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1028; attributespecifierseq(0);
					}
				}

				State = 1031; Match(Default);
				State = 1032; Match(Colon);
				State = 1033; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionstatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExpressionstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExpressionstatement(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionstatementContext expressionstatement() {
		ExpressionstatementContext _localctx = new ExpressionstatementContext(Context, State);
		EnterRule(_localctx, 94, RULE_expressionstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1037;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof) | (1L << Static_cast) | (1L << This) | (1L << Throw))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (True - 64)) | (1L << (Typeid - 64)) | (1L << (Typename - 64)) | (1L << (Unsigned - 64)) | (1L << (Void - 64)) | (1L << (Wchar - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Or - 64)) | (1L << (Tilde - 64)) | (1L << (Not - 64)) | (1L << (PlusPlus - 64)) | (1L << (MinusMinus - 64)) | (1L << (Doublecolon - 64)) | (1L << (Identifier - 64)) | (1L << (Integerliteral - 64)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (Characterliteral - 131)) | (1L << (Floatingliteral - 131)) | (1L << (Stringliteral - 131)) | (1L << (Userdefinedintegerliteral - 131)) | (1L << (Userdefinedfloatingliteral - 131)) | (1L << (Userdefinedstringliteral - 131)) | (1L << (Userdefinedcharacterliteral - 131)))) != 0)) {
				{
				State = 1036; expression(0);
				}
			}

			State = 1039; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundstatementContext : ParserRuleContext {
		public StatementseqContext statementseq() {
			return GetRuleContext<StatementseqContext>(0);
		}
		public CompoundstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCompoundstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCompoundstatement(this);
		}
	}

	[RuleVersion(0)]
	public CompoundstatementContext compoundstatement() {
		CompoundstatementContext _localctx = new CompoundstatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_compoundstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1041; Match(LeftBrace);
			State = 1043;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignas) | (1L << Alignof) | (1L << Asm) | (1L << Auto) | (1L << Bool) | (1L << Break) | (1L << Case) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << Const_cast) | (1L << Continue) | (1L << Decltype) | (1L << Default) | (1L << Delete) | (1L << Do) | (1L << Double) | (1L << Dynamic_cast) | (1L << Enum) | (1L << Explicit) | (1L << Extern) | (1L << False) | (1L << Float) | (1L << For) | (1L << Friend) | (1L << Goto) | (1L << If) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << Namespace) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Register) | (1L << Reinterpret_cast) | (1L << Return) | (1L << Short) | (1L << Signed) | (1L << Sizeof) | (1L << Static) | (1L << Static_assert) | (1L << Static_cast) | (1L << Struct) | (1L << Switch) | (1L << This) | (1L << Thread_local) | (1L << Throw))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (True - 64)) | (1L << (Try - 64)) | (1L << (Typedef - 64)) | (1L << (Typeid - 64)) | (1L << (Typename - 64)) | (1L << (Union - 64)) | (1L << (Unsigned - 64)) | (1L << (Using - 64)) | (1L << (Virtual - 64)) | (1L << (Void - 64)) | (1L << (Volatile - 64)) | (1L << (Wchar - 64)) | (1L << (While - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (LeftBrace - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Or - 64)) | (1L << (Tilde - 64)) | (1L << (Not - 64)) | (1L << (AndAnd - 64)) | (1L << (PlusPlus - 64)) | (1L << (MinusMinus - 64)) | (1L << (Doublecolon - 64)) | (1L << (Semi - 64)) | (1L << (Ellipsis - 64)) | (1L << (Identifier - 64)) | (1L << (Integerliteral - 64)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (Characterliteral - 131)) | (1L << (Floatingliteral - 131)) | (1L << (Stringliteral - 131)) | (1L << (Userdefinedintegerliteral - 131)) | (1L << (Userdefinedfloatingliteral - 131)) | (1L << (Userdefinedstringliteral - 131)) | (1L << (Userdefinedcharacterliteral - 131)))) != 0)) {
				{
				State = 1042; statementseq(0);
				}
			}

			State = 1045; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementseqContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public StatementseqContext statementseq() {
			return GetRuleContext<StatementseqContext>(0);
		}
		public StatementseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementseq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterStatementseq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitStatementseq(this);
		}
	}

	[RuleVersion(0)]
	public StatementseqContext statementseq() {
		return statementseq(0);
	}

	private StatementseqContext statementseq(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		StatementseqContext _localctx = new StatementseqContext(Context, _parentState);
		StatementseqContext _prevctx = _localctx;
		int _startState = 98;
		EnterRecursionRule(_localctx, 98, RULE_statementseq, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1048; statement();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1054;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StatementseqContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_statementseq);
					State = 1050;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1051; statement();
					}
					} 
				}
				State = 1056;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SelectionstatementContext : ParserRuleContext {
		public ITerminalNode If() { return GetToken(CPP14Parser.If, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode Else() { return GetToken(CPP14Parser.Else, 0); }
		public ITerminalNode Switch() { return GetToken(CPP14Parser.Switch, 0); }
		public SelectionstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterSelectionstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitSelectionstatement(this);
		}
	}

	[RuleVersion(0)]
	public SelectionstatementContext selectionstatement() {
		SelectionstatementContext _localctx = new SelectionstatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_selectionstatement);
		try {
			State = 1077;
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1057; Match(If);
				State = 1058; Match(LeftParen);
				State = 1059; condition();
				State = 1060; Match(RightParen);
				State = 1061; statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1063; Match(If);
				State = 1064; Match(LeftParen);
				State = 1065; condition();
				State = 1066; Match(RightParen);
				State = 1067; statement();
				State = 1068; Match(Else);
				State = 1069; statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1071; Match(Switch);
				State = 1072; Match(LeftParen);
				State = 1073; condition();
				State = 1074; Match(RightParen);
				State = 1075; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclspecifierseqContext declspecifierseq() {
			return GetRuleContext<DeclspecifierseqContext>(0);
		}
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public InitializerclauseContext initializerclause() {
			return GetRuleContext<InitializerclauseContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public BracedinitlistContext bracedinitlist() {
			return GetRuleContext<BracedinitlistContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 102, RULE_condition);
		int _la;
		try {
			State = 1095;
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1079; expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1081;
				_la = TokenStream.La(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1080; attributespecifierseq(0);
					}
				}

				State = 1083; declspecifierseq();
				State = 1084; declarator();
				State = 1085; Match(Assign);
				State = 1086; initializerclause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1089;
				_la = TokenStream.La(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1088; attributespecifierseq(0);
					}
				}

				State = 1091; declspecifierseq();
				State = 1092; declarator();
				State = 1093; bracedinitlist();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationstatementContext : ParserRuleContext {
		public ITerminalNode While() { return GetToken(CPP14Parser.While, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode Do() { return GetToken(CPP14Parser.Do, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode For() { return GetToken(CPP14Parser.For, 0); }
		public ForinitstatementContext forinitstatement() {
			return GetRuleContext<ForinitstatementContext>(0);
		}
		public ForrangedeclarationContext forrangedeclaration() {
			return GetRuleContext<ForrangedeclarationContext>(0);
		}
		public ForrangeinitializerContext forrangeinitializer() {
			return GetRuleContext<ForrangeinitializerContext>(0);
		}
		public IterationstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterIterationstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitIterationstatement(this);
		}
	}

	[RuleVersion(0)]
	public IterationstatementContext iterationstatement() {
		IterationstatementContext _localctx = new IterationstatementContext(Context, State);
		EnterRule(_localctx, 104, RULE_iterationstatement);
		int _la;
		try {
			State = 1132;
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1097; Match(While);
				State = 1098; Match(LeftParen);
				State = 1099; condition();
				State = 1100; Match(RightParen);
				State = 1101; statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1103; Match(Do);
				State = 1104; statement();
				State = 1105; Match(While);
				State = 1106; Match(LeftParen);
				State = 1107; expression(0);
				State = 1108; Match(RightParen);
				State = 1109; Match(Semi);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1111; Match(For);
				State = 1112; Match(LeftParen);
				State = 1113; forinitstatement();
				State = 1115;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignas) | (1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Enum) | (1L << Explicit) | (1L << Extern) | (1L << False) | (1L << Float) | (1L << Friend) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Register) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof) | (1L << Static) | (1L << Static_cast) | (1L << Struct) | (1L << This) | (1L << Thread_local) | (1L << Throw))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (True - 64)) | (1L << (Typedef - 64)) | (1L << (Typeid - 64)) | (1L << (Typename - 64)) | (1L << (Union - 64)) | (1L << (Unsigned - 64)) | (1L << (Virtual - 64)) | (1L << (Void - 64)) | (1L << (Volatile - 64)) | (1L << (Wchar - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Or - 64)) | (1L << (Tilde - 64)) | (1L << (Not - 64)) | (1L << (PlusPlus - 64)) | (1L << (MinusMinus - 64)) | (1L << (Doublecolon - 64)) | (1L << (Identifier - 64)) | (1L << (Integerliteral - 64)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (Characterliteral - 131)) | (1L << (Floatingliteral - 131)) | (1L << (Stringliteral - 131)) | (1L << (Userdefinedintegerliteral - 131)) | (1L << (Userdefinedfloatingliteral - 131)) | (1L << (Userdefinedstringliteral - 131)) | (1L << (Userdefinedcharacterliteral - 131)))) != 0)) {
					{
					State = 1114; condition();
					}
				}

				State = 1117; Match(Semi);
				State = 1119;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof) | (1L << Static_cast) | (1L << This) | (1L << Throw))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (True - 64)) | (1L << (Typeid - 64)) | (1L << (Typename - 64)) | (1L << (Unsigned - 64)) | (1L << (Void - 64)) | (1L << (Wchar - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Or - 64)) | (1L << (Tilde - 64)) | (1L << (Not - 64)) | (1L << (PlusPlus - 64)) | (1L << (MinusMinus - 64)) | (1L << (Doublecolon - 64)) | (1L << (Identifier - 64)) | (1L << (Integerliteral - 64)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (Characterliteral - 131)) | (1L << (Floatingliteral - 131)) | (1L << (Stringliteral - 131)) | (1L << (Userdefinedintegerliteral - 131)) | (1L << (Userdefinedfloatingliteral - 131)) | (1L << (Userdefinedstringliteral - 131)) | (1L << (Userdefinedcharacterliteral - 131)))) != 0)) {
					{
					State = 1118; expression(0);
					}
				}

				State = 1121; Match(RightParen);
				State = 1122; statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1124; Match(For);
				State = 1125; Match(LeftParen);
				State = 1126; forrangedeclaration();
				State = 1127; Match(Colon);
				State = 1128; forrangeinitializer();
				State = 1129; Match(RightParen);
				State = 1130; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForinitstatementContext : ParserRuleContext {
		public ExpressionstatementContext expressionstatement() {
			return GetRuleContext<ExpressionstatementContext>(0);
		}
		public SimpledeclarationContext simpledeclaration() {
			return GetRuleContext<SimpledeclarationContext>(0);
		}
		public ForinitstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forinitstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterForinitstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitForinitstatement(this);
		}
	}

	[RuleVersion(0)]
	public ForinitstatementContext forinitstatement() {
		ForinitstatementContext _localctx = new ForinitstatementContext(Context, State);
		EnterRule(_localctx, 106, RULE_forinitstatement);
		try {
			State = 1136;
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1134; expressionstatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1135; simpledeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForrangedeclarationContext : ParserRuleContext {
		public DeclspecifierseqContext declspecifierseq() {
			return GetRuleContext<DeclspecifierseqContext>(0);
		}
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public ForrangedeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forrangedeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterForrangedeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitForrangedeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ForrangedeclarationContext forrangedeclaration() {
		ForrangedeclarationContext _localctx = new ForrangedeclarationContext(Context, State);
		EnterRule(_localctx, 108, RULE_forrangedeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1139;
			_la = TokenStream.La(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1138; attributespecifierseq(0);
				}
			}

			State = 1141; declspecifierseq();
			State = 1142; declarator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForrangeinitializerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BracedinitlistContext bracedinitlist() {
			return GetRuleContext<BracedinitlistContext>(0);
		}
		public ForrangeinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forrangeinitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterForrangeinitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitForrangeinitializer(this);
		}
	}

	[RuleVersion(0)]
	public ForrangeinitializerContext forrangeinitializer() {
		ForrangeinitializerContext _localctx = new ForrangeinitializerContext(Context, State);
		EnterRule(_localctx, 110, RULE_forrangeinitializer);
		try {
			State = 1146;
			switch (TokenStream.La(1)) {
			case Alignof:
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Const_cast:
			case Decltype:
			case Delete:
			case Double:
			case Dynamic_cast:
			case False:
			case Float:
			case Int:
			case Long:
			case New:
			case Noexcept:
			case Nullptr:
			case Operator:
			case Reinterpret_cast:
			case Short:
			case Signed:
			case Sizeof:
			case Static_cast:
			case This:
			case Throw:
			case True:
			case Typeid:
			case Typename:
			case Unsigned:
			case Void:
			case Wchar:
			case LeftParen:
			case LeftBracket:
			case Plus:
			case Minus:
			case Star:
			case And:
			case Or:
			case Tilde:
			case Not:
			case PlusPlus:
			case MinusMinus:
			case Doublecolon:
			case Identifier:
			case Integerliteral:
			case Characterliteral:
			case Floatingliteral:
			case Stringliteral:
			case Userdefinedintegerliteral:
			case Userdefinedfloatingliteral:
			case Userdefinedstringliteral:
			case Userdefinedcharacterliteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1144; expression(0);
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1145; bracedinitlist();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpstatementContext : ParserRuleContext {
		public ITerminalNode Break() { return GetToken(CPP14Parser.Break, 0); }
		public ITerminalNode Continue() { return GetToken(CPP14Parser.Continue, 0); }
		public ITerminalNode Return() { return GetToken(CPP14Parser.Return, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BracedinitlistContext bracedinitlist() {
			return GetRuleContext<BracedinitlistContext>(0);
		}
		public ITerminalNode Goto() { return GetToken(CPP14Parser.Goto, 0); }
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public JumpstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterJumpstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitJumpstatement(this);
		}
	}

	[RuleVersion(0)]
	public JumpstatementContext jumpstatement() {
		JumpstatementContext _localctx = new JumpstatementContext(Context, State);
		EnterRule(_localctx, 112, RULE_jumpstatement);
		int _la;
		try {
			State = 1164;
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1148; Match(Break);
				State = 1149; Match(Semi);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1150; Match(Continue);
				State = 1151; Match(Semi);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1152; Match(Return);
				State = 1154;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof) | (1L << Static_cast) | (1L << This) | (1L << Throw))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (True - 64)) | (1L << (Typeid - 64)) | (1L << (Typename - 64)) | (1L << (Unsigned - 64)) | (1L << (Void - 64)) | (1L << (Wchar - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Or - 64)) | (1L << (Tilde - 64)) | (1L << (Not - 64)) | (1L << (PlusPlus - 64)) | (1L << (MinusMinus - 64)) | (1L << (Doublecolon - 64)) | (1L << (Identifier - 64)) | (1L << (Integerliteral - 64)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (Characterliteral - 131)) | (1L << (Floatingliteral - 131)) | (1L << (Stringliteral - 131)) | (1L << (Userdefinedintegerliteral - 131)) | (1L << (Userdefinedfloatingliteral - 131)) | (1L << (Userdefinedstringliteral - 131)) | (1L << (Userdefinedcharacterliteral - 131)))) != 0)) {
					{
					State = 1153; expression(0);
					}
				}

				State = 1156; Match(Semi);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1157; Match(Return);
				State = 1158; bracedinitlist();
				State = 1159; Match(Semi);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1161; Match(Goto);
				State = 1162; Match(Identifier);
				State = 1163; Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationstatementContext : ParserRuleContext {
		public BlockdeclarationContext blockdeclaration() {
			return GetRuleContext<BlockdeclarationContext>(0);
		}
		public DeclarationstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeclarationstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeclarationstatement(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationstatementContext declarationstatement() {
		DeclarationstatementContext _localctx = new DeclarationstatementContext(Context, State);
		EnterRule(_localctx, 114, RULE_declarationstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1166; blockdeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationseqContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public DeclarationseqContext declarationseq() {
			return GetRuleContext<DeclarationseqContext>(0);
		}
		public DeclarationseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationseq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeclarationseq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeclarationseq(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationseqContext declarationseq() {
		return declarationseq(0);
	}

	private DeclarationseqContext declarationseq(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DeclarationseqContext _localctx = new DeclarationseqContext(Context, _parentState);
		DeclarationseqContext _prevctx = _localctx;
		int _startState = 116;
		EnterRecursionRule(_localctx, 116, RULE_declarationseq, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1169; declaration();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1175;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,100,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DeclarationseqContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_declarationseq);
					State = 1171;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1172; declaration();
					}
					} 
				}
				State = 1177;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,100,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public BlockdeclarationContext blockdeclaration() {
			return GetRuleContext<BlockdeclarationContext>(0);
		}
		public FunctiondefinitionContext functiondefinition() {
			return GetRuleContext<FunctiondefinitionContext>(0);
		}
		public TemplatedeclarationContext templatedeclaration() {
			return GetRuleContext<TemplatedeclarationContext>(0);
		}
		public ExplicitinstantiationContext explicitinstantiation() {
			return GetRuleContext<ExplicitinstantiationContext>(0);
		}
		public ExplicitspecializationContext explicitspecialization() {
			return GetRuleContext<ExplicitspecializationContext>(0);
		}
		public LinkagespecificationContext linkagespecification() {
			return GetRuleContext<LinkagespecificationContext>(0);
		}
		public NamespacedefinitionContext namespacedefinition() {
			return GetRuleContext<NamespacedefinitionContext>(0);
		}
		public EmptydeclarationContext emptydeclaration() {
			return GetRuleContext<EmptydeclarationContext>(0);
		}
		public AttributedeclarationContext attributedeclaration() {
			return GetRuleContext<AttributedeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 118, RULE_declaration);
		try {
			State = 1187;
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1178; blockdeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1179; functiondefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1180; templatedeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1181; explicitinstantiation();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1182; explicitspecialization();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1183; linkagespecification();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1184; namespacedefinition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1185; emptydeclaration();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1186; attributedeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockdeclarationContext : ParserRuleContext {
		public SimpledeclarationContext simpledeclaration() {
			return GetRuleContext<SimpledeclarationContext>(0);
		}
		public AsmdefinitionContext asmdefinition() {
			return GetRuleContext<AsmdefinitionContext>(0);
		}
		public NamespacealiasdefinitionContext namespacealiasdefinition() {
			return GetRuleContext<NamespacealiasdefinitionContext>(0);
		}
		public UsingdeclarationContext usingdeclaration() {
			return GetRuleContext<UsingdeclarationContext>(0);
		}
		public UsingdirectiveContext usingdirective() {
			return GetRuleContext<UsingdirectiveContext>(0);
		}
		public Static_assertdeclarationContext static_assertdeclaration() {
			return GetRuleContext<Static_assertdeclarationContext>(0);
		}
		public AliasdeclarationContext aliasdeclaration() {
			return GetRuleContext<AliasdeclarationContext>(0);
		}
		public OpaqueenumdeclarationContext opaqueenumdeclaration() {
			return GetRuleContext<OpaqueenumdeclarationContext>(0);
		}
		public BlockdeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockdeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBlockdeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBlockdeclaration(this);
		}
	}

	[RuleVersion(0)]
	public BlockdeclarationContext blockdeclaration() {
		BlockdeclarationContext _localctx = new BlockdeclarationContext(Context, State);
		EnterRule(_localctx, 120, RULE_blockdeclaration);
		try {
			State = 1197;
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1189; simpledeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1190; asmdefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1191; namespacealiasdefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1192; usingdeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1193; usingdirective();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1194; static_assertdeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1195; aliasdeclaration();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1196; opaqueenumdeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasdeclarationContext : ParserRuleContext {
		public ITerminalNode Using() { return GetToken(CPP14Parser.Using, 0); }
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public TypeidContext typeid() {
			return GetRuleContext<TypeidContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public AliasdeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasdeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAliasdeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAliasdeclaration(this);
		}
	}

	[RuleVersion(0)]
	public AliasdeclarationContext aliasdeclaration() {
		AliasdeclarationContext _localctx = new AliasdeclarationContext(Context, State);
		EnterRule(_localctx, 122, RULE_aliasdeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1199; Match(Using);
			State = 1200; Match(Identifier);
			State = 1202;
			_la = TokenStream.La(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1201; attributespecifierseq(0);
				}
			}

			State = 1204; Match(Assign);
			State = 1205; typeid();
			State = 1206; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpledeclarationContext : ParserRuleContext {
		public DeclspecifierseqContext declspecifierseq() {
			return GetRuleContext<DeclspecifierseqContext>(0);
		}
		public InitdeclaratorlistContext initdeclaratorlist() {
			return GetRuleContext<InitdeclaratorlistContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public SimpledeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpledeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterSimpledeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitSimpledeclaration(this);
		}
	}

	[RuleVersion(0)]
	public SimpledeclarationContext simpledeclaration() {
		SimpledeclarationContext _localctx = new SimpledeclarationContext(Context, State);
		EnterRule(_localctx, 124, RULE_simpledeclaration);
		int _la;
		try {
			State = 1222;
			switch (TokenStream.La(1)) {
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Class:
			case Const:
			case Constexpr:
			case Decltype:
			case Double:
			case Enum:
			case Explicit:
			case Extern:
			case Float:
			case Friend:
			case Inline:
			case Int:
			case Long:
			case Mutable:
			case Operator:
			case Register:
			case Short:
			case Signed:
			case Static:
			case Struct:
			case Thread_local:
			case Typedef:
			case Typename:
			case Union:
			case Unsigned:
			case Virtual:
			case Void:
			case Volatile:
			case Wchar:
			case LeftParen:
			case Star:
			case And:
			case Tilde:
			case AndAnd:
			case Doublecolon:
			case Semi:
			case Ellipsis:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1209;
				switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
				case 1:
					{
					State = 1208; declspecifierseq();
					}
					break;
				}
				State = 1212;
				_la = TokenStream.La(1);
				if (_la==Decltype || _la==Operator || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (LeftParen - 77)) | (1L << (Star - 77)) | (1L << (And - 77)) | (1L << (Tilde - 77)) | (1L << (AndAnd - 77)) | (1L << (Doublecolon - 77)) | (1L << (Ellipsis - 77)) | (1L << (Identifier - 77)))) != 0)) {
					{
					State = 1211; initdeclaratorlist(0);
					}
				}

				State = 1214; Match(Semi);
				}
				break;
			case Alignas:
			case LeftBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1215; attributespecifierseq(0);
				State = 1217;
				switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
				case 1:
					{
					State = 1216; declspecifierseq();
					}
					break;
				}
				State = 1219; initdeclaratorlist(0);
				State = 1220; Match(Semi);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Static_assertdeclarationContext : ParserRuleContext {
		public ITerminalNode Static_assert() { return GetToken(CPP14Parser.Static_assert, 0); }
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public ITerminalNode Stringliteral() { return GetToken(CPP14Parser.Stringliteral, 0); }
		public Static_assertdeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_static_assertdeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterStatic_assertdeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitStatic_assertdeclaration(this);
		}
	}

	[RuleVersion(0)]
	public Static_assertdeclarationContext static_assertdeclaration() {
		Static_assertdeclarationContext _localctx = new Static_assertdeclarationContext(Context, State);
		EnterRule(_localctx, 126, RULE_static_assertdeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1224; Match(Static_assert);
			State = 1225; Match(LeftParen);
			State = 1226; constantexpression();
			State = 1227; Match(Comma);
			State = 1228; Match(Stringliteral);
			State = 1229; Match(RightParen);
			State = 1230; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptydeclarationContext : ParserRuleContext {
		public EmptydeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptydeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEmptydeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEmptydeclaration(this);
		}
	}

	[RuleVersion(0)]
	public EmptydeclarationContext emptydeclaration() {
		EmptydeclarationContext _localctx = new EmptydeclarationContext(Context, State);
		EnterRule(_localctx, 128, RULE_emptydeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1232; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributedeclarationContext : ParserRuleContext {
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public AttributedeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributedeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttributedeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttributedeclaration(this);
		}
	}

	[RuleVersion(0)]
	public AttributedeclarationContext attributedeclaration() {
		AttributedeclarationContext _localctx = new AttributedeclarationContext(Context, State);
		EnterRule(_localctx, 130, RULE_attributedeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1234; attributespecifierseq(0);
			State = 1235; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclspecifierContext : ParserRuleContext {
		public StorageclassspecifierContext storageclassspecifier() {
			return GetRuleContext<StorageclassspecifierContext>(0);
		}
		public TypespecifierContext typespecifier() {
			return GetRuleContext<TypespecifierContext>(0);
		}
		public FunctionspecifierContext functionspecifier() {
			return GetRuleContext<FunctionspecifierContext>(0);
		}
		public ITerminalNode Friend() { return GetToken(CPP14Parser.Friend, 0); }
		public ITerminalNode Typedef() { return GetToken(CPP14Parser.Typedef, 0); }
		public ITerminalNode Constexpr() { return GetToken(CPP14Parser.Constexpr, 0); }
		public DeclspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declspecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeclspecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeclspecifier(this);
		}
	}

	[RuleVersion(0)]
	public DeclspecifierContext declspecifier() {
		DeclspecifierContext _localctx = new DeclspecifierContext(Context, State);
		EnterRule(_localctx, 132, RULE_declspecifier);
		try {
			State = 1243;
			switch (TokenStream.La(1)) {
			case Extern:
			case Mutable:
			case Register:
			case Static:
			case Thread_local:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1237; storageclassspecifier();
				}
				break;
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Class:
			case Const:
			case Decltype:
			case Double:
			case Enum:
			case Float:
			case Int:
			case Long:
			case Short:
			case Signed:
			case Struct:
			case Typename:
			case Union:
			case Unsigned:
			case Void:
			case Volatile:
			case Wchar:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1238; typespecifier();
				}
				break;
			case Explicit:
			case Inline:
			case Virtual:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1239; functionspecifier();
				}
				break;
			case Friend:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1240; Match(Friend);
				}
				break;
			case Typedef:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1241; Match(Typedef);
				}
				break;
			case Constexpr:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1242; Match(Constexpr);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclspecifierseqContext : ParserRuleContext {
		public DeclspecifierContext declspecifier() {
			return GetRuleContext<DeclspecifierContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public DeclspecifierseqContext declspecifierseq() {
			return GetRuleContext<DeclspecifierseqContext>(0);
		}
		public DeclspecifierseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declspecifierseq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeclspecifierseq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeclspecifierseq(this);
		}
	}

	[RuleVersion(0)]
	public DeclspecifierseqContext declspecifierseq() {
		DeclspecifierseqContext _localctx = new DeclspecifierseqContext(Context, State);
		EnterRule(_localctx, 134, RULE_declspecifierseq);
		try {
			State = 1252;
			switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1245; declspecifier();
				State = 1247;
				switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
				case 1:
					{
					State = 1246; attributespecifierseq(0);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1249; declspecifier();
				State = 1250; declspecifierseq();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorageclassspecifierContext : ParserRuleContext {
		public ITerminalNode Register() { return GetToken(CPP14Parser.Register, 0); }
		public ITerminalNode Static() { return GetToken(CPP14Parser.Static, 0); }
		public ITerminalNode Thread_local() { return GetToken(CPP14Parser.Thread_local, 0); }
		public ITerminalNode Extern() { return GetToken(CPP14Parser.Extern, 0); }
		public ITerminalNode Mutable() { return GetToken(CPP14Parser.Mutable, 0); }
		public StorageclassspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storageclassspecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterStorageclassspecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitStorageclassspecifier(this);
		}
	}

	[RuleVersion(0)]
	public StorageclassspecifierContext storageclassspecifier() {
		StorageclassspecifierContext _localctx = new StorageclassspecifierContext(Context, State);
		EnterRule(_localctx, 136, RULE_storageclassspecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1254;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Extern) | (1L << Mutable) | (1L << Register) | (1L << Static) | (1L << Thread_local))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionspecifierContext : ParserRuleContext {
		public ITerminalNode Inline() { return GetToken(CPP14Parser.Inline, 0); }
		public ITerminalNode Virtual() { return GetToken(CPP14Parser.Virtual, 0); }
		public ITerminalNode Explicit() { return GetToken(CPP14Parser.Explicit, 0); }
		public FunctionspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionspecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterFunctionspecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitFunctionspecifier(this);
		}
	}

	[RuleVersion(0)]
	public FunctionspecifierContext functionspecifier() {
		FunctionspecifierContext _localctx = new FunctionspecifierContext(Context, State);
		EnterRule(_localctx, 138, RULE_functionspecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1256;
			_la = TokenStream.La(1);
			if ( !(((((_la - 26)) & ~0x3f) == 0 && ((1L << (_la - 26)) & ((1L << (Explicit - 26)) | (1L << (Inline - 26)) | (1L << (Virtual - 26)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefnameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public TypedefnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedefname; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTypedefname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTypedefname(this);
		}
	}

	[RuleVersion(0)]
	public TypedefnameContext typedefname() {
		TypedefnameContext _localctx = new TypedefnameContext(Context, State);
		EnterRule(_localctx, 140, RULE_typedefname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1258; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypespecifierContext : ParserRuleContext {
		public TrailingtypespecifierContext trailingtypespecifier() {
			return GetRuleContext<TrailingtypespecifierContext>(0);
		}
		public ClassspecifierContext classspecifier() {
			return GetRuleContext<ClassspecifierContext>(0);
		}
		public EnumspecifierContext enumspecifier() {
			return GetRuleContext<EnumspecifierContext>(0);
		}
		public TypespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTypespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTypespecifier(this);
		}
	}

	[RuleVersion(0)]
	public TypespecifierContext typespecifier() {
		TypespecifierContext _localctx = new TypespecifierContext(Context, State);
		EnterRule(_localctx, 142, RULE_typespecifier);
		try {
			State = 1263;
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1260; trailingtypespecifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1261; classspecifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1262; enumspecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrailingtypespecifierContext : ParserRuleContext {
		public SimpletypespecifierContext simpletypespecifier() {
			return GetRuleContext<SimpletypespecifierContext>(0);
		}
		public ElaboratedtypespecifierContext elaboratedtypespecifier() {
			return GetRuleContext<ElaboratedtypespecifierContext>(0);
		}
		public TypenamespecifierContext typenamespecifier() {
			return GetRuleContext<TypenamespecifierContext>(0);
		}
		public CvqualifierContext cvqualifier() {
			return GetRuleContext<CvqualifierContext>(0);
		}
		public TrailingtypespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trailingtypespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTrailingtypespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTrailingtypespecifier(this);
		}
	}

	[RuleVersion(0)]
	public TrailingtypespecifierContext trailingtypespecifier() {
		TrailingtypespecifierContext _localctx = new TrailingtypespecifierContext(Context, State);
		EnterRule(_localctx, 144, RULE_trailingtypespecifier);
		try {
			State = 1269;
			switch (TokenStream.La(1)) {
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Decltype:
			case Double:
			case Float:
			case Int:
			case Long:
			case Short:
			case Signed:
			case Unsigned:
			case Void:
			case Wchar:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1265; simpletypespecifier();
				}
				break;
			case Class:
			case Enum:
			case Struct:
			case Union:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1266; elaboratedtypespecifier();
				}
				break;
			case Typename:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1267; typenamespecifier();
				}
				break;
			case Const:
			case Volatile:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1268; cvqualifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypespecifierseqContext : ParserRuleContext {
		public TypespecifierContext typespecifier() {
			return GetRuleContext<TypespecifierContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public TypespecifierseqContext typespecifierseq() {
			return GetRuleContext<TypespecifierseqContext>(0);
		}
		public TypespecifierseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typespecifierseq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTypespecifierseq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTypespecifierseq(this);
		}
	}

	[RuleVersion(0)]
	public TypespecifierseqContext typespecifierseq() {
		TypespecifierseqContext _localctx = new TypespecifierseqContext(Context, State);
		EnterRule(_localctx, 146, RULE_typespecifierseq);
		try {
			State = 1278;
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1271; typespecifier();
				State = 1273;
				switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
				case 1:
					{
					State = 1272; attributespecifierseq(0);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1275; typespecifier();
				State = 1276; typespecifierseq();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrailingtypespecifierseqContext : ParserRuleContext {
		public TrailingtypespecifierContext trailingtypespecifier() {
			return GetRuleContext<TrailingtypespecifierContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public TrailingtypespecifierseqContext trailingtypespecifierseq() {
			return GetRuleContext<TrailingtypespecifierseqContext>(0);
		}
		public TrailingtypespecifierseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trailingtypespecifierseq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTrailingtypespecifierseq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTrailingtypespecifierseq(this);
		}
	}

	[RuleVersion(0)]
	public TrailingtypespecifierseqContext trailingtypespecifierseq() {
		TrailingtypespecifierseqContext _localctx = new TrailingtypespecifierseqContext(Context, State);
		EnterRule(_localctx, 148, RULE_trailingtypespecifierseq);
		try {
			State = 1287;
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1280; trailingtypespecifier();
				State = 1282;
				switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
				case 1:
					{
					State = 1281; attributespecifierseq(0);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1284; trailingtypespecifier();
				State = 1285; trailingtypespecifierseq();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpletypespecifierContext : ParserRuleContext {
		public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public SimpletemplateidContext simpletemplateid() {
			return GetRuleContext<SimpletemplateidContext>(0);
		}
		public ITerminalNode Char() { return GetToken(CPP14Parser.Char, 0); }
		public ITerminalNode Char16() { return GetToken(CPP14Parser.Char16, 0); }
		public ITerminalNode Char32() { return GetToken(CPP14Parser.Char32, 0); }
		public ITerminalNode Wchar() { return GetToken(CPP14Parser.Wchar, 0); }
		public ITerminalNode Bool() { return GetToken(CPP14Parser.Bool, 0); }
		public ITerminalNode Short() { return GetToken(CPP14Parser.Short, 0); }
		public ITerminalNode Int() { return GetToken(CPP14Parser.Int, 0); }
		public ITerminalNode Long() { return GetToken(CPP14Parser.Long, 0); }
		public ITerminalNode Signed() { return GetToken(CPP14Parser.Signed, 0); }
		public ITerminalNode Unsigned() { return GetToken(CPP14Parser.Unsigned, 0); }
		public ITerminalNode Float() { return GetToken(CPP14Parser.Float, 0); }
		public ITerminalNode Double() { return GetToken(CPP14Parser.Double, 0); }
		public ITerminalNode Void() { return GetToken(CPP14Parser.Void, 0); }
		public ITerminalNode Auto() { return GetToken(CPP14Parser.Auto, 0); }
		public DecltypespecifierContext decltypespecifier() {
			return GetRuleContext<DecltypespecifierContext>(0);
		}
		public SimpletypespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpletypespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterSimpletypespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitSimpletypespecifier(this);
		}
	}

	[RuleVersion(0)]
	public SimpletypespecifierContext simpletypespecifier() {
		SimpletypespecifierContext _localctx = new SimpletypespecifierContext(Context, State);
		EnterRule(_localctx, 150, RULE_simpletypespecifier);
		try {
			State = 1312;
			switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1290;
				switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
				case 1:
					{
					State = 1289; nestednamespecifier(0);
					}
					break;
				}
				State = 1292; typename();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1293; nestednamespecifier(0);
				State = 1294; Match(Template);
				State = 1295; simpletemplateid();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1297; Match(Char);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1298; Match(Char16);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1299; Match(Char32);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1300; Match(Wchar);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1301; Match(Bool);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1302; Match(Short);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1303; Match(Int);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1304; Match(Long);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1305; Match(Signed);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1306; Match(Unsigned);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1307; Match(Float);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1308; Match(Double);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1309; Match(Void);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1310; Match(Auto);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1311; decltypespecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypenameContext : ParserRuleContext {
		public ClassnameContext classname() {
			return GetRuleContext<ClassnameContext>(0);
		}
		public EnumnameContext enumname() {
			return GetRuleContext<EnumnameContext>(0);
		}
		public TypedefnameContext typedefname() {
			return GetRuleContext<TypedefnameContext>(0);
		}
		public SimpletemplateidContext simpletemplateid() {
			return GetRuleContext<SimpletemplateidContext>(0);
		}
		public TypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typename; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTypename(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTypename(this);
		}
	}

	[RuleVersion(0)]
	public TypenameContext typename() {
		TypenameContext _localctx = new TypenameContext(Context, State);
		EnterRule(_localctx, 152, RULE_typename);
		try {
			State = 1318;
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1314; classname();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1315; enumname();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1316; typedefname();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1317; simpletemplateid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecltypespecifierContext : ParserRuleContext {
		public ITerminalNode Decltype() { return GetToken(CPP14Parser.Decltype, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Auto() { return GetToken(CPP14Parser.Auto, 0); }
		public DecltypespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decltypespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDecltypespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDecltypespecifier(this);
		}
	}

	[RuleVersion(0)]
	public DecltypespecifierContext decltypespecifier() {
		DecltypespecifierContext _localctx = new DecltypespecifierContext(Context, State);
		EnterRule(_localctx, 154, RULE_decltypespecifier);
		try {
			State = 1329;
			switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1320; Match(Decltype);
				State = 1321; Match(LeftParen);
				State = 1322; expression(0);
				State = 1323; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1325; Match(Decltype);
				State = 1326; Match(LeftParen);
				State = 1327; Match(Auto);
				State = 1328; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElaboratedtypespecifierContext : ParserRuleContext {
		public ClasskeyContext classkey() {
			return GetRuleContext<ClasskeyContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public SimpletemplateidContext simpletemplateid() {
			return GetRuleContext<SimpletemplateidContext>(0);
		}
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public ITerminalNode Enum() { return GetToken(CPP14Parser.Enum, 0); }
		public ElaboratedtypespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elaboratedtypespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterElaboratedtypespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitElaboratedtypespecifier(this);
		}
	}

	[RuleVersion(0)]
	public ElaboratedtypespecifierContext elaboratedtypespecifier() {
		ElaboratedtypespecifierContext _localctx = new ElaboratedtypespecifierContext(Context, State);
		EnterRule(_localctx, 156, RULE_elaboratedtypespecifier);
		int _la;
		try {
			State = 1355;
			switch ( Interpreter.AdaptivePredict(TokenStream,125,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1331; classkey();
				State = 1333;
				_la = TokenStream.La(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1332; attributespecifierseq(0);
					}
				}

				State = 1336;
				switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
				case 1:
					{
					State = 1335; nestednamespecifier(0);
					}
					break;
				}
				State = 1338; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1340; classkey();
				State = 1341; simpletemplateid();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1343; classkey();
				State = 1344; nestednamespecifier(0);
				State = 1346;
				_la = TokenStream.La(1);
				if (_la==Template) {
					{
					State = 1345; Match(Template);
					}
				}

				State = 1348; simpletemplateid();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1350; Match(Enum);
				State = 1352;
				switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
				case 1:
					{
					State = 1351; nestednamespecifier(0);
					}
					break;
				}
				State = 1354; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumnameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public EnumnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumname; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEnumname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEnumname(this);
		}
	}

	[RuleVersion(0)]
	public EnumnameContext enumname() {
		EnumnameContext _localctx = new EnumnameContext(Context, State);
		EnterRule(_localctx, 158, RULE_enumname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1357; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumspecifierContext : ParserRuleContext {
		public EnumheadContext enumhead() {
			return GetRuleContext<EnumheadContext>(0);
		}
		public EnumeratorlistContext enumeratorlist() {
			return GetRuleContext<EnumeratorlistContext>(0);
		}
		public EnumspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumspecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEnumspecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEnumspecifier(this);
		}
	}

	[RuleVersion(0)]
	public EnumspecifierContext enumspecifier() {
		EnumspecifierContext _localctx = new EnumspecifierContext(Context, State);
		EnterRule(_localctx, 160, RULE_enumspecifier);
		int _la;
		try {
			State = 1372;
			switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1359; enumhead();
				State = 1360; Match(LeftBrace);
				State = 1362;
				_la = TokenStream.La(1);
				if (_la==Identifier) {
					{
					State = 1361; enumeratorlist(0);
					}
				}

				State = 1364; Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1366; enumhead();
				State = 1367; Match(LeftBrace);
				State = 1368; enumeratorlist(0);
				State = 1369; Match(Comma);
				State = 1370; Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumheadContext : ParserRuleContext {
		public EnumkeyContext enumkey() {
			return GetRuleContext<EnumkeyContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public EnumbaseContext enumbase() {
			return GetRuleContext<EnumbaseContext>(0);
		}
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public EnumheadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumhead; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEnumhead(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEnumhead(this);
		}
	}

	[RuleVersion(0)]
	public EnumheadContext enumhead() {
		EnumheadContext _localctx = new EnumheadContext(Context, State);
		EnterRule(_localctx, 162, RULE_enumhead);
		int _la;
		try {
			State = 1393;
			switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1374; enumkey();
				State = 1376;
				_la = TokenStream.La(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1375; attributespecifierseq(0);
					}
				}

				State = 1379;
				_la = TokenStream.La(1);
				if (_la==Identifier) {
					{
					State = 1378; Match(Identifier);
					}
				}

				State = 1382;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 1381; enumbase();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1384; enumkey();
				State = 1386;
				_la = TokenStream.La(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1385; attributespecifierseq(0);
					}
				}

				State = 1388; nestednamespecifier(0);
				State = 1389; Match(Identifier);
				State = 1391;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 1390; enumbase();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpaqueenumdeclarationContext : ParserRuleContext {
		public EnumkeyContext enumkey() {
			return GetRuleContext<EnumkeyContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public EnumbaseContext enumbase() {
			return GetRuleContext<EnumbaseContext>(0);
		}
		public OpaqueenumdeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opaqueenumdeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterOpaqueenumdeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitOpaqueenumdeclaration(this);
		}
	}

	[RuleVersion(0)]
	public OpaqueenumdeclarationContext opaqueenumdeclaration() {
		OpaqueenumdeclarationContext _localctx = new OpaqueenumdeclarationContext(Context, State);
		EnterRule(_localctx, 164, RULE_opaqueenumdeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1395; enumkey();
			State = 1397;
			_la = TokenStream.La(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1396; attributespecifierseq(0);
				}
			}

			State = 1399; Match(Identifier);
			State = 1401;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 1400; enumbase();
				}
			}

			State = 1403; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumkeyContext : ParserRuleContext {
		public ITerminalNode Enum() { return GetToken(CPP14Parser.Enum, 0); }
		public ITerminalNode Class() { return GetToken(CPP14Parser.Class, 0); }
		public ITerminalNode Struct() { return GetToken(CPP14Parser.Struct, 0); }
		public EnumkeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumkey; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEnumkey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEnumkey(this);
		}
	}

	[RuleVersion(0)]
	public EnumkeyContext enumkey() {
		EnumkeyContext _localctx = new EnumkeyContext(Context, State);
		EnterRule(_localctx, 166, RULE_enumkey);
		try {
			State = 1410;
			switch ( Interpreter.AdaptivePredict(TokenStream,136,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1405; Match(Enum);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1406; Match(Enum);
				State = 1407; Match(Class);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1408; Match(Enum);
				State = 1409; Match(Struct);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumbaseContext : ParserRuleContext {
		public TypespecifierseqContext typespecifierseq() {
			return GetRuleContext<TypespecifierseqContext>(0);
		}
		public EnumbaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumbase; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEnumbase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEnumbase(this);
		}
	}

	[RuleVersion(0)]
	public EnumbaseContext enumbase() {
		EnumbaseContext _localctx = new EnumbaseContext(Context, State);
		EnterRule(_localctx, 168, RULE_enumbase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1412; Match(Colon);
			State = 1413; typespecifierseq();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorlistContext : ParserRuleContext {
		public EnumeratordefinitionContext enumeratordefinition() {
			return GetRuleContext<EnumeratordefinitionContext>(0);
		}
		public EnumeratorlistContext enumeratorlist() {
			return GetRuleContext<EnumeratorlistContext>(0);
		}
		public EnumeratorlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeratorlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEnumeratorlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEnumeratorlist(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorlistContext enumeratorlist() {
		return enumeratorlist(0);
	}

	private EnumeratorlistContext enumeratorlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EnumeratorlistContext _localctx = new EnumeratorlistContext(Context, _parentState);
		EnumeratorlistContext _prevctx = _localctx;
		int _startState = 170;
		EnterRecursionRule(_localctx, 170, RULE_enumeratorlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1416; enumeratordefinition();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1423;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,137,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new EnumeratorlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_enumeratorlist);
					State = 1418;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1419; Match(Comma);
					State = 1420; enumeratordefinition();
					}
					} 
				}
				State = 1425;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,137,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EnumeratordefinitionContext : ParserRuleContext {
		public EnumeratorContext enumerator() {
			return GetRuleContext<EnumeratorContext>(0);
		}
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public EnumeratordefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeratordefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEnumeratordefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEnumeratordefinition(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratordefinitionContext enumeratordefinition() {
		EnumeratordefinitionContext _localctx = new EnumeratordefinitionContext(Context, State);
		EnterRule(_localctx, 172, RULE_enumeratordefinition);
		try {
			State = 1431;
			switch ( Interpreter.AdaptivePredict(TokenStream,138,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1426; enumerator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1427; enumerator();
				State = 1428; Match(Assign);
				State = 1429; constantexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public EnumeratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEnumerator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEnumerator(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorContext enumerator() {
		EnumeratorContext _localctx = new EnumeratorContext(Context, State);
		EnterRule(_localctx, 174, RULE_enumerator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1433; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespacenameContext : ParserRuleContext {
		public OriginalnamespacenameContext originalnamespacename() {
			return GetRuleContext<OriginalnamespacenameContext>(0);
		}
		public NamespacealiasContext namespacealias() {
			return GetRuleContext<NamespacealiasContext>(0);
		}
		public NamespacenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespacename; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNamespacename(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNamespacename(this);
		}
	}

	[RuleVersion(0)]
	public NamespacenameContext namespacename() {
		NamespacenameContext _localctx = new NamespacenameContext(Context, State);
		EnterRule(_localctx, 176, RULE_namespacename);
		try {
			State = 1437;
			switch ( Interpreter.AdaptivePredict(TokenStream,139,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1435; originalnamespacename();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1436; namespacealias();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OriginalnamespacenameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public OriginalnamespacenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_originalnamespacename; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterOriginalnamespacename(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitOriginalnamespacename(this);
		}
	}

	[RuleVersion(0)]
	public OriginalnamespacenameContext originalnamespacename() {
		OriginalnamespacenameContext _localctx = new OriginalnamespacenameContext(Context, State);
		EnterRule(_localctx, 178, RULE_originalnamespacename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1439; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespacedefinitionContext : ParserRuleContext {
		public NamednamespacedefinitionContext namednamespacedefinition() {
			return GetRuleContext<NamednamespacedefinitionContext>(0);
		}
		public UnnamednamespacedefinitionContext unnamednamespacedefinition() {
			return GetRuleContext<UnnamednamespacedefinitionContext>(0);
		}
		public NamespacedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespacedefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNamespacedefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNamespacedefinition(this);
		}
	}

	[RuleVersion(0)]
	public NamespacedefinitionContext namespacedefinition() {
		NamespacedefinitionContext _localctx = new NamespacedefinitionContext(Context, State);
		EnterRule(_localctx, 180, RULE_namespacedefinition);
		try {
			State = 1443;
			switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1441; namednamespacedefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1442; unnamednamespacedefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamednamespacedefinitionContext : ParserRuleContext {
		public OriginalnamespacedefinitionContext originalnamespacedefinition() {
			return GetRuleContext<OriginalnamespacedefinitionContext>(0);
		}
		public ExtensionnamespacedefinitionContext extensionnamespacedefinition() {
			return GetRuleContext<ExtensionnamespacedefinitionContext>(0);
		}
		public NamednamespacedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namednamespacedefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNamednamespacedefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNamednamespacedefinition(this);
		}
	}

	[RuleVersion(0)]
	public NamednamespacedefinitionContext namednamespacedefinition() {
		NamednamespacedefinitionContext _localctx = new NamednamespacedefinitionContext(Context, State);
		EnterRule(_localctx, 182, RULE_namednamespacedefinition);
		try {
			State = 1447;
			switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1445; originalnamespacedefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1446; extensionnamespacedefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OriginalnamespacedefinitionContext : ParserRuleContext {
		public ITerminalNode Namespace() { return GetToken(CPP14Parser.Namespace, 0); }
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public NamespacebodyContext namespacebody() {
			return GetRuleContext<NamespacebodyContext>(0);
		}
		public ITerminalNode Inline() { return GetToken(CPP14Parser.Inline, 0); }
		public OriginalnamespacedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_originalnamespacedefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterOriginalnamespacedefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitOriginalnamespacedefinition(this);
		}
	}

	[RuleVersion(0)]
	public OriginalnamespacedefinitionContext originalnamespacedefinition() {
		OriginalnamespacedefinitionContext _localctx = new OriginalnamespacedefinitionContext(Context, State);
		EnterRule(_localctx, 184, RULE_originalnamespacedefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1450;
			_la = TokenStream.La(1);
			if (_la==Inline) {
				{
				State = 1449; Match(Inline);
				}
			}

			State = 1452; Match(Namespace);
			State = 1453; Match(Identifier);
			State = 1454; Match(LeftBrace);
			State = 1455; namespacebody();
			State = 1456; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtensionnamespacedefinitionContext : ParserRuleContext {
		public ITerminalNode Namespace() { return GetToken(CPP14Parser.Namespace, 0); }
		public OriginalnamespacenameContext originalnamespacename() {
			return GetRuleContext<OriginalnamespacenameContext>(0);
		}
		public NamespacebodyContext namespacebody() {
			return GetRuleContext<NamespacebodyContext>(0);
		}
		public ITerminalNode Inline() { return GetToken(CPP14Parser.Inline, 0); }
		public ExtensionnamespacedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extensionnamespacedefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExtensionnamespacedefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExtensionnamespacedefinition(this);
		}
	}

	[RuleVersion(0)]
	public ExtensionnamespacedefinitionContext extensionnamespacedefinition() {
		ExtensionnamespacedefinitionContext _localctx = new ExtensionnamespacedefinitionContext(Context, State);
		EnterRule(_localctx, 186, RULE_extensionnamespacedefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1459;
			_la = TokenStream.La(1);
			if (_la==Inline) {
				{
				State = 1458; Match(Inline);
				}
			}

			State = 1461; Match(Namespace);
			State = 1462; originalnamespacename();
			State = 1463; Match(LeftBrace);
			State = 1464; namespacebody();
			State = 1465; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnnamednamespacedefinitionContext : ParserRuleContext {
		public ITerminalNode Namespace() { return GetToken(CPP14Parser.Namespace, 0); }
		public NamespacebodyContext namespacebody() {
			return GetRuleContext<NamespacebodyContext>(0);
		}
		public ITerminalNode Inline() { return GetToken(CPP14Parser.Inline, 0); }
		public UnnamednamespacedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unnamednamespacedefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUnnamednamespacedefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUnnamednamespacedefinition(this);
		}
	}

	[RuleVersion(0)]
	public UnnamednamespacedefinitionContext unnamednamespacedefinition() {
		UnnamednamespacedefinitionContext _localctx = new UnnamednamespacedefinitionContext(Context, State);
		EnterRule(_localctx, 188, RULE_unnamednamespacedefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1468;
			_la = TokenStream.La(1);
			if (_la==Inline) {
				{
				State = 1467; Match(Inline);
				}
			}

			State = 1470; Match(Namespace);
			State = 1471; Match(LeftBrace);
			State = 1472; namespacebody();
			State = 1473; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespacebodyContext : ParserRuleContext {
		public DeclarationseqContext declarationseq() {
			return GetRuleContext<DeclarationseqContext>(0);
		}
		public NamespacebodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespacebody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNamespacebody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNamespacebody(this);
		}
	}

	[RuleVersion(0)]
	public NamespacebodyContext namespacebody() {
		NamespacebodyContext _localctx = new NamespacebodyContext(Context, State);
		EnterRule(_localctx, 190, RULE_namespacebody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1476;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignas) | (1L << Asm) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << Decltype) | (1L << Double) | (1L << Enum) | (1L << Explicit) | (1L << Extern) | (1L << Float) | (1L << Friend) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << Namespace) | (1L << Operator) | (1L << Register) | (1L << Short) | (1L << Signed) | (1L << Static) | (1L << Static_assert) | (1L << Struct) | (1L << Template) | (1L << Thread_local))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (Typedef - 66)) | (1L << (Typename - 66)) | (1L << (Union - 66)) | (1L << (Unsigned - 66)) | (1L << (Using - 66)) | (1L << (Virtual - 66)) | (1L << (Void - 66)) | (1L << (Volatile - 66)) | (1L << (Wchar - 66)) | (1L << (LeftParen - 66)) | (1L << (LeftBracket - 66)) | (1L << (Star - 66)) | (1L << (And - 66)) | (1L << (Tilde - 66)) | (1L << (AndAnd - 66)) | (1L << (Doublecolon - 66)) | (1L << (Semi - 66)) | (1L << (Ellipsis - 66)) | (1L << (Identifier - 66)))) != 0)) {
				{
				State = 1475; declarationseq(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespacealiasContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public NamespacealiasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespacealias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNamespacealias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNamespacealias(this);
		}
	}

	[RuleVersion(0)]
	public NamespacealiasContext namespacealias() {
		NamespacealiasContext _localctx = new NamespacealiasContext(Context, State);
		EnterRule(_localctx, 192, RULE_namespacealias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1478; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespacealiasdefinitionContext : ParserRuleContext {
		public ITerminalNode Namespace() { return GetToken(CPP14Parser.Namespace, 0); }
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public QualifiednamespacespecifierContext qualifiednamespacespecifier() {
			return GetRuleContext<QualifiednamespacespecifierContext>(0);
		}
		public NamespacealiasdefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespacealiasdefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNamespacealiasdefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNamespacealiasdefinition(this);
		}
	}

	[RuleVersion(0)]
	public NamespacealiasdefinitionContext namespacealiasdefinition() {
		NamespacealiasdefinitionContext _localctx = new NamespacealiasdefinitionContext(Context, State);
		EnterRule(_localctx, 194, RULE_namespacealiasdefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1480; Match(Namespace);
			State = 1481; Match(Identifier);
			State = 1482; Match(Assign);
			State = 1483; qualifiednamespacespecifier();
			State = 1484; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiednamespacespecifierContext : ParserRuleContext {
		public NamespacenameContext namespacename() {
			return GetRuleContext<NamespacenameContext>(0);
		}
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public QualifiednamespacespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiednamespacespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterQualifiednamespacespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitQualifiednamespacespecifier(this);
		}
	}

	[RuleVersion(0)]
	public QualifiednamespacespecifierContext qualifiednamespacespecifier() {
		QualifiednamespacespecifierContext _localctx = new QualifiednamespacespecifierContext(Context, State);
		EnterRule(_localctx, 196, RULE_qualifiednamespacespecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1487;
			switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
			case 1:
				{
				State = 1486; nestednamespecifier(0);
				}
				break;
			}
			State = 1489; namespacename();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingdeclarationContext : ParserRuleContext {
		public ITerminalNode Using() { return GetToken(CPP14Parser.Using, 0); }
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public UnqualifiedidContext unqualifiedid() {
			return GetRuleContext<UnqualifiedidContext>(0);
		}
		public ITerminalNode Typename() { return GetToken(CPP14Parser.Typename, 0); }
		public UsingdeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingdeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUsingdeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUsingdeclaration(this);
		}
	}

	[RuleVersion(0)]
	public UsingdeclarationContext usingdeclaration() {
		UsingdeclarationContext _localctx = new UsingdeclarationContext(Context, State);
		EnterRule(_localctx, 198, RULE_usingdeclaration);
		int _la;
		try {
			State = 1504;
			switch ( Interpreter.AdaptivePredict(TokenStream,148,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1491; Match(Using);
				State = 1493;
				_la = TokenStream.La(1);
				if (_la==Typename) {
					{
					State = 1492; Match(Typename);
					}
				}

				State = 1495; nestednamespecifier(0);
				State = 1496; unqualifiedid();
				State = 1497; Match(Semi);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1499; Match(Using);
				State = 1500; Match(Doublecolon);
				State = 1501; unqualifiedid();
				State = 1502; Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingdirectiveContext : ParserRuleContext {
		public ITerminalNode Using() { return GetToken(CPP14Parser.Using, 0); }
		public ITerminalNode Namespace() { return GetToken(CPP14Parser.Namespace, 0); }
		public NamespacenameContext namespacename() {
			return GetRuleContext<NamespacenameContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public UsingdirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingdirective; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUsingdirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUsingdirective(this);
		}
	}

	[RuleVersion(0)]
	public UsingdirectiveContext usingdirective() {
		UsingdirectiveContext _localctx = new UsingdirectiveContext(Context, State);
		EnterRule(_localctx, 200, RULE_usingdirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1507;
			_la = TokenStream.La(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1506; attributespecifierseq(0);
				}
			}

			State = 1509; Match(Using);
			State = 1510; Match(Namespace);
			State = 1512;
			switch ( Interpreter.AdaptivePredict(TokenStream,150,Context) ) {
			case 1:
				{
				State = 1511; nestednamespecifier(0);
				}
				break;
			}
			State = 1514; namespacename();
			State = 1515; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsmdefinitionContext : ParserRuleContext {
		public ITerminalNode Asm() { return GetToken(CPP14Parser.Asm, 0); }
		public ITerminalNode Stringliteral() { return GetToken(CPP14Parser.Stringliteral, 0); }
		public AsmdefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asmdefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAsmdefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAsmdefinition(this);
		}
	}

	[RuleVersion(0)]
	public AsmdefinitionContext asmdefinition() {
		AsmdefinitionContext _localctx = new AsmdefinitionContext(Context, State);
		EnterRule(_localctx, 202, RULE_asmdefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1517; Match(Asm);
			State = 1518; Match(LeftParen);
			State = 1519; Match(Stringliteral);
			State = 1520; Match(RightParen);
			State = 1521; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinkagespecificationContext : ParserRuleContext {
		public ITerminalNode Extern() { return GetToken(CPP14Parser.Extern, 0); }
		public ITerminalNode Stringliteral() { return GetToken(CPP14Parser.Stringliteral, 0); }
		public DeclarationseqContext declarationseq() {
			return GetRuleContext<DeclarationseqContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public LinkagespecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linkagespecification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLinkagespecification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLinkagespecification(this);
		}
	}

	[RuleVersion(0)]
	public LinkagespecificationContext linkagespecification() {
		LinkagespecificationContext _localctx = new LinkagespecificationContext(Context, State);
		EnterRule(_localctx, 204, RULE_linkagespecification);
		int _la;
		try {
			State = 1533;
			switch ( Interpreter.AdaptivePredict(TokenStream,152,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1523; Match(Extern);
				State = 1524; Match(Stringliteral);
				State = 1525; Match(LeftBrace);
				State = 1527;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignas) | (1L << Asm) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << Decltype) | (1L << Double) | (1L << Enum) | (1L << Explicit) | (1L << Extern) | (1L << Float) | (1L << Friend) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << Namespace) | (1L << Operator) | (1L << Register) | (1L << Short) | (1L << Signed) | (1L << Static) | (1L << Static_assert) | (1L << Struct) | (1L << Template) | (1L << Thread_local))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (Typedef - 66)) | (1L << (Typename - 66)) | (1L << (Union - 66)) | (1L << (Unsigned - 66)) | (1L << (Using - 66)) | (1L << (Virtual - 66)) | (1L << (Void - 66)) | (1L << (Volatile - 66)) | (1L << (Wchar - 66)) | (1L << (LeftParen - 66)) | (1L << (LeftBracket - 66)) | (1L << (Star - 66)) | (1L << (And - 66)) | (1L << (Tilde - 66)) | (1L << (AndAnd - 66)) | (1L << (Doublecolon - 66)) | (1L << (Semi - 66)) | (1L << (Ellipsis - 66)) | (1L << (Identifier - 66)))) != 0)) {
					{
					State = 1526; declarationseq(0);
					}
				}

				State = 1529; Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1530; Match(Extern);
				State = 1531; Match(Stringliteral);
				State = 1532; declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributespecifierseqContext : ParserRuleContext {
		public AttributespecifierContext attributespecifier() {
			return GetRuleContext<AttributespecifierContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public AttributespecifierseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributespecifierseq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttributespecifierseq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttributespecifierseq(this);
		}
	}

	[RuleVersion(0)]
	public AttributespecifierseqContext attributespecifierseq() {
		return attributespecifierseq(0);
	}

	private AttributespecifierseqContext attributespecifierseq(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AttributespecifierseqContext _localctx = new AttributespecifierseqContext(Context, _parentState);
		AttributespecifierseqContext _prevctx = _localctx;
		int _startState = 206;
		EnterRecursionRule(_localctx, 206, RULE_attributespecifierseq, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1536; attributespecifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1542;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AttributespecifierseqContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_attributespecifierseq);
					State = 1538;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1539; attributespecifier();
					}
					} 
				}
				State = 1544;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AttributespecifierContext : ParserRuleContext {
		public AttributelistContext attributelist() {
			return GetRuleContext<AttributelistContext>(0);
		}
		public AlignmentspecifierContext alignmentspecifier() {
			return GetRuleContext<AlignmentspecifierContext>(0);
		}
		public AttributespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttributespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttributespecifier(this);
		}
	}

	[RuleVersion(0)]
	public AttributespecifierContext attributespecifier() {
		AttributespecifierContext _localctx = new AttributespecifierContext(Context, State);
		EnterRule(_localctx, 208, RULE_attributespecifier);
		try {
			State = 1552;
			switch (TokenStream.La(1)) {
			case LeftBracket:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1545; Match(LeftBracket);
				State = 1546; Match(LeftBracket);
				State = 1547; attributelist(0);
				State = 1548; Match(RightBracket);
				State = 1549; Match(RightBracket);
				}
				break;
			case Alignas:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1551; alignmentspecifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlignmentspecifierContext : ParserRuleContext {
		public ITerminalNode Alignas() { return GetToken(CPP14Parser.Alignas, 0); }
		public TypeidContext typeid() {
			return GetRuleContext<TypeidContext>(0);
		}
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public AlignmentspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alignmentspecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAlignmentspecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAlignmentspecifier(this);
		}
	}

	[RuleVersion(0)]
	public AlignmentspecifierContext alignmentspecifier() {
		AlignmentspecifierContext _localctx = new AlignmentspecifierContext(Context, State);
		EnterRule(_localctx, 210, RULE_alignmentspecifier);
		int _la;
		try {
			State = 1570;
			switch ( Interpreter.AdaptivePredict(TokenStream,157,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1554; Match(Alignas);
				State = 1555; Match(LeftParen);
				State = 1556; typeid();
				State = 1558;
				_la = TokenStream.La(1);
				if (_la==Ellipsis) {
					{
					State = 1557; Match(Ellipsis);
					}
				}

				State = 1560; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1562; Match(Alignas);
				State = 1563; Match(LeftParen);
				State = 1564; constantexpression();
				State = 1566;
				_la = TokenStream.La(1);
				if (_la==Ellipsis) {
					{
					State = 1565; Match(Ellipsis);
					}
				}

				State = 1568; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributelistContext : ParserRuleContext {
		public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public AttributelistContext attributelist() {
			return GetRuleContext<AttributelistContext>(0);
		}
		public AttributelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributelist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttributelist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttributelist(this);
		}
	}

	[RuleVersion(0)]
	public AttributelistContext attributelist() {
		return attributelist(0);
	}

	private AttributelistContext attributelist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AttributelistContext _localctx = new AttributelistContext(Context, _parentState);
		AttributelistContext _prevctx = _localctx;
		int _startState = 212;
		EnterRecursionRule(_localctx, 212, RULE_attributelist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1579;
			switch ( Interpreter.AdaptivePredict(TokenStream,159,Context) ) {
			case 1:
				{
				State = 1574;
				switch ( Interpreter.AdaptivePredict(TokenStream,158,Context) ) {
				case 1:
					{
					State = 1573; attribute();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 1576; attribute();
				State = 1577; Match(Ellipsis);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1593;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,162,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1591;
					switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
					case 1:
						{
						_localctx = new AttributelistContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_attributelist);
						State = 1581;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1582; Match(Comma);
						State = 1584;
						switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
						case 1:
							{
							State = 1583; attribute();
							}
							break;
						}
						}
						break;
					case 2:
						{
						_localctx = new AttributelistContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_attributelist);
						State = 1586;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1587; Match(Comma);
						State = 1588; attribute();
						State = 1589; Match(Ellipsis);
						}
						break;
					}
					} 
				}
				State = 1595;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,162,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public AttributetokenContext attributetoken() {
			return GetRuleContext<AttributetokenContext>(0);
		}
		public AttributeargumentclauseContext attributeargumentclause() {
			return GetRuleContext<AttributeargumentclauseContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 214, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1596; attributetoken();
			State = 1598;
			switch ( Interpreter.AdaptivePredict(TokenStream,163,Context) ) {
			case 1:
				{
				State = 1597; attributeargumentclause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributetokenContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public AttributescopedtokenContext attributescopedtoken() {
			return GetRuleContext<AttributescopedtokenContext>(0);
		}
		public AttributetokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributetoken; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttributetoken(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttributetoken(this);
		}
	}

	[RuleVersion(0)]
	public AttributetokenContext attributetoken() {
		AttributetokenContext _localctx = new AttributetokenContext(Context, State);
		EnterRule(_localctx, 216, RULE_attributetoken);
		try {
			State = 1602;
			switch ( Interpreter.AdaptivePredict(TokenStream,164,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1600; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1601; attributescopedtoken();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributescopedtokenContext : ParserRuleContext {
		public AttributenamespaceContext attributenamespace() {
			return GetRuleContext<AttributenamespaceContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public AttributescopedtokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributescopedtoken; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttributescopedtoken(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttributescopedtoken(this);
		}
	}

	[RuleVersion(0)]
	public AttributescopedtokenContext attributescopedtoken() {
		AttributescopedtokenContext _localctx = new AttributescopedtokenContext(Context, State);
		EnterRule(_localctx, 218, RULE_attributescopedtoken);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1604; attributenamespace();
			State = 1605; Match(Doublecolon);
			State = 1606; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributenamespaceContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public AttributenamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributenamespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttributenamespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttributenamespace(this);
		}
	}

	[RuleVersion(0)]
	public AttributenamespaceContext attributenamespace() {
		AttributenamespaceContext _localctx = new AttributenamespaceContext(Context, State);
		EnterRule(_localctx, 220, RULE_attributenamespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1608; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeargumentclauseContext : ParserRuleContext {
		public BalancedtokenseqContext balancedtokenseq() {
			return GetRuleContext<BalancedtokenseqContext>(0);
		}
		public AttributeargumentclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeargumentclause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttributeargumentclause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttributeargumentclause(this);
		}
	}

	[RuleVersion(0)]
	public AttributeargumentclauseContext attributeargumentclause() {
		AttributeargumentclauseContext _localctx = new AttributeargumentclauseContext(Context, State);
		EnterRule(_localctx, 222, RULE_attributeargumentclause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1610; Match(LeftParen);
			State = 1611; balancedtokenseq(0);
			State = 1612; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BalancedtokenseqContext : ParserRuleContext {
		public BalancedtokenContext balancedtoken() {
			return GetRuleContext<BalancedtokenContext>(0);
		}
		public BalancedtokenseqContext balancedtokenseq() {
			return GetRuleContext<BalancedtokenseqContext>(0);
		}
		public BalancedtokenseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_balancedtokenseq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBalancedtokenseq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBalancedtokenseq(this);
		}
	}

	[RuleVersion(0)]
	public BalancedtokenseqContext balancedtokenseq() {
		return balancedtokenseq(0);
	}

	private BalancedtokenseqContext balancedtokenseq(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BalancedtokenseqContext _localctx = new BalancedtokenseqContext(Context, _parentState);
		BalancedtokenseqContext _prevctx = _localctx;
		int _startState = 224;
		EnterRecursionRule(_localctx, 224, RULE_balancedtokenseq, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1616;
			switch ( Interpreter.AdaptivePredict(TokenStream,165,Context) ) {
			case 1:
				{
				State = 1615; balancedtoken();
				}
				break;
			}
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1622;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,166,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BalancedtokenseqContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_balancedtokenseq);
					State = 1618;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1619; balancedtoken();
					}
					} 
				}
				State = 1624;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,166,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BalancedtokenContext : ParserRuleContext {
		public BalancedtokenseqContext balancedtokenseq() {
			return GetRuleContext<BalancedtokenseqContext>(0);
		}
		public BalancedtokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_balancedtoken; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBalancedtoken(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBalancedtoken(this);
		}
	}

	[RuleVersion(0)]
	public BalancedtokenContext balancedtoken() {
		BalancedtokenContext _localctx = new BalancedtokenContext(Context, State);
		EnterRule(_localctx, 226, RULE_balancedtoken);
		try {
			State = 1637;
			switch (TokenStream.La(1)) {
			case LeftParen:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1625; Match(LeftParen);
				State = 1626; balancedtokenseq(0);
				State = 1627; Match(RightParen);
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1629; Match(LeftBracket);
				State = 1630; balancedtokenseq(0);
				State = 1631; Match(RightBracket);
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1633; Match(LeftBrace);
				State = 1634; balancedtokenseq(0);
				State = 1635; Match(RightBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitdeclaratorlistContext : ParserRuleContext {
		public InitdeclaratorContext initdeclarator() {
			return GetRuleContext<InitdeclaratorContext>(0);
		}
		public InitdeclaratorlistContext initdeclaratorlist() {
			return GetRuleContext<InitdeclaratorlistContext>(0);
		}
		public InitdeclaratorlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initdeclaratorlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterInitdeclaratorlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitInitdeclaratorlist(this);
		}
	}

	[RuleVersion(0)]
	public InitdeclaratorlistContext initdeclaratorlist() {
		return initdeclaratorlist(0);
	}

	private InitdeclaratorlistContext initdeclaratorlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InitdeclaratorlistContext _localctx = new InitdeclaratorlistContext(Context, _parentState);
		InitdeclaratorlistContext _prevctx = _localctx;
		int _startState = 228;
		EnterRecursionRule(_localctx, 228, RULE_initdeclaratorlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1640; initdeclarator();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1647;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,168,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InitdeclaratorlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_initdeclaratorlist);
					State = 1642;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1643; Match(Comma);
					State = 1644; initdeclarator();
					}
					} 
				}
				State = 1649;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,168,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InitdeclaratorContext : ParserRuleContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public InitdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterInitdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitInitdeclarator(this);
		}
	}

	[RuleVersion(0)]
	public InitdeclaratorContext initdeclarator() {
		InitdeclaratorContext _localctx = new InitdeclaratorContext(Context, State);
		EnterRule(_localctx, 230, RULE_initdeclarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1650; declarator();
			State = 1652;
			switch ( Interpreter.AdaptivePredict(TokenStream,169,Context) ) {
			case 1:
				{
				State = 1651; initializer();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorContext : ParserRuleContext {
		public PtrdeclaratorContext ptrdeclarator() {
			return GetRuleContext<PtrdeclaratorContext>(0);
		}
		public NoptrdeclaratorContext noptrdeclarator() {
			return GetRuleContext<NoptrdeclaratorContext>(0);
		}
		public ParametersandqualifiersContext parametersandqualifiers() {
			return GetRuleContext<ParametersandqualifiersContext>(0);
		}
		public TrailingreturntypeContext trailingreturntype() {
			return GetRuleContext<TrailingreturntypeContext>(0);
		}
		public DeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorContext declarator() {
		DeclaratorContext _localctx = new DeclaratorContext(Context, State);
		EnterRule(_localctx, 232, RULE_declarator);
		try {
			State = 1659;
			switch ( Interpreter.AdaptivePredict(TokenStream,170,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1654; ptrdeclarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1655; noptrdeclarator(0);
				State = 1656; parametersandqualifiers();
				State = 1657; trailingreturntype();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtrdeclaratorContext : ParserRuleContext {
		public NoptrdeclaratorContext noptrdeclarator() {
			return GetRuleContext<NoptrdeclaratorContext>(0);
		}
		public PtroperatorContext ptroperator() {
			return GetRuleContext<PtroperatorContext>(0);
		}
		public PtrdeclaratorContext ptrdeclarator() {
			return GetRuleContext<PtrdeclaratorContext>(0);
		}
		public PtrdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptrdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPtrdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPtrdeclarator(this);
		}
	}

	[RuleVersion(0)]
	public PtrdeclaratorContext ptrdeclarator() {
		PtrdeclaratorContext _localctx = new PtrdeclaratorContext(Context, State);
		EnterRule(_localctx, 234, RULE_ptrdeclarator);
		try {
			State = 1665;
			switch ( Interpreter.AdaptivePredict(TokenStream,171,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1661; noptrdeclarator(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1662; ptroperator();
				State = 1663; ptrdeclarator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoptrdeclaratorContext : ParserRuleContext {
		public DeclaratoridContext declaratorid() {
			return GetRuleContext<DeclaratoridContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public PtrdeclaratorContext ptrdeclarator() {
			return GetRuleContext<PtrdeclaratorContext>(0);
		}
		public NoptrdeclaratorContext noptrdeclarator() {
			return GetRuleContext<NoptrdeclaratorContext>(0);
		}
		public ParametersandqualifiersContext parametersandqualifiers() {
			return GetRuleContext<ParametersandqualifiersContext>(0);
		}
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public NoptrdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noptrdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNoptrdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNoptrdeclarator(this);
		}
	}

	[RuleVersion(0)]
	public NoptrdeclaratorContext noptrdeclarator() {
		return noptrdeclarator(0);
	}

	private NoptrdeclaratorContext noptrdeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NoptrdeclaratorContext _localctx = new NoptrdeclaratorContext(Context, _parentState);
		NoptrdeclaratorContext _prevctx = _localctx;
		int _startState = 236;
		EnterRecursionRule(_localctx, 236, RULE_noptrdeclarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1676;
			switch (TokenStream.La(1)) {
			case Decltype:
			case Operator:
			case Tilde:
			case Doublecolon:
			case Ellipsis:
			case Identifier:
				{
				State = 1668; declaratorid();
				State = 1670;
				switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
				case 1:
					{
					State = 1669; attributespecifierseq(0);
					}
					break;
				}
				}
				break;
			case LeftParen:
				{
				State = 1672; Match(LeftParen);
				State = 1673; ptrdeclarator();
				State = 1674; Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1691;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,177,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1689;
					switch ( Interpreter.AdaptivePredict(TokenStream,176,Context) ) {
					case 1:
						{
						_localctx = new NoptrdeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_noptrdeclarator);
						State = 1678;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1679; parametersandqualifiers();
						}
						break;
					case 2:
						{
						_localctx = new NoptrdeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_noptrdeclarator);
						State = 1680;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1681; Match(LeftBracket);
						State = 1683;
						_la = TokenStream.La(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof) | (1L << Static_cast) | (1L << This))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (True - 64)) | (1L << (Typeid - 64)) | (1L << (Typename - 64)) | (1L << (Unsigned - 64)) | (1L << (Void - 64)) | (1L << (Wchar - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Or - 64)) | (1L << (Tilde - 64)) | (1L << (Not - 64)) | (1L << (PlusPlus - 64)) | (1L << (MinusMinus - 64)) | (1L << (Doublecolon - 64)) | (1L << (Identifier - 64)) | (1L << (Integerliteral - 64)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (Characterliteral - 131)) | (1L << (Floatingliteral - 131)) | (1L << (Stringliteral - 131)) | (1L << (Userdefinedintegerliteral - 131)) | (1L << (Userdefinedfloatingliteral - 131)) | (1L << (Userdefinedstringliteral - 131)) | (1L << (Userdefinedcharacterliteral - 131)))) != 0)) {
							{
							State = 1682; constantexpression();
							}
						}

						State = 1685; Match(RightBracket);
						State = 1687;
						switch ( Interpreter.AdaptivePredict(TokenStream,175,Context) ) {
						case 1:
							{
							State = 1686; attributespecifierseq(0);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 1693;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,177,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParametersandqualifiersContext : ParserRuleContext {
		public ParameterdeclarationclauseContext parameterdeclarationclause() {
			return GetRuleContext<ParameterdeclarationclauseContext>(0);
		}
		public CvqualifierseqContext cvqualifierseq() {
			return GetRuleContext<CvqualifierseqContext>(0);
		}
		public RefqualifierContext refqualifier() {
			return GetRuleContext<RefqualifierContext>(0);
		}
		public ExceptionspecificationContext exceptionspecification() {
			return GetRuleContext<ExceptionspecificationContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public ParametersandqualifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametersandqualifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterParametersandqualifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitParametersandqualifiers(this);
		}
	}

	[RuleVersion(0)]
	public ParametersandqualifiersContext parametersandqualifiers() {
		ParametersandqualifiersContext _localctx = new ParametersandqualifiersContext(Context, State);
		EnterRule(_localctx, 238, RULE_parametersandqualifiers);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1694; Match(LeftParen);
			State = 1695; parameterdeclarationclause();
			State = 1696; Match(RightParen);
			State = 1698;
			switch ( Interpreter.AdaptivePredict(TokenStream,178,Context) ) {
			case 1:
				{
				State = 1697; cvqualifierseq();
				}
				break;
			}
			State = 1701;
			switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
			case 1:
				{
				State = 1700; refqualifier();
				}
				break;
			}
			State = 1704;
			switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
			case 1:
				{
				State = 1703; exceptionspecification();
				}
				break;
			}
			State = 1707;
			switch ( Interpreter.AdaptivePredict(TokenStream,181,Context) ) {
			case 1:
				{
				State = 1706; attributespecifierseq(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrailingreturntypeContext : ParserRuleContext {
		public TrailingtypespecifierseqContext trailingtypespecifierseq() {
			return GetRuleContext<TrailingtypespecifierseqContext>(0);
		}
		public AbstractdeclaratorContext abstractdeclarator() {
			return GetRuleContext<AbstractdeclaratorContext>(0);
		}
		public TrailingreturntypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trailingreturntype; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTrailingreturntype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTrailingreturntype(this);
		}
	}

	[RuleVersion(0)]
	public TrailingreturntypeContext trailingreturntype() {
		TrailingreturntypeContext _localctx = new TrailingreturntypeContext(Context, State);
		EnterRule(_localctx, 240, RULE_trailingreturntype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1709; Match(Arrow);
			State = 1710; trailingtypespecifierseq();
			State = 1712;
			switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
			case 1:
				{
				State = 1711; abstractdeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtroperatorContext : ParserRuleContext {
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public CvqualifierseqContext cvqualifierseq() {
			return GetRuleContext<CvqualifierseqContext>(0);
		}
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public PtroperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptroperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPtroperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPtroperator(this);
		}
	}

	[RuleVersion(0)]
	public PtroperatorContext ptroperator() {
		PtroperatorContext _localctx = new PtroperatorContext(Context, State);
		EnterRule(_localctx, 242, RULE_ptroperator);
		try {
			State = 1737;
			switch (TokenStream.La(1)) {
			case Star:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1714; Match(Star);
				State = 1716;
				switch ( Interpreter.AdaptivePredict(TokenStream,183,Context) ) {
				case 1:
					{
					State = 1715; attributespecifierseq(0);
					}
					break;
				}
				State = 1719;
				switch ( Interpreter.AdaptivePredict(TokenStream,184,Context) ) {
				case 1:
					{
					State = 1718; cvqualifierseq();
					}
					break;
				}
				}
				break;
			case And:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1721; Match(And);
				State = 1723;
				switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
				case 1:
					{
					State = 1722; attributespecifierseq(0);
					}
					break;
				}
				}
				break;
			case AndAnd:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1725; Match(AndAnd);
				State = 1727;
				switch ( Interpreter.AdaptivePredict(TokenStream,186,Context) ) {
				case 1:
					{
					State = 1726; attributespecifierseq(0);
					}
					break;
				}
				}
				break;
			case Decltype:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1729; nestednamespecifier(0);
				State = 1730; Match(Star);
				State = 1732;
				switch ( Interpreter.AdaptivePredict(TokenStream,187,Context) ) {
				case 1:
					{
					State = 1731; attributespecifierseq(0);
					}
					break;
				}
				State = 1735;
				switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
				case 1:
					{
					State = 1734; cvqualifierseq();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CvqualifierseqContext : ParserRuleContext {
		public CvqualifierContext cvqualifier() {
			return GetRuleContext<CvqualifierContext>(0);
		}
		public CvqualifierseqContext cvqualifierseq() {
			return GetRuleContext<CvqualifierseqContext>(0);
		}
		public CvqualifierseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cvqualifierseq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCvqualifierseq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCvqualifierseq(this);
		}
	}

	[RuleVersion(0)]
	public CvqualifierseqContext cvqualifierseq() {
		CvqualifierseqContext _localctx = new CvqualifierseqContext(Context, State);
		EnterRule(_localctx, 244, RULE_cvqualifierseq);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1739; cvqualifier();
			State = 1741;
			switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
			case 1:
				{
				State = 1740; cvqualifierseq();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CvqualifierContext : ParserRuleContext {
		public ITerminalNode Const() { return GetToken(CPP14Parser.Const, 0); }
		public ITerminalNode Volatile() { return GetToken(CPP14Parser.Volatile, 0); }
		public CvqualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cvqualifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCvqualifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCvqualifier(this);
		}
	}

	[RuleVersion(0)]
	public CvqualifierContext cvqualifier() {
		CvqualifierContext _localctx = new CvqualifierContext(Context, State);
		EnterRule(_localctx, 246, RULE_cvqualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1743;
			_la = TokenStream.La(1);
			if ( !(_la==Const || _la==Volatile) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefqualifierContext : ParserRuleContext {
		public RefqualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refqualifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterRefqualifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitRefqualifier(this);
		}
	}

	[RuleVersion(0)]
	public RefqualifierContext refqualifier() {
		RefqualifierContext _localctx = new RefqualifierContext(Context, State);
		EnterRule(_localctx, 248, RULE_refqualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1745;
			_la = TokenStream.La(1);
			if ( !(_la==And || _la==AndAnd) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratoridContext : ParserRuleContext {
		public IdexpressionContext idexpression() {
			return GetRuleContext<IdexpressionContext>(0);
		}
		public DeclaratoridContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaratorid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeclaratorid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeclaratorid(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratoridContext declaratorid() {
		DeclaratoridContext _localctx = new DeclaratoridContext(Context, State);
		EnterRule(_localctx, 250, RULE_declaratorid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1748;
			_la = TokenStream.La(1);
			if (_la==Ellipsis) {
				{
				State = 1747; Match(Ellipsis);
				}
			}

			State = 1750; idexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeidContext : ParserRuleContext {
		public TypespecifierseqContext typespecifierseq() {
			return GetRuleContext<TypespecifierseqContext>(0);
		}
		public AbstractdeclaratorContext abstractdeclarator() {
			return GetRuleContext<AbstractdeclaratorContext>(0);
		}
		public TypeidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTypeid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTypeid(this);
		}
	}

	[RuleVersion(0)]
	public TypeidContext typeid() {
		TypeidContext _localctx = new TypeidContext(Context, State);
		EnterRule(_localctx, 252, RULE_typeid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1752; typespecifierseq();
			State = 1754;
			switch ( Interpreter.AdaptivePredict(TokenStream,192,Context) ) {
			case 1:
				{
				State = 1753; abstractdeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractdeclaratorContext : ParserRuleContext {
		public PtrabstractdeclaratorContext ptrabstractdeclarator() {
			return GetRuleContext<PtrabstractdeclaratorContext>(0);
		}
		public ParametersandqualifiersContext parametersandqualifiers() {
			return GetRuleContext<ParametersandqualifiersContext>(0);
		}
		public TrailingreturntypeContext trailingreturntype() {
			return GetRuleContext<TrailingreturntypeContext>(0);
		}
		public NoptrabstractdeclaratorContext noptrabstractdeclarator() {
			return GetRuleContext<NoptrabstractdeclaratorContext>(0);
		}
		public AbstractpackdeclaratorContext abstractpackdeclarator() {
			return GetRuleContext<AbstractpackdeclaratorContext>(0);
		}
		public AbstractdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAbstractdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAbstractdeclarator(this);
		}
	}

	[RuleVersion(0)]
	public AbstractdeclaratorContext abstractdeclarator() {
		AbstractdeclaratorContext _localctx = new AbstractdeclaratorContext(Context, State);
		EnterRule(_localctx, 254, RULE_abstractdeclarator);
		try {
			State = 1764;
			switch ( Interpreter.AdaptivePredict(TokenStream,194,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1756; ptrabstractdeclarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1758;
				switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
				case 1:
					{
					State = 1757; noptrabstractdeclarator(0);
					}
					break;
				}
				State = 1760; parametersandqualifiers();
				State = 1761; trailingreturntype();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1763; abstractpackdeclarator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtrabstractdeclaratorContext : ParserRuleContext {
		public NoptrabstractdeclaratorContext noptrabstractdeclarator() {
			return GetRuleContext<NoptrabstractdeclaratorContext>(0);
		}
		public PtroperatorContext ptroperator() {
			return GetRuleContext<PtroperatorContext>(0);
		}
		public PtrabstractdeclaratorContext ptrabstractdeclarator() {
			return GetRuleContext<PtrabstractdeclaratorContext>(0);
		}
		public PtrabstractdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptrabstractdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPtrabstractdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPtrabstractdeclarator(this);
		}
	}

	[RuleVersion(0)]
	public PtrabstractdeclaratorContext ptrabstractdeclarator() {
		PtrabstractdeclaratorContext _localctx = new PtrabstractdeclaratorContext(Context, State);
		EnterRule(_localctx, 256, RULE_ptrabstractdeclarator);
		try {
			State = 1771;
			switch (TokenStream.La(1)) {
			case LeftParen:
			case LeftBracket:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1766; noptrabstractdeclarator(0);
				}
				break;
			case Decltype:
			case Star:
			case And:
			case AndAnd:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1767; ptroperator();
				State = 1769;
				switch ( Interpreter.AdaptivePredict(TokenStream,195,Context) ) {
				case 1:
					{
					State = 1768; ptrabstractdeclarator();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoptrabstractdeclaratorContext : ParserRuleContext {
		public ParametersandqualifiersContext parametersandqualifiers() {
			return GetRuleContext<ParametersandqualifiersContext>(0);
		}
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public PtrabstractdeclaratorContext ptrabstractdeclarator() {
			return GetRuleContext<PtrabstractdeclaratorContext>(0);
		}
		public NoptrabstractdeclaratorContext noptrabstractdeclarator() {
			return GetRuleContext<NoptrabstractdeclaratorContext>(0);
		}
		public NoptrabstractdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noptrabstractdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNoptrabstractdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNoptrabstractdeclarator(this);
		}
	}

	[RuleVersion(0)]
	public NoptrabstractdeclaratorContext noptrabstractdeclarator() {
		return noptrabstractdeclarator(0);
	}

	private NoptrabstractdeclaratorContext noptrabstractdeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NoptrabstractdeclaratorContext _localctx = new NoptrabstractdeclaratorContext(Context, _parentState);
		NoptrabstractdeclaratorContext _prevctx = _localctx;
		int _startState = 258;
		EnterRecursionRule(_localctx, 258, RULE_noptrabstractdeclarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1787;
			switch ( Interpreter.AdaptivePredict(TokenStream,199,Context) ) {
			case 1:
				{
				State = 1774; parametersandqualifiers();
				}
				break;
			case 2:
				{
				State = 1775; Match(LeftBracket);
				State = 1777;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof) | (1L << Static_cast) | (1L << This))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (True - 64)) | (1L << (Typeid - 64)) | (1L << (Typename - 64)) | (1L << (Unsigned - 64)) | (1L << (Void - 64)) | (1L << (Wchar - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Or - 64)) | (1L << (Tilde - 64)) | (1L << (Not - 64)) | (1L << (PlusPlus - 64)) | (1L << (MinusMinus - 64)) | (1L << (Doublecolon - 64)) | (1L << (Identifier - 64)) | (1L << (Integerliteral - 64)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (Characterliteral - 131)) | (1L << (Floatingliteral - 131)) | (1L << (Stringliteral - 131)) | (1L << (Userdefinedintegerliteral - 131)) | (1L << (Userdefinedfloatingliteral - 131)) | (1L << (Userdefinedstringliteral - 131)) | (1L << (Userdefinedcharacterliteral - 131)))) != 0)) {
					{
					State = 1776; constantexpression();
					}
				}

				State = 1779; Match(RightBracket);
				State = 1781;
				switch ( Interpreter.AdaptivePredict(TokenStream,198,Context) ) {
				case 1:
					{
					State = 1780; attributespecifierseq(0);
					}
					break;
				}
				}
				break;
			case 3:
				{
				State = 1783; Match(LeftParen);
				State = 1784; ptrabstractdeclarator();
				State = 1785; Match(RightParen);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1802;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,203,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1800;
					switch ( Interpreter.AdaptivePredict(TokenStream,202,Context) ) {
					case 1:
						{
						_localctx = new NoptrabstractdeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_noptrabstractdeclarator);
						State = 1789;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1790; parametersandqualifiers();
						}
						break;
					case 2:
						{
						_localctx = new NoptrabstractdeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_noptrabstractdeclarator);
						State = 1791;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1792; Match(LeftBracket);
						State = 1794;
						_la = TokenStream.La(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof) | (1L << Static_cast) | (1L << This))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (True - 64)) | (1L << (Typeid - 64)) | (1L << (Typename - 64)) | (1L << (Unsigned - 64)) | (1L << (Void - 64)) | (1L << (Wchar - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Or - 64)) | (1L << (Tilde - 64)) | (1L << (Not - 64)) | (1L << (PlusPlus - 64)) | (1L << (MinusMinus - 64)) | (1L << (Doublecolon - 64)) | (1L << (Identifier - 64)) | (1L << (Integerliteral - 64)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (Characterliteral - 131)) | (1L << (Floatingliteral - 131)) | (1L << (Stringliteral - 131)) | (1L << (Userdefinedintegerliteral - 131)) | (1L << (Userdefinedfloatingliteral - 131)) | (1L << (Userdefinedstringliteral - 131)) | (1L << (Userdefinedcharacterliteral - 131)))) != 0)) {
							{
							State = 1793; constantexpression();
							}
						}

						State = 1796; Match(RightBracket);
						State = 1798;
						switch ( Interpreter.AdaptivePredict(TokenStream,201,Context) ) {
						case 1:
							{
							State = 1797; attributespecifierseq(0);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 1804;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,203,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AbstractpackdeclaratorContext : ParserRuleContext {
		public NoptrabstractpackdeclaratorContext noptrabstractpackdeclarator() {
			return GetRuleContext<NoptrabstractpackdeclaratorContext>(0);
		}
		public PtroperatorContext ptroperator() {
			return GetRuleContext<PtroperatorContext>(0);
		}
		public AbstractpackdeclaratorContext abstractpackdeclarator() {
			return GetRuleContext<AbstractpackdeclaratorContext>(0);
		}
		public AbstractpackdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractpackdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAbstractpackdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAbstractpackdeclarator(this);
		}
	}

	[RuleVersion(0)]
	public AbstractpackdeclaratorContext abstractpackdeclarator() {
		AbstractpackdeclaratorContext _localctx = new AbstractpackdeclaratorContext(Context, State);
		EnterRule(_localctx, 260, RULE_abstractpackdeclarator);
		try {
			State = 1809;
			switch (TokenStream.La(1)) {
			case Ellipsis:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1805; noptrabstractpackdeclarator(0);
				}
				break;
			case Decltype:
			case Star:
			case And:
			case AndAnd:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1806; ptroperator();
				State = 1807; abstractpackdeclarator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoptrabstractpackdeclaratorContext : ParserRuleContext {
		public NoptrabstractpackdeclaratorContext noptrabstractpackdeclarator() {
			return GetRuleContext<NoptrabstractpackdeclaratorContext>(0);
		}
		public ParametersandqualifiersContext parametersandqualifiers() {
			return GetRuleContext<ParametersandqualifiersContext>(0);
		}
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public NoptrabstractpackdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noptrabstractpackdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNoptrabstractpackdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNoptrabstractpackdeclarator(this);
		}
	}

	[RuleVersion(0)]
	public NoptrabstractpackdeclaratorContext noptrabstractpackdeclarator() {
		return noptrabstractpackdeclarator(0);
	}

	private NoptrabstractpackdeclaratorContext noptrabstractpackdeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NoptrabstractpackdeclaratorContext _localctx = new NoptrabstractpackdeclaratorContext(Context, _parentState);
		NoptrabstractpackdeclaratorContext _prevctx = _localctx;
		int _startState = 262;
		EnterRecursionRule(_localctx, 262, RULE_noptrabstractpackdeclarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1812; Match(Ellipsis);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1827;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,208,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1825;
					switch ( Interpreter.AdaptivePredict(TokenStream,207,Context) ) {
					case 1:
						{
						_localctx = new NoptrabstractpackdeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_noptrabstractpackdeclarator);
						State = 1814;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1815; parametersandqualifiers();
						}
						break;
					case 2:
						{
						_localctx = new NoptrabstractpackdeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_noptrabstractpackdeclarator);
						State = 1816;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1817; Match(LeftBracket);
						State = 1819;
						_la = TokenStream.La(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof) | (1L << Static_cast) | (1L << This))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (True - 64)) | (1L << (Typeid - 64)) | (1L << (Typename - 64)) | (1L << (Unsigned - 64)) | (1L << (Void - 64)) | (1L << (Wchar - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Or - 64)) | (1L << (Tilde - 64)) | (1L << (Not - 64)) | (1L << (PlusPlus - 64)) | (1L << (MinusMinus - 64)) | (1L << (Doublecolon - 64)) | (1L << (Identifier - 64)) | (1L << (Integerliteral - 64)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (Characterliteral - 131)) | (1L << (Floatingliteral - 131)) | (1L << (Stringliteral - 131)) | (1L << (Userdefinedintegerliteral - 131)) | (1L << (Userdefinedfloatingliteral - 131)) | (1L << (Userdefinedstringliteral - 131)) | (1L << (Userdefinedcharacterliteral - 131)))) != 0)) {
							{
							State = 1818; constantexpression();
							}
						}

						State = 1821; Match(RightBracket);
						State = 1823;
						switch ( Interpreter.AdaptivePredict(TokenStream,206,Context) ) {
						case 1:
							{
							State = 1822; attributespecifierseq(0);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 1829;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,208,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParameterdeclarationclauseContext : ParserRuleContext {
		public ParameterdeclarationlistContext parameterdeclarationlist() {
			return GetRuleContext<ParameterdeclarationlistContext>(0);
		}
		public ParameterdeclarationclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterdeclarationclause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterParameterdeclarationclause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitParameterdeclarationclause(this);
		}
	}

	[RuleVersion(0)]
	public ParameterdeclarationclauseContext parameterdeclarationclause() {
		ParameterdeclarationclauseContext _localctx = new ParameterdeclarationclauseContext(Context, State);
		EnterRule(_localctx, 264, RULE_parameterdeclarationclause);
		int _la;
		try {
			State = 1840;
			switch ( Interpreter.AdaptivePredict(TokenStream,211,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1831;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignas) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << Decltype) | (1L << Double) | (1L << Enum) | (1L << Explicit) | (1L << Extern) | (1L << Float) | (1L << Friend) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << Register) | (1L << Short) | (1L << Signed) | (1L << Static) | (1L << Struct) | (1L << Thread_local))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (Typedef - 66)) | (1L << (Typename - 66)) | (1L << (Union - 66)) | (1L << (Unsigned - 66)) | (1L << (Virtual - 66)) | (1L << (Void - 66)) | (1L << (Volatile - 66)) | (1L << (Wchar - 66)) | (1L << (LeftBracket - 66)) | (1L << (Doublecolon - 66)) | (1L << (Identifier - 66)))) != 0)) {
					{
					State = 1830; parameterdeclarationlist(0);
					}
				}

				State = 1834;
				_la = TokenStream.La(1);
				if (_la==Ellipsis) {
					{
					State = 1833; Match(Ellipsis);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1836; parameterdeclarationlist(0);
				State = 1837; Match(Comma);
				State = 1838; Match(Ellipsis);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterdeclarationlistContext : ParserRuleContext {
		public ParameterdeclarationContext parameterdeclaration() {
			return GetRuleContext<ParameterdeclarationContext>(0);
		}
		public ParameterdeclarationlistContext parameterdeclarationlist() {
			return GetRuleContext<ParameterdeclarationlistContext>(0);
		}
		public ParameterdeclarationlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterdeclarationlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterParameterdeclarationlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitParameterdeclarationlist(this);
		}
	}

	[RuleVersion(0)]
	public ParameterdeclarationlistContext parameterdeclarationlist() {
		return parameterdeclarationlist(0);
	}

	private ParameterdeclarationlistContext parameterdeclarationlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ParameterdeclarationlistContext _localctx = new ParameterdeclarationlistContext(Context, _parentState);
		ParameterdeclarationlistContext _prevctx = _localctx;
		int _startState = 266;
		EnterRecursionRule(_localctx, 266, RULE_parameterdeclarationlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1843; parameterdeclaration();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1850;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,212,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ParameterdeclarationlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_parameterdeclarationlist);
					State = 1845;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1846; Match(Comma);
					State = 1847; parameterdeclaration();
					}
					} 
				}
				State = 1852;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,212,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParameterdeclarationContext : ParserRuleContext {
		public DeclspecifierseqContext declspecifierseq() {
			return GetRuleContext<DeclspecifierseqContext>(0);
		}
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public InitializerclauseContext initializerclause() {
			return GetRuleContext<InitializerclauseContext>(0);
		}
		public AbstractdeclaratorContext abstractdeclarator() {
			return GetRuleContext<AbstractdeclaratorContext>(0);
		}
		public ParameterdeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterdeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterParameterdeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitParameterdeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ParameterdeclarationContext parameterdeclaration() {
		ParameterdeclarationContext _localctx = new ParameterdeclarationContext(Context, State);
		EnterRule(_localctx, 268, RULE_parameterdeclaration);
		int _la;
		try {
			State = 1884;
			switch ( Interpreter.AdaptivePredict(TokenStream,219,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1854;
				_la = TokenStream.La(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1853; attributespecifierseq(0);
					}
				}

				State = 1856; declspecifierseq();
				State = 1857; declarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1860;
				_la = TokenStream.La(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1859; attributespecifierseq(0);
					}
				}

				State = 1862; declspecifierseq();
				State = 1863; declarator();
				State = 1864; Match(Assign);
				State = 1865; initializerclause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1868;
				_la = TokenStream.La(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1867; attributespecifierseq(0);
					}
				}

				State = 1870; declspecifierseq();
				State = 1872;
				switch ( Interpreter.AdaptivePredict(TokenStream,216,Context) ) {
				case 1:
					{
					State = 1871; abstractdeclarator();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1875;
				_la = TokenStream.La(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1874; attributespecifierseq(0);
					}
				}

				State = 1877; declspecifierseq();
				State = 1879;
				_la = TokenStream.La(1);
				if (_la==Decltype || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (LeftParen - 77)) | (1L << (LeftBracket - 77)) | (1L << (Star - 77)) | (1L << (And - 77)) | (1L << (AndAnd - 77)) | (1L << (Doublecolon - 77)) | (1L << (Ellipsis - 77)) | (1L << (Identifier - 77)))) != 0)) {
					{
					State = 1878; abstractdeclarator();
					}
				}

				State = 1881; Match(Assign);
				State = 1882; initializerclause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefinitionContext : ParserRuleContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public FunctionbodyContext functionbody() {
			return GetRuleContext<FunctionbodyContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public DeclspecifierseqContext declspecifierseq() {
			return GetRuleContext<DeclspecifierseqContext>(0);
		}
		public VirtspecifierseqContext virtspecifierseq() {
			return GetRuleContext<VirtspecifierseqContext>(0);
		}
		public FunctiondefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterFunctiondefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitFunctiondefinition(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefinitionContext functiondefinition() {
		FunctiondefinitionContext _localctx = new FunctiondefinitionContext(Context, State);
		EnterRule(_localctx, 270, RULE_functiondefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1887;
			_la = TokenStream.La(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1886; attributespecifierseq(0);
				}
			}

			State = 1890;
			switch ( Interpreter.AdaptivePredict(TokenStream,221,Context) ) {
			case 1:
				{
				State = 1889; declspecifierseq();
				}
				break;
			}
			State = 1892; declarator();
			State = 1894;
			_la = TokenStream.La(1);
			if (_la==Final || _la==Override) {
				{
				State = 1893; virtspecifierseq(0);
				}
			}

			State = 1896; functionbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionbodyContext : ParserRuleContext {
		public CompoundstatementContext compoundstatement() {
			return GetRuleContext<CompoundstatementContext>(0);
		}
		public CtorinitializerContext ctorinitializer() {
			return GetRuleContext<CtorinitializerContext>(0);
		}
		public FunctiontryblockContext functiontryblock() {
			return GetRuleContext<FunctiontryblockContext>(0);
		}
		public ITerminalNode Default() { return GetToken(CPP14Parser.Default, 0); }
		public ITerminalNode Delete() { return GetToken(CPP14Parser.Delete, 0); }
		public FunctionbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionbody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterFunctionbody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitFunctionbody(this);
		}
	}

	[RuleVersion(0)]
	public FunctionbodyContext functionbody() {
		FunctionbodyContext _localctx = new FunctionbodyContext(Context, State);
		EnterRule(_localctx, 272, RULE_functionbody);
		int _la;
		try {
			State = 1909;
			switch ( Interpreter.AdaptivePredict(TokenStream,224,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1899;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 1898; ctorinitializer();
					}
				}

				State = 1901; compoundstatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1902; functiontryblock();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1903; Match(Assign);
				State = 1904; Match(Default);
				State = 1905; Match(Semi);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1906; Match(Assign);
				State = 1907; Match(Delete);
				State = 1908; Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		public BraceorequalinitializerContext braceorequalinitializer() {
			return GetRuleContext<BraceorequalinitializerContext>(0);
		}
		public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitInitializer(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 274, RULE_initializer);
		try {
			State = 1916;
			switch (TokenStream.La(1)) {
			case LeftBrace:
			case Assign:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1911; braceorequalinitializer();
				}
				break;
			case LeftParen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1912; Match(LeftParen);
				State = 1913; expressionlist();
				State = 1914; Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BraceorequalinitializerContext : ParserRuleContext {
		public InitializerclauseContext initializerclause() {
			return GetRuleContext<InitializerclauseContext>(0);
		}
		public BracedinitlistContext bracedinitlist() {
			return GetRuleContext<BracedinitlistContext>(0);
		}
		public BraceorequalinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_braceorequalinitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBraceorequalinitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBraceorequalinitializer(this);
		}
	}

	[RuleVersion(0)]
	public BraceorequalinitializerContext braceorequalinitializer() {
		BraceorequalinitializerContext _localctx = new BraceorequalinitializerContext(Context, State);
		EnterRule(_localctx, 276, RULE_braceorequalinitializer);
		try {
			State = 1921;
			switch (TokenStream.La(1)) {
			case Assign:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1918; Match(Assign);
				State = 1919; initializerclause();
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1920; bracedinitlist();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerclauseContext : ParserRuleContext {
		public AssignmentexpressionContext assignmentexpression() {
			return GetRuleContext<AssignmentexpressionContext>(0);
		}
		public BracedinitlistContext bracedinitlist() {
			return GetRuleContext<BracedinitlistContext>(0);
		}
		public InitializerclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerclause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterInitializerclause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitInitializerclause(this);
		}
	}

	[RuleVersion(0)]
	public InitializerclauseContext initializerclause() {
		InitializerclauseContext _localctx = new InitializerclauseContext(Context, State);
		EnterRule(_localctx, 278, RULE_initializerclause);
		try {
			State = 1925;
			switch (TokenStream.La(1)) {
			case Alignof:
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Const_cast:
			case Decltype:
			case Delete:
			case Double:
			case Dynamic_cast:
			case False:
			case Float:
			case Int:
			case Long:
			case New:
			case Noexcept:
			case Nullptr:
			case Operator:
			case Reinterpret_cast:
			case Short:
			case Signed:
			case Sizeof:
			case Static_cast:
			case This:
			case Throw:
			case True:
			case Typeid:
			case Typename:
			case Unsigned:
			case Void:
			case Wchar:
			case LeftParen:
			case LeftBracket:
			case Plus:
			case Minus:
			case Star:
			case And:
			case Or:
			case Tilde:
			case Not:
			case PlusPlus:
			case MinusMinus:
			case Doublecolon:
			case Identifier:
			case Integerliteral:
			case Characterliteral:
			case Floatingliteral:
			case Stringliteral:
			case Userdefinedintegerliteral:
			case Userdefinedfloatingliteral:
			case Userdefinedstringliteral:
			case Userdefinedcharacterliteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1923; assignmentexpression();
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1924; bracedinitlist();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerlistContext : ParserRuleContext {
		public InitializerclauseContext initializerclause() {
			return GetRuleContext<InitializerclauseContext>(0);
		}
		public InitializerlistContext initializerlist() {
			return GetRuleContext<InitializerlistContext>(0);
		}
		public InitializerlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterInitializerlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitInitializerlist(this);
		}
	}

	[RuleVersion(0)]
	public InitializerlistContext initializerlist() {
		return initializerlist(0);
	}

	private InitializerlistContext initializerlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InitializerlistContext _localctx = new InitializerlistContext(Context, _parentState);
		InitializerlistContext _prevctx = _localctx;
		int _startState = 280;
		EnterRecursionRule(_localctx, 280, RULE_initializerlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1928; initializerclause();
			State = 1930;
			switch ( Interpreter.AdaptivePredict(TokenStream,228,Context) ) {
			case 1:
				{
				State = 1929; Match(Ellipsis);
				}
				break;
			}
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1940;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,230,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InitializerlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_initializerlist);
					State = 1932;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1933; Match(Comma);
					State = 1934; initializerclause();
					State = 1936;
					switch ( Interpreter.AdaptivePredict(TokenStream,229,Context) ) {
					case 1:
						{
						State = 1935; Match(Ellipsis);
						}
						break;
					}
					}
					} 
				}
				State = 1942;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,230,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BracedinitlistContext : ParserRuleContext {
		public InitializerlistContext initializerlist() {
			return GetRuleContext<InitializerlistContext>(0);
		}
		public BracedinitlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracedinitlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBracedinitlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBracedinitlist(this);
		}
	}

	[RuleVersion(0)]
	public BracedinitlistContext bracedinitlist() {
		BracedinitlistContext _localctx = new BracedinitlistContext(Context, State);
		EnterRule(_localctx, 282, RULE_bracedinitlist);
		int _la;
		try {
			State = 1952;
			switch ( Interpreter.AdaptivePredict(TokenStream,232,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1943; Match(LeftBrace);
				State = 1944; initializerlist(0);
				State = 1946;
				_la = TokenStream.La(1);
				if (_la==Comma) {
					{
					State = 1945; Match(Comma);
					}
				}

				State = 1948; Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1950; Match(LeftBrace);
				State = 1951; Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassnameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public SimpletemplateidContext simpletemplateid() {
			return GetRuleContext<SimpletemplateidContext>(0);
		}
		public ClassnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classname; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterClassname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitClassname(this);
		}
	}

	[RuleVersion(0)]
	public ClassnameContext classname() {
		ClassnameContext _localctx = new ClassnameContext(Context, State);
		EnterRule(_localctx, 284, RULE_classname);
		try {
			State = 1956;
			switch ( Interpreter.AdaptivePredict(TokenStream,233,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1954; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1955; simpletemplateid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassspecifierContext : ParserRuleContext {
		public ClassheadContext classhead() {
			return GetRuleContext<ClassheadContext>(0);
		}
		public MemberspecificationContext memberspecification() {
			return GetRuleContext<MemberspecificationContext>(0);
		}
		public ClassspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classspecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterClassspecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitClassspecifier(this);
		}
	}

	[RuleVersion(0)]
	public ClassspecifierContext classspecifier() {
		ClassspecifierContext _localctx = new ClassspecifierContext(Context, State);
		EnterRule(_localctx, 286, RULE_classspecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1958; classhead();
			State = 1959; Match(LeftBrace);
			State = 1961;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignas) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << Decltype) | (1L << Double) | (1L << Enum) | (1L << Explicit) | (1L << Extern) | (1L << Float) | (1L << Friend) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << Operator) | (1L << Private) | (1L << Protected) | (1L << Public) | (1L << Register) | (1L << Short) | (1L << Signed) | (1L << Static) | (1L << Static_assert) | (1L << Struct) | (1L << Template) | (1L << Thread_local))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (Typedef - 66)) | (1L << (Typename - 66)) | (1L << (Union - 66)) | (1L << (Unsigned - 66)) | (1L << (Using - 66)) | (1L << (Virtual - 66)) | (1L << (Void - 66)) | (1L << (Volatile - 66)) | (1L << (Wchar - 66)) | (1L << (LeftParen - 66)) | (1L << (LeftBracket - 66)) | (1L << (Star - 66)) | (1L << (And - 66)) | (1L << (Tilde - 66)) | (1L << (AndAnd - 66)) | (1L << (Colon - 66)) | (1L << (Doublecolon - 66)) | (1L << (Semi - 66)) | (1L << (Ellipsis - 66)) | (1L << (Identifier - 66)))) != 0)) {
				{
				State = 1960; memberspecification();
				}
			}

			State = 1963; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassheadContext : ParserRuleContext {
		public ClasskeyContext classkey() {
			return GetRuleContext<ClasskeyContext>(0);
		}
		public ClassheadnameContext classheadname() {
			return GetRuleContext<ClassheadnameContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public ClassvirtspecifierContext classvirtspecifier() {
			return GetRuleContext<ClassvirtspecifierContext>(0);
		}
		public BaseclauseContext baseclause() {
			return GetRuleContext<BaseclauseContext>(0);
		}
		public ClassheadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classhead; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterClasshead(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitClasshead(this);
		}
	}

	[RuleVersion(0)]
	public ClassheadContext classhead() {
		ClassheadContext _localctx = new ClassheadContext(Context, State);
		EnterRule(_localctx, 288, RULE_classhead);
		int _la;
		try {
			State = 1983;
			switch ( Interpreter.AdaptivePredict(TokenStream,240,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1965; classkey();
				State = 1967;
				_la = TokenStream.La(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1966; attributespecifierseq(0);
					}
				}

				State = 1969; classheadname();
				State = 1971;
				_la = TokenStream.La(1);
				if (_la==Final) {
					{
					State = 1970; classvirtspecifier();
					}
				}

				State = 1974;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 1973; baseclause();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1976; classkey();
				State = 1978;
				_la = TokenStream.La(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1977; attributespecifierseq(0);
					}
				}

				State = 1981;
				_la = TokenStream.La(1);
				if (_la==Colon) {
					{
					State = 1980; baseclause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassheadnameContext : ParserRuleContext {
		public ClassnameContext classname() {
			return GetRuleContext<ClassnameContext>(0);
		}
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public ClassheadnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classheadname; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterClassheadname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitClassheadname(this);
		}
	}

	[RuleVersion(0)]
	public ClassheadnameContext classheadname() {
		ClassheadnameContext _localctx = new ClassheadnameContext(Context, State);
		EnterRule(_localctx, 290, RULE_classheadname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1986;
			switch ( Interpreter.AdaptivePredict(TokenStream,241,Context) ) {
			case 1:
				{
				State = 1985; nestednamespecifier(0);
				}
				break;
			}
			State = 1988; classname();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassvirtspecifierContext : ParserRuleContext {
		public ITerminalNode Final() { return GetToken(CPP14Parser.Final, 0); }
		public ClassvirtspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classvirtspecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterClassvirtspecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitClassvirtspecifier(this);
		}
	}

	[RuleVersion(0)]
	public ClassvirtspecifierContext classvirtspecifier() {
		ClassvirtspecifierContext _localctx = new ClassvirtspecifierContext(Context, State);
		EnterRule(_localctx, 292, RULE_classvirtspecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1990; Match(Final);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClasskeyContext : ParserRuleContext {
		public ITerminalNode Class() { return GetToken(CPP14Parser.Class, 0); }
		public ITerminalNode Struct() { return GetToken(CPP14Parser.Struct, 0); }
		public ITerminalNode Union() { return GetToken(CPP14Parser.Union, 0); }
		public ClasskeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classkey; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterClasskey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitClasskey(this);
		}
	}

	[RuleVersion(0)]
	public ClasskeyContext classkey() {
		ClasskeyContext _localctx = new ClasskeyContext(Context, State);
		EnterRule(_localctx, 294, RULE_classkey);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1992;
			_la = TokenStream.La(1);
			if ( !(((((_la - 13)) & ~0x3f) == 0 && ((1L << (_la - 13)) & ((1L << (Class - 13)) | (1L << (Struct - 13)) | (1L << (Union - 13)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberspecificationContext : ParserRuleContext {
		public MemberdeclarationContext memberdeclaration() {
			return GetRuleContext<MemberdeclarationContext>(0);
		}
		public MemberspecificationContext memberspecification() {
			return GetRuleContext<MemberspecificationContext>(0);
		}
		public AccessspecifierContext accessspecifier() {
			return GetRuleContext<AccessspecifierContext>(0);
		}
		public MemberspecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberspecification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMemberspecification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMemberspecification(this);
		}
	}

	[RuleVersion(0)]
	public MemberspecificationContext memberspecification() {
		MemberspecificationContext _localctx = new MemberspecificationContext(Context, State);
		EnterRule(_localctx, 296, RULE_memberspecification);
		int _la;
		try {
			State = 2003;
			switch (TokenStream.La(1)) {
			case Alignas:
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Class:
			case Const:
			case Constexpr:
			case Decltype:
			case Double:
			case Enum:
			case Explicit:
			case Extern:
			case Float:
			case Friend:
			case Inline:
			case Int:
			case Long:
			case Mutable:
			case Operator:
			case Register:
			case Short:
			case Signed:
			case Static:
			case Static_assert:
			case Struct:
			case Template:
			case Thread_local:
			case Typedef:
			case Typename:
			case Union:
			case Unsigned:
			case Using:
			case Virtual:
			case Void:
			case Volatile:
			case Wchar:
			case LeftParen:
			case LeftBracket:
			case Star:
			case And:
			case Tilde:
			case AndAnd:
			case Colon:
			case Doublecolon:
			case Semi:
			case Ellipsis:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1994; memberdeclaration();
				State = 1996;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignas) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << Decltype) | (1L << Double) | (1L << Enum) | (1L << Explicit) | (1L << Extern) | (1L << Float) | (1L << Friend) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << Operator) | (1L << Private) | (1L << Protected) | (1L << Public) | (1L << Register) | (1L << Short) | (1L << Signed) | (1L << Static) | (1L << Static_assert) | (1L << Struct) | (1L << Template) | (1L << Thread_local))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (Typedef - 66)) | (1L << (Typename - 66)) | (1L << (Union - 66)) | (1L << (Unsigned - 66)) | (1L << (Using - 66)) | (1L << (Virtual - 66)) | (1L << (Void - 66)) | (1L << (Volatile - 66)) | (1L << (Wchar - 66)) | (1L << (LeftParen - 66)) | (1L << (LeftBracket - 66)) | (1L << (Star - 66)) | (1L << (And - 66)) | (1L << (Tilde - 66)) | (1L << (AndAnd - 66)) | (1L << (Colon - 66)) | (1L << (Doublecolon - 66)) | (1L << (Semi - 66)) | (1L << (Ellipsis - 66)) | (1L << (Identifier - 66)))) != 0)) {
					{
					State = 1995; memberspecification();
					}
				}

				}
				break;
			case Private:
			case Protected:
			case Public:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1998; accessspecifier();
				State = 1999; Match(Colon);
				State = 2001;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignas) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << Decltype) | (1L << Double) | (1L << Enum) | (1L << Explicit) | (1L << Extern) | (1L << Float) | (1L << Friend) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << Operator) | (1L << Private) | (1L << Protected) | (1L << Public) | (1L << Register) | (1L << Short) | (1L << Signed) | (1L << Static) | (1L << Static_assert) | (1L << Struct) | (1L << Template) | (1L << Thread_local))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (Typedef - 66)) | (1L << (Typename - 66)) | (1L << (Union - 66)) | (1L << (Unsigned - 66)) | (1L << (Using - 66)) | (1L << (Virtual - 66)) | (1L << (Void - 66)) | (1L << (Volatile - 66)) | (1L << (Wchar - 66)) | (1L << (LeftParen - 66)) | (1L << (LeftBracket - 66)) | (1L << (Star - 66)) | (1L << (And - 66)) | (1L << (Tilde - 66)) | (1L << (AndAnd - 66)) | (1L << (Colon - 66)) | (1L << (Doublecolon - 66)) | (1L << (Semi - 66)) | (1L << (Ellipsis - 66)) | (1L << (Identifier - 66)))) != 0)) {
					{
					State = 2000; memberspecification();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberdeclarationContext : ParserRuleContext {
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public DeclspecifierseqContext declspecifierseq() {
			return GetRuleContext<DeclspecifierseqContext>(0);
		}
		public MemberdeclaratorlistContext memberdeclaratorlist() {
			return GetRuleContext<MemberdeclaratorlistContext>(0);
		}
		public FunctiondefinitionContext functiondefinition() {
			return GetRuleContext<FunctiondefinitionContext>(0);
		}
		public UsingdeclarationContext usingdeclaration() {
			return GetRuleContext<UsingdeclarationContext>(0);
		}
		public Static_assertdeclarationContext static_assertdeclaration() {
			return GetRuleContext<Static_assertdeclarationContext>(0);
		}
		public TemplatedeclarationContext templatedeclaration() {
			return GetRuleContext<TemplatedeclarationContext>(0);
		}
		public AliasdeclarationContext aliasdeclaration() {
			return GetRuleContext<AliasdeclarationContext>(0);
		}
		public EmptydeclarationContext emptydeclaration() {
			return GetRuleContext<EmptydeclarationContext>(0);
		}
		public MemberdeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberdeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMemberdeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMemberdeclaration(this);
		}
	}

	[RuleVersion(0)]
	public MemberdeclarationContext memberdeclaration() {
		MemberdeclarationContext _localctx = new MemberdeclarationContext(Context, State);
		EnterRule(_localctx, 298, RULE_memberdeclaration);
		int _la;
		try {
			State = 2021;
			switch ( Interpreter.AdaptivePredict(TokenStream,248,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2006;
				switch ( Interpreter.AdaptivePredict(TokenStream,245,Context) ) {
				case 1:
					{
					State = 2005; attributespecifierseq(0);
					}
					break;
				}
				State = 2009;
				switch ( Interpreter.AdaptivePredict(TokenStream,246,Context) ) {
				case 1:
					{
					State = 2008; declspecifierseq();
					}
					break;
				}
				State = 2012;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignas) | (1L << Decltype) | (1L << Operator))) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (LeftParen - 77)) | (1L << (LeftBracket - 77)) | (1L << (Star - 77)) | (1L << (And - 77)) | (1L << (Tilde - 77)) | (1L << (AndAnd - 77)) | (1L << (Colon - 77)) | (1L << (Doublecolon - 77)) | (1L << (Ellipsis - 77)) | (1L << (Identifier - 77)))) != 0)) {
					{
					State = 2011; memberdeclaratorlist(0);
					}
				}

				State = 2014; Match(Semi);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2015; functiondefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2016; usingdeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2017; static_assertdeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2018; templatedeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2019; aliasdeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2020; emptydeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberdeclaratorlistContext : ParserRuleContext {
		public MemberdeclaratorContext memberdeclarator() {
			return GetRuleContext<MemberdeclaratorContext>(0);
		}
		public MemberdeclaratorlistContext memberdeclaratorlist() {
			return GetRuleContext<MemberdeclaratorlistContext>(0);
		}
		public MemberdeclaratorlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberdeclaratorlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMemberdeclaratorlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMemberdeclaratorlist(this);
		}
	}

	[RuleVersion(0)]
	public MemberdeclaratorlistContext memberdeclaratorlist() {
		return memberdeclaratorlist(0);
	}

	private MemberdeclaratorlistContext memberdeclaratorlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MemberdeclaratorlistContext _localctx = new MemberdeclaratorlistContext(Context, _parentState);
		MemberdeclaratorlistContext _prevctx = _localctx;
		int _startState = 300;
		EnterRecursionRule(_localctx, 300, RULE_memberdeclaratorlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2024; memberdeclarator();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2031;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,249,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MemberdeclaratorlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_memberdeclaratorlist);
					State = 2026;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2027; Match(Comma);
					State = 2028; memberdeclarator();
					}
					} 
				}
				State = 2033;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,249,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MemberdeclaratorContext : ParserRuleContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public VirtspecifierseqContext virtspecifierseq() {
			return GetRuleContext<VirtspecifierseqContext>(0);
		}
		public PurespecifierContext purespecifier() {
			return GetRuleContext<PurespecifierContext>(0);
		}
		public BraceorequalinitializerContext braceorequalinitializer() {
			return GetRuleContext<BraceorequalinitializerContext>(0);
		}
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public MemberdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberdeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMemberdeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMemberdeclarator(this);
		}
	}

	[RuleVersion(0)]
	public MemberdeclaratorContext memberdeclarator() {
		MemberdeclaratorContext _localctx = new MemberdeclaratorContext(Context, State);
		EnterRule(_localctx, 302, RULE_memberdeclarator);
		int _la;
		try {
			State = 2053;
			switch ( Interpreter.AdaptivePredict(TokenStream,255,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2034; declarator();
				State = 2036;
				switch ( Interpreter.AdaptivePredict(TokenStream,250,Context) ) {
				case 1:
					{
					State = 2035; virtspecifierseq(0);
					}
					break;
				}
				State = 2039;
				switch ( Interpreter.AdaptivePredict(TokenStream,251,Context) ) {
				case 1:
					{
					State = 2038; purespecifier();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2041; declarator();
				State = 2043;
				switch ( Interpreter.AdaptivePredict(TokenStream,252,Context) ) {
				case 1:
					{
					State = 2042; braceorequalinitializer();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2046;
				_la = TokenStream.La(1);
				if (_la==Identifier) {
					{
					State = 2045; Match(Identifier);
					}
				}

				State = 2049;
				_la = TokenStream.La(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 2048; attributespecifierseq(0);
					}
				}

				State = 2051; Match(Colon);
				State = 2052; constantexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VirtspecifierseqContext : ParserRuleContext {
		public VirtspecifierContext virtspecifier() {
			return GetRuleContext<VirtspecifierContext>(0);
		}
		public VirtspecifierseqContext virtspecifierseq() {
			return GetRuleContext<VirtspecifierseqContext>(0);
		}
		public VirtspecifierseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_virtspecifierseq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterVirtspecifierseq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitVirtspecifierseq(this);
		}
	}

	[RuleVersion(0)]
	public VirtspecifierseqContext virtspecifierseq() {
		return virtspecifierseq(0);
	}

	private VirtspecifierseqContext virtspecifierseq(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		VirtspecifierseqContext _localctx = new VirtspecifierseqContext(Context, _parentState);
		VirtspecifierseqContext _prevctx = _localctx;
		int _startState = 304;
		EnterRecursionRule(_localctx, 304, RULE_virtspecifierseq, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2056; virtspecifier();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2062;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,256,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new VirtspecifierseqContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_virtspecifierseq);
					State = 2058;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2059; virtspecifier();
					}
					} 
				}
				State = 2064;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,256,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VirtspecifierContext : ParserRuleContext {
		public ITerminalNode Override() { return GetToken(CPP14Parser.Override, 0); }
		public ITerminalNode Final() { return GetToken(CPP14Parser.Final, 0); }
		public VirtspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_virtspecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterVirtspecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitVirtspecifier(this);
		}
	}

	[RuleVersion(0)]
	public VirtspecifierContext virtspecifier() {
		VirtspecifierContext _localctx = new VirtspecifierContext(Context, State);
		EnterRule(_localctx, 306, RULE_virtspecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2065;
			_la = TokenStream.La(1);
			if ( !(_la==Final || _la==Override) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PurespecifierContext : ParserRuleContext {
		public IToken val;
		public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		public ITerminalNode Octalliteral() { return GetToken(CPP14Parser.Octalliteral, 0); }
		public PurespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_purespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPurespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPurespecifier(this);
		}
	}

	[RuleVersion(0)]
	public PurespecifierContext purespecifier() {
		PurespecifierContext _localctx = new PurespecifierContext(Context, State);
		EnterRule(_localctx, 308, RULE_purespecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2067; Match(Assign);
			State = 2068; _localctx.val = Match(Octalliteral);
			if((_localctx.val!=null?_localctx.val.Text:null).CompareTo("0")!=0) throw new InputMismatchException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseclauseContext : ParserRuleContext {
		public BasespecifierlistContext basespecifierlist() {
			return GetRuleContext<BasespecifierlistContext>(0);
		}
		public BaseclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseclause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBaseclause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBaseclause(this);
		}
	}

	[RuleVersion(0)]
	public BaseclauseContext baseclause() {
		BaseclauseContext _localctx = new BaseclauseContext(Context, State);
		EnterRule(_localctx, 310, RULE_baseclause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2071; Match(Colon);
			State = 2072; basespecifierlist(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasespecifierlistContext : ParserRuleContext {
		public BasespecifierContext basespecifier() {
			return GetRuleContext<BasespecifierContext>(0);
		}
		public BasespecifierlistContext basespecifierlist() {
			return GetRuleContext<BasespecifierlistContext>(0);
		}
		public BasespecifierlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basespecifierlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBasespecifierlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBasespecifierlist(this);
		}
	}

	[RuleVersion(0)]
	public BasespecifierlistContext basespecifierlist() {
		return basespecifierlist(0);
	}

	private BasespecifierlistContext basespecifierlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BasespecifierlistContext _localctx = new BasespecifierlistContext(Context, _parentState);
		BasespecifierlistContext _prevctx = _localctx;
		int _startState = 312;
		EnterRecursionRule(_localctx, 312, RULE_basespecifierlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2075; basespecifier();
			State = 2077;
			switch ( Interpreter.AdaptivePredict(TokenStream,257,Context) ) {
			case 1:
				{
				State = 2076; Match(Ellipsis);
				}
				break;
			}
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2087;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,259,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BasespecifierlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_basespecifierlist);
					State = 2079;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2080; Match(Comma);
					State = 2081; basespecifier();
					State = 2083;
					switch ( Interpreter.AdaptivePredict(TokenStream,258,Context) ) {
					case 1:
						{
						State = 2082; Match(Ellipsis);
						}
						break;
					}
					}
					} 
				}
				State = 2089;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,259,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BasespecifierContext : ParserRuleContext {
		public BasetypespecifierContext basetypespecifier() {
			return GetRuleContext<BasetypespecifierContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public ITerminalNode Virtual() { return GetToken(CPP14Parser.Virtual, 0); }
		public AccessspecifierContext accessspecifier() {
			return GetRuleContext<AccessspecifierContext>(0);
		}
		public BasespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBasespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBasespecifier(this);
		}
	}

	[RuleVersion(0)]
	public BasespecifierContext basespecifier() {
		BasespecifierContext _localctx = new BasespecifierContext(Context, State);
		EnterRule(_localctx, 314, RULE_basespecifier);
		int _la;
		try {
			State = 2111;
			switch ( Interpreter.AdaptivePredict(TokenStream,265,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2091;
				_la = TokenStream.La(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 2090; attributespecifierseq(0);
					}
				}

				State = 2093; basetypespecifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2095;
				_la = TokenStream.La(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 2094; attributespecifierseq(0);
					}
				}

				State = 2097; Match(Virtual);
				State = 2099;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Private) | (1L << Protected) | (1L << Public))) != 0)) {
					{
					State = 2098; accessspecifier();
					}
				}

				State = 2101; basetypespecifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2103;
				_la = TokenStream.La(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 2102; attributespecifierseq(0);
					}
				}

				State = 2105; accessspecifier();
				State = 2107;
				_la = TokenStream.La(1);
				if (_la==Virtual) {
					{
					State = 2106; Match(Virtual);
					}
				}

				State = 2109; basetypespecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassordecltypeContext : ParserRuleContext {
		public ClassnameContext classname() {
			return GetRuleContext<ClassnameContext>(0);
		}
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public DecltypespecifierContext decltypespecifier() {
			return GetRuleContext<DecltypespecifierContext>(0);
		}
		public ClassordecltypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classordecltype; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterClassordecltype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitClassordecltype(this);
		}
	}

	[RuleVersion(0)]
	public ClassordecltypeContext classordecltype() {
		ClassordecltypeContext _localctx = new ClassordecltypeContext(Context, State);
		EnterRule(_localctx, 316, RULE_classordecltype);
		try {
			State = 2118;
			switch ( Interpreter.AdaptivePredict(TokenStream,267,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2114;
				switch ( Interpreter.AdaptivePredict(TokenStream,266,Context) ) {
				case 1:
					{
					State = 2113; nestednamespecifier(0);
					}
					break;
				}
				State = 2116; classname();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2117; decltypespecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasetypespecifierContext : ParserRuleContext {
		public ClassordecltypeContext classordecltype() {
			return GetRuleContext<ClassordecltypeContext>(0);
		}
		public BasetypespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basetypespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBasetypespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBasetypespecifier(this);
		}
	}

	[RuleVersion(0)]
	public BasetypespecifierContext basetypespecifier() {
		BasetypespecifierContext _localctx = new BasetypespecifierContext(Context, State);
		EnterRule(_localctx, 318, RULE_basetypespecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2120; classordecltype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessspecifierContext : ParserRuleContext {
		public ITerminalNode Private() { return GetToken(CPP14Parser.Private, 0); }
		public ITerminalNode Protected() { return GetToken(CPP14Parser.Protected, 0); }
		public ITerminalNode Public() { return GetToken(CPP14Parser.Public, 0); }
		public AccessspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessspecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAccessspecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAccessspecifier(this);
		}
	}

	[RuleVersion(0)]
	public AccessspecifierContext accessspecifier() {
		AccessspecifierContext _localctx = new AccessspecifierContext(Context, State);
		EnterRule(_localctx, 320, RULE_accessspecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2122;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Private) | (1L << Protected) | (1L << Public))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionfunctionidContext : ParserRuleContext {
		public ITerminalNode Operator() { return GetToken(CPP14Parser.Operator, 0); }
		public ConversiontypeidContext conversiontypeid() {
			return GetRuleContext<ConversiontypeidContext>(0);
		}
		public ConversionfunctionidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversionfunctionid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterConversionfunctionid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitConversionfunctionid(this);
		}
	}

	[RuleVersion(0)]
	public ConversionfunctionidContext conversionfunctionid() {
		ConversionfunctionidContext _localctx = new ConversionfunctionidContext(Context, State);
		EnterRule(_localctx, 322, RULE_conversionfunctionid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2124; Match(Operator);
			State = 2125; conversiontypeid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversiontypeidContext : ParserRuleContext {
		public TypespecifierseqContext typespecifierseq() {
			return GetRuleContext<TypespecifierseqContext>(0);
		}
		public ConversiondeclaratorContext conversiondeclarator() {
			return GetRuleContext<ConversiondeclaratorContext>(0);
		}
		public ConversiontypeidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversiontypeid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterConversiontypeid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitConversiontypeid(this);
		}
	}

	[RuleVersion(0)]
	public ConversiontypeidContext conversiontypeid() {
		ConversiontypeidContext _localctx = new ConversiontypeidContext(Context, State);
		EnterRule(_localctx, 324, RULE_conversiontypeid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2127; typespecifierseq();
			State = 2129;
			switch ( Interpreter.AdaptivePredict(TokenStream,268,Context) ) {
			case 1:
				{
				State = 2128; conversiondeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversiondeclaratorContext : ParserRuleContext {
		public PtroperatorContext ptroperator() {
			return GetRuleContext<PtroperatorContext>(0);
		}
		public ConversiondeclaratorContext conversiondeclarator() {
			return GetRuleContext<ConversiondeclaratorContext>(0);
		}
		public ConversiondeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversiondeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterConversiondeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitConversiondeclarator(this);
		}
	}

	[RuleVersion(0)]
	public ConversiondeclaratorContext conversiondeclarator() {
		ConversiondeclaratorContext _localctx = new ConversiondeclaratorContext(Context, State);
		EnterRule(_localctx, 326, RULE_conversiondeclarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2131; ptroperator();
			State = 2133;
			switch ( Interpreter.AdaptivePredict(TokenStream,269,Context) ) {
			case 1:
				{
				State = 2132; conversiondeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CtorinitializerContext : ParserRuleContext {
		public MeminitializerlistContext meminitializerlist() {
			return GetRuleContext<MeminitializerlistContext>(0);
		}
		public CtorinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ctorinitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCtorinitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCtorinitializer(this);
		}
	}

	[RuleVersion(0)]
	public CtorinitializerContext ctorinitializer() {
		CtorinitializerContext _localctx = new CtorinitializerContext(Context, State);
		EnterRule(_localctx, 328, RULE_ctorinitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2135; Match(Colon);
			State = 2136; meminitializerlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MeminitializerlistContext : ParserRuleContext {
		public MeminitializerContext meminitializer() {
			return GetRuleContext<MeminitializerContext>(0);
		}
		public MeminitializerlistContext meminitializerlist() {
			return GetRuleContext<MeminitializerlistContext>(0);
		}
		public MeminitializerlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meminitializerlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMeminitializerlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMeminitializerlist(this);
		}
	}

	[RuleVersion(0)]
	public MeminitializerlistContext meminitializerlist() {
		MeminitializerlistContext _localctx = new MeminitializerlistContext(Context, State);
		EnterRule(_localctx, 330, RULE_meminitializerlist);
		int _la;
		try {
			State = 2149;
			switch ( Interpreter.AdaptivePredict(TokenStream,272,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2138; meminitializer();
				State = 2140;
				_la = TokenStream.La(1);
				if (_la==Ellipsis) {
					{
					State = 2139; Match(Ellipsis);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2142; meminitializer();
				State = 2144;
				_la = TokenStream.La(1);
				if (_la==Ellipsis) {
					{
					State = 2143; Match(Ellipsis);
					}
				}

				State = 2146; Match(Comma);
				State = 2147; meminitializerlist();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MeminitializerContext : ParserRuleContext {
		public MeminitializeridContext meminitializerid() {
			return GetRuleContext<MeminitializeridContext>(0);
		}
		public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		public BracedinitlistContext bracedinitlist() {
			return GetRuleContext<BracedinitlistContext>(0);
		}
		public MeminitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meminitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMeminitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMeminitializer(this);
		}
	}

	[RuleVersion(0)]
	public MeminitializerContext meminitializer() {
		MeminitializerContext _localctx = new MeminitializerContext(Context, State);
		EnterRule(_localctx, 332, RULE_meminitializer);
		int _la;
		try {
			State = 2161;
			switch ( Interpreter.AdaptivePredict(TokenStream,274,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2151; meminitializerid();
				State = 2152; Match(LeftParen);
				State = 2154;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof) | (1L << Static_cast) | (1L << This) | (1L << Throw))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (True - 64)) | (1L << (Typeid - 64)) | (1L << (Typename - 64)) | (1L << (Unsigned - 64)) | (1L << (Void - 64)) | (1L << (Wchar - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (LeftBrace - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Or - 64)) | (1L << (Tilde - 64)) | (1L << (Not - 64)) | (1L << (PlusPlus - 64)) | (1L << (MinusMinus - 64)) | (1L << (Doublecolon - 64)) | (1L << (Identifier - 64)) | (1L << (Integerliteral - 64)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (Characterliteral - 131)) | (1L << (Floatingliteral - 131)) | (1L << (Stringliteral - 131)) | (1L << (Userdefinedintegerliteral - 131)) | (1L << (Userdefinedfloatingliteral - 131)) | (1L << (Userdefinedstringliteral - 131)) | (1L << (Userdefinedcharacterliteral - 131)))) != 0)) {
					{
					State = 2153; expressionlist();
					}
				}

				State = 2156; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2158; meminitializerid();
				State = 2159; bracedinitlist();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MeminitializeridContext : ParserRuleContext {
		public ClassordecltypeContext classordecltype() {
			return GetRuleContext<ClassordecltypeContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public MeminitializeridContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meminitializerid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMeminitializerid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMeminitializerid(this);
		}
	}

	[RuleVersion(0)]
	public MeminitializeridContext meminitializerid() {
		MeminitializeridContext _localctx = new MeminitializeridContext(Context, State);
		EnterRule(_localctx, 334, RULE_meminitializerid);
		try {
			State = 2165;
			switch ( Interpreter.AdaptivePredict(TokenStream,275,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2163; classordecltype();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2164; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorfunctionidContext : ParserRuleContext {
		public ITerminalNode Operator() { return GetToken(CPP14Parser.Operator, 0); }
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public OperatorfunctionidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorfunctionid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterOperatorfunctionid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitOperatorfunctionid(this);
		}
	}

	[RuleVersion(0)]
	public OperatorfunctionidContext operatorfunctionid() {
		OperatorfunctionidContext _localctx = new OperatorfunctionidContext(Context, State);
		EnterRule(_localctx, 336, RULE_operatorfunctionid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2167; Match(Operator);
			State = 2168; @operator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteraloperatoridContext : ParserRuleContext {
		public ITerminalNode Operator() { return GetToken(CPP14Parser.Operator, 0); }
		public ITerminalNode Stringliteral() { return GetToken(CPP14Parser.Stringliteral, 0); }
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public ITerminalNode Userdefinedstringliteral() { return GetToken(CPP14Parser.Userdefinedstringliteral, 0); }
		public LiteraloperatoridContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literaloperatorid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLiteraloperatorid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLiteraloperatorid(this);
		}
	}

	[RuleVersion(0)]
	public LiteraloperatoridContext literaloperatorid() {
		LiteraloperatoridContext _localctx = new LiteraloperatoridContext(Context, State);
		EnterRule(_localctx, 338, RULE_literaloperatorid);
		try {
			State = 2175;
			switch ( Interpreter.AdaptivePredict(TokenStream,276,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2170; Match(Operator);
				State = 2171; Match(Stringliteral);
				State = 2172; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2173; Match(Operator);
				State = 2174; Match(Userdefinedstringliteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplatedeclarationContext : ParserRuleContext {
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public TemplateparameterlistContext templateparameterlist() {
			return GetRuleContext<TemplateparameterlistContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public TemplatedeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templatedeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTemplatedeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTemplatedeclaration(this);
		}
	}

	[RuleVersion(0)]
	public TemplatedeclarationContext templatedeclaration() {
		TemplatedeclarationContext _localctx = new TemplatedeclarationContext(Context, State);
		EnterRule(_localctx, 340, RULE_templatedeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2177; Match(Template);
			State = 2178; Match(Less);
			State = 2179; templateparameterlist(0);
			State = 2180; Match(Greater);
			State = 2181; declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateparameterlistContext : ParserRuleContext {
		public TemplateparameterContext templateparameter() {
			return GetRuleContext<TemplateparameterContext>(0);
		}
		public TemplateparameterlistContext templateparameterlist() {
			return GetRuleContext<TemplateparameterlistContext>(0);
		}
		public TemplateparameterlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateparameterlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTemplateparameterlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTemplateparameterlist(this);
		}
	}

	[RuleVersion(0)]
	public TemplateparameterlistContext templateparameterlist() {
		return templateparameterlist(0);
	}

	private TemplateparameterlistContext templateparameterlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TemplateparameterlistContext _localctx = new TemplateparameterlistContext(Context, _parentState);
		TemplateparameterlistContext _prevctx = _localctx;
		int _startState = 342;
		EnterRecursionRule(_localctx, 342, RULE_templateparameterlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2184; templateparameter();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2191;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,277,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TemplateparameterlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_templateparameterlist);
					State = 2186;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2187; Match(Comma);
					State = 2188; templateparameter();
					}
					} 
				}
				State = 2193;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,277,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TemplateparameterContext : ParserRuleContext {
		public TypeparameterContext typeparameter() {
			return GetRuleContext<TypeparameterContext>(0);
		}
		public ParameterdeclarationContext parameterdeclaration() {
			return GetRuleContext<ParameterdeclarationContext>(0);
		}
		public TemplateparameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateparameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTemplateparameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTemplateparameter(this);
		}
	}

	[RuleVersion(0)]
	public TemplateparameterContext templateparameter() {
		TemplateparameterContext _localctx = new TemplateparameterContext(Context, State);
		EnterRule(_localctx, 344, RULE_templateparameter);
		try {
			State = 2196;
			switch ( Interpreter.AdaptivePredict(TokenStream,278,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2194; typeparameter();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2195; parameterdeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeparameterContext : ParserRuleContext {
		public ITerminalNode Class() { return GetToken(CPP14Parser.Class, 0); }
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public TypeidContext typeid() {
			return GetRuleContext<TypeidContext>(0);
		}
		public ITerminalNode Typename() { return GetToken(CPP14Parser.Typename, 0); }
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public TemplateparameterlistContext templateparameterlist() {
			return GetRuleContext<TemplateparameterlistContext>(0);
		}
		public IdexpressionContext idexpression() {
			return GetRuleContext<IdexpressionContext>(0);
		}
		public TypeparameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeparameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTypeparameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTypeparameter(this);
		}
	}

	[RuleVersion(0)]
	public TypeparameterContext typeparameter() {
		TypeparameterContext _localctx = new TypeparameterContext(Context, State);
		EnterRule(_localctx, 346, RULE_typeparameter);
		int _la;
		try {
			State = 2246;
			switch ( Interpreter.AdaptivePredict(TokenStream,288,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2198; Match(Class);
				State = 2200;
				switch ( Interpreter.AdaptivePredict(TokenStream,279,Context) ) {
				case 1:
					{
					State = 2199; Match(Ellipsis);
					}
					break;
				}
				State = 2203;
				switch ( Interpreter.AdaptivePredict(TokenStream,280,Context) ) {
				case 1:
					{
					State = 2202; Match(Identifier);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2205; Match(Class);
				State = 2207;
				_la = TokenStream.La(1);
				if (_la==Identifier) {
					{
					State = 2206; Match(Identifier);
					}
				}

				State = 2209; Match(Assign);
				State = 2210; typeid();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2211; Match(Typename);
				State = 2213;
				switch ( Interpreter.AdaptivePredict(TokenStream,282,Context) ) {
				case 1:
					{
					State = 2212; Match(Ellipsis);
					}
					break;
				}
				State = 2216;
				switch ( Interpreter.AdaptivePredict(TokenStream,283,Context) ) {
				case 1:
					{
					State = 2215; Match(Identifier);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2218; Match(Typename);
				State = 2220;
				_la = TokenStream.La(1);
				if (_la==Identifier) {
					{
					State = 2219; Match(Identifier);
					}
				}

				State = 2222; Match(Assign);
				State = 2223; typeid();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2224; Match(Template);
				State = 2225; Match(Less);
				State = 2226; templateparameterlist(0);
				State = 2227; Match(Greater);
				State = 2228; Match(Class);
				State = 2230;
				switch ( Interpreter.AdaptivePredict(TokenStream,285,Context) ) {
				case 1:
					{
					State = 2229; Match(Ellipsis);
					}
					break;
				}
				State = 2233;
				switch ( Interpreter.AdaptivePredict(TokenStream,286,Context) ) {
				case 1:
					{
					State = 2232; Match(Identifier);
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2235; Match(Template);
				State = 2236; Match(Less);
				State = 2237; templateparameterlist(0);
				State = 2238; Match(Greater);
				State = 2239; Match(Class);
				State = 2241;
				_la = TokenStream.La(1);
				if (_la==Identifier) {
					{
					State = 2240; Match(Identifier);
					}
				}

				State = 2243; Match(Assign);
				State = 2244; idexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpletemplateidContext : ParserRuleContext {
		public TemplatenameContext templatename() {
			return GetRuleContext<TemplatenameContext>(0);
		}
		public TemplateargumentlistContext templateargumentlist() {
			return GetRuleContext<TemplateargumentlistContext>(0);
		}
		public SimpletemplateidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpletemplateid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterSimpletemplateid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitSimpletemplateid(this);
		}
	}

	[RuleVersion(0)]
	public SimpletemplateidContext simpletemplateid() {
		SimpletemplateidContext _localctx = new SimpletemplateidContext(Context, State);
		EnterRule(_localctx, 348, RULE_simpletemplateid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2248; templatename();
			State = 2249; Match(Less);
			State = 2251;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Enum) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof) | (1L << Static_cast) | (1L << Struct) | (1L << This))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (True - 64)) | (1L << (Typeid - 64)) | (1L << (Typename - 64)) | (1L << (Union - 64)) | (1L << (Unsigned - 64)) | (1L << (Void - 64)) | (1L << (Volatile - 64)) | (1L << (Wchar - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Or - 64)) | (1L << (Tilde - 64)) | (1L << (Not - 64)) | (1L << (PlusPlus - 64)) | (1L << (MinusMinus - 64)) | (1L << (Doublecolon - 64)) | (1L << (Identifier - 64)) | (1L << (Integerliteral - 64)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (Characterliteral - 131)) | (1L << (Floatingliteral - 131)) | (1L << (Stringliteral - 131)) | (1L << (Userdefinedintegerliteral - 131)) | (1L << (Userdefinedfloatingliteral - 131)) | (1L << (Userdefinedstringliteral - 131)) | (1L << (Userdefinedcharacterliteral - 131)))) != 0)) {
				{
				State = 2250; templateargumentlist(0);
				}
			}

			State = 2253; Match(Greater);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateidContext : ParserRuleContext {
		public SimpletemplateidContext simpletemplateid() {
			return GetRuleContext<SimpletemplateidContext>(0);
		}
		public OperatorfunctionidContext operatorfunctionid() {
			return GetRuleContext<OperatorfunctionidContext>(0);
		}
		public TemplateargumentlistContext templateargumentlist() {
			return GetRuleContext<TemplateargumentlistContext>(0);
		}
		public LiteraloperatoridContext literaloperatorid() {
			return GetRuleContext<LiteraloperatoridContext>(0);
		}
		public TemplateidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTemplateid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTemplateid(this);
		}
	}

	[RuleVersion(0)]
	public TemplateidContext templateid() {
		TemplateidContext _localctx = new TemplateidContext(Context, State);
		EnterRule(_localctx, 350, RULE_templateid);
		int _la;
		try {
			State = 2270;
			switch ( Interpreter.AdaptivePredict(TokenStream,292,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2255; simpletemplateid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2256; operatorfunctionid();
				State = 2257; Match(Less);
				State = 2259;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Enum) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof) | (1L << Static_cast) | (1L << Struct) | (1L << This))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (True - 64)) | (1L << (Typeid - 64)) | (1L << (Typename - 64)) | (1L << (Union - 64)) | (1L << (Unsigned - 64)) | (1L << (Void - 64)) | (1L << (Volatile - 64)) | (1L << (Wchar - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Or - 64)) | (1L << (Tilde - 64)) | (1L << (Not - 64)) | (1L << (PlusPlus - 64)) | (1L << (MinusMinus - 64)) | (1L << (Doublecolon - 64)) | (1L << (Identifier - 64)) | (1L << (Integerliteral - 64)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (Characterliteral - 131)) | (1L << (Floatingliteral - 131)) | (1L << (Stringliteral - 131)) | (1L << (Userdefinedintegerliteral - 131)) | (1L << (Userdefinedfloatingliteral - 131)) | (1L << (Userdefinedstringliteral - 131)) | (1L << (Userdefinedcharacterliteral - 131)))) != 0)) {
					{
					State = 2258; templateargumentlist(0);
					}
				}

				State = 2261; Match(Greater);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2263; literaloperatorid();
				State = 2264; Match(Less);
				State = 2266;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Alignof) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Const_cast) | (1L << Decltype) | (1L << Delete) | (1L << Double) | (1L << Dynamic_cast) | (1L << Enum) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << Noexcept) | (1L << Nullptr) | (1L << Operator) | (1L << Reinterpret_cast) | (1L << Short) | (1L << Signed) | (1L << Sizeof) | (1L << Static_cast) | (1L << Struct) | (1L << This))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (True - 64)) | (1L << (Typeid - 64)) | (1L << (Typename - 64)) | (1L << (Union - 64)) | (1L << (Unsigned - 64)) | (1L << (Void - 64)) | (1L << (Volatile - 64)) | (1L << (Wchar - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Or - 64)) | (1L << (Tilde - 64)) | (1L << (Not - 64)) | (1L << (PlusPlus - 64)) | (1L << (MinusMinus - 64)) | (1L << (Doublecolon - 64)) | (1L << (Identifier - 64)) | (1L << (Integerliteral - 64)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (Characterliteral - 131)) | (1L << (Floatingliteral - 131)) | (1L << (Stringliteral - 131)) | (1L << (Userdefinedintegerliteral - 131)) | (1L << (Userdefinedfloatingliteral - 131)) | (1L << (Userdefinedstringliteral - 131)) | (1L << (Userdefinedcharacterliteral - 131)))) != 0)) {
					{
					State = 2265; templateargumentlist(0);
					}
				}

				State = 2268; Match(Greater);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplatenameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public TemplatenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templatename; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTemplatename(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTemplatename(this);
		}
	}

	[RuleVersion(0)]
	public TemplatenameContext templatename() {
		TemplatenameContext _localctx = new TemplatenameContext(Context, State);
		EnterRule(_localctx, 352, RULE_templatename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2272; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateargumentlistContext : ParserRuleContext {
		public TemplateargumentContext templateargument() {
			return GetRuleContext<TemplateargumentContext>(0);
		}
		public TemplateargumentlistContext templateargumentlist() {
			return GetRuleContext<TemplateargumentlistContext>(0);
		}
		public TemplateargumentlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateargumentlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTemplateargumentlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTemplateargumentlist(this);
		}
	}

	[RuleVersion(0)]
	public TemplateargumentlistContext templateargumentlist() {
		return templateargumentlist(0);
	}

	private TemplateargumentlistContext templateargumentlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TemplateargumentlistContext _localctx = new TemplateargumentlistContext(Context, _parentState);
		TemplateargumentlistContext _prevctx = _localctx;
		int _startState = 354;
		EnterRecursionRule(_localctx, 354, RULE_templateargumentlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2275; templateargument();
			State = 2277;
			switch ( Interpreter.AdaptivePredict(TokenStream,293,Context) ) {
			case 1:
				{
				State = 2276; Match(Ellipsis);
				}
				break;
			}
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2287;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,295,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TemplateargumentlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_templateargumentlist);
					State = 2279;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2280; Match(Comma);
					State = 2281; templateargument();
					State = 2283;
					switch ( Interpreter.AdaptivePredict(TokenStream,294,Context) ) {
					case 1:
						{
						State = 2282; Match(Ellipsis);
						}
						break;
					}
					}
					} 
				}
				State = 2289;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,295,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TemplateargumentContext : ParserRuleContext {
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public TypeidContext typeid() {
			return GetRuleContext<TypeidContext>(0);
		}
		public IdexpressionContext idexpression() {
			return GetRuleContext<IdexpressionContext>(0);
		}
		public TemplateargumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateargument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTemplateargument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTemplateargument(this);
		}
	}

	[RuleVersion(0)]
	public TemplateargumentContext templateargument() {
		TemplateargumentContext _localctx = new TemplateargumentContext(Context, State);
		EnterRule(_localctx, 356, RULE_templateargument);
		try {
			State = 2293;
			switch ( Interpreter.AdaptivePredict(TokenStream,296,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2290; constantexpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2291; typeid();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2292; idexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypenamespecifierContext : ParserRuleContext {
		public ITerminalNode Typename() { return GetToken(CPP14Parser.Typename, 0); }
		public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public SimpletemplateidContext simpletemplateid() {
			return GetRuleContext<SimpletemplateidContext>(0);
		}
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public TypenamespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typenamespecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTypenamespecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTypenamespecifier(this);
		}
	}

	[RuleVersion(0)]
	public TypenamespecifierContext typenamespecifier() {
		TypenamespecifierContext _localctx = new TypenamespecifierContext(Context, State);
		EnterRule(_localctx, 358, RULE_typenamespecifier);
		int _la;
		try {
			State = 2306;
			switch ( Interpreter.AdaptivePredict(TokenStream,298,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2295; Match(Typename);
				State = 2296; nestednamespecifier(0);
				State = 2297; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2299; Match(Typename);
				State = 2300; nestednamespecifier(0);
				State = 2302;
				_la = TokenStream.La(1);
				if (_la==Template) {
					{
					State = 2301; Match(Template);
					}
				}

				State = 2304; simpletemplateid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitinstantiationContext : ParserRuleContext {
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public ITerminalNode Extern() { return GetToken(CPP14Parser.Extern, 0); }
		public ExplicitinstantiationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitinstantiation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExplicitinstantiation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExplicitinstantiation(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitinstantiationContext explicitinstantiation() {
		ExplicitinstantiationContext _localctx = new ExplicitinstantiationContext(Context, State);
		EnterRule(_localctx, 360, RULE_explicitinstantiation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2309;
			_la = TokenStream.La(1);
			if (_la==Extern) {
				{
				State = 2308; Match(Extern);
				}
			}

			State = 2311; Match(Template);
			State = 2312; declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitspecializationContext : ParserRuleContext {
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public ExplicitspecializationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitspecialization; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExplicitspecialization(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExplicitspecialization(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitspecializationContext explicitspecialization() {
		ExplicitspecializationContext _localctx = new ExplicitspecializationContext(Context, State);
		EnterRule(_localctx, 362, RULE_explicitspecialization);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2314; Match(Template);
			State = 2315; Match(Less);
			State = 2316; Match(Greater);
			State = 2317; declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryblockContext : ParserRuleContext {
		public ITerminalNode Try() { return GetToken(CPP14Parser.Try, 0); }
		public CompoundstatementContext compoundstatement() {
			return GetRuleContext<CompoundstatementContext>(0);
		}
		public HandlerseqContext handlerseq() {
			return GetRuleContext<HandlerseqContext>(0);
		}
		public TryblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryblock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTryblock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTryblock(this);
		}
	}

	[RuleVersion(0)]
	public TryblockContext tryblock() {
		TryblockContext _localctx = new TryblockContext(Context, State);
		EnterRule(_localctx, 364, RULE_tryblock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2319; Match(Try);
			State = 2320; compoundstatement();
			State = 2321; handlerseq();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiontryblockContext : ParserRuleContext {
		public ITerminalNode Try() { return GetToken(CPP14Parser.Try, 0); }
		public CompoundstatementContext compoundstatement() {
			return GetRuleContext<CompoundstatementContext>(0);
		}
		public HandlerseqContext handlerseq() {
			return GetRuleContext<HandlerseqContext>(0);
		}
		public CtorinitializerContext ctorinitializer() {
			return GetRuleContext<CtorinitializerContext>(0);
		}
		public FunctiontryblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiontryblock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterFunctiontryblock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitFunctiontryblock(this);
		}
	}

	[RuleVersion(0)]
	public FunctiontryblockContext functiontryblock() {
		FunctiontryblockContext _localctx = new FunctiontryblockContext(Context, State);
		EnterRule(_localctx, 366, RULE_functiontryblock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2323; Match(Try);
			State = 2325;
			_la = TokenStream.La(1);
			if (_la==Colon) {
				{
				State = 2324; ctorinitializer();
				}
			}

			State = 2327; compoundstatement();
			State = 2328; handlerseq();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerseqContext : ParserRuleContext {
		public HandlerContext handler() {
			return GetRuleContext<HandlerContext>(0);
		}
		public HandlerseqContext handlerseq() {
			return GetRuleContext<HandlerseqContext>(0);
		}
		public HandlerseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerseq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterHandlerseq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitHandlerseq(this);
		}
	}

	[RuleVersion(0)]
	public HandlerseqContext handlerseq() {
		HandlerseqContext _localctx = new HandlerseqContext(Context, State);
		EnterRule(_localctx, 368, RULE_handlerseq);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2330; handler();
			State = 2332;
			switch ( Interpreter.AdaptivePredict(TokenStream,301,Context) ) {
			case 1:
				{
				State = 2331; handlerseq();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerContext : ParserRuleContext {
		public ITerminalNode Catch() { return GetToken(CPP14Parser.Catch, 0); }
		public ExceptiondeclarationContext exceptiondeclaration() {
			return GetRuleContext<ExceptiondeclarationContext>(0);
		}
		public CompoundstatementContext compoundstatement() {
			return GetRuleContext<CompoundstatementContext>(0);
		}
		public HandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handler; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterHandler(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitHandler(this);
		}
	}

	[RuleVersion(0)]
	public HandlerContext handler() {
		HandlerContext _localctx = new HandlerContext(Context, State);
		EnterRule(_localctx, 370, RULE_handler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2334; Match(Catch);
			State = 2335; Match(LeftParen);
			State = 2336; exceptiondeclaration();
			State = 2337; Match(RightParen);
			State = 2338; compoundstatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptiondeclarationContext : ParserRuleContext {
		public TypespecifierseqContext typespecifierseq() {
			return GetRuleContext<TypespecifierseqContext>(0);
		}
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public AbstractdeclaratorContext abstractdeclarator() {
			return GetRuleContext<AbstractdeclaratorContext>(0);
		}
		public ExceptiondeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptiondeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExceptiondeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExceptiondeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ExceptiondeclarationContext exceptiondeclaration() {
		ExceptiondeclarationContext _localctx = new ExceptiondeclarationContext(Context, State);
		EnterRule(_localctx, 372, RULE_exceptiondeclaration);
		int _la;
		try {
			State = 2354;
			switch ( Interpreter.AdaptivePredict(TokenStream,305,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2341;
				_la = TokenStream.La(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 2340; attributespecifierseq(0);
					}
				}

				State = 2343; typespecifierseq();
				State = 2344; declarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2347;
				_la = TokenStream.La(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 2346; attributespecifierseq(0);
					}
				}

				State = 2349; typespecifierseq();
				State = 2351;
				_la = TokenStream.La(1);
				if (_la==Decltype || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (LeftParen - 77)) | (1L << (LeftBracket - 77)) | (1L << (Star - 77)) | (1L << (And - 77)) | (1L << (AndAnd - 77)) | (1L << (Doublecolon - 77)) | (1L << (Ellipsis - 77)) | (1L << (Identifier - 77)))) != 0)) {
					{
					State = 2350; abstractdeclarator();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2353; Match(Ellipsis);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowexpressionContext : ParserRuleContext {
		public ITerminalNode Throw() { return GetToken(CPP14Parser.Throw, 0); }
		public AssignmentexpressionContext assignmentexpression() {
			return GetRuleContext<AssignmentexpressionContext>(0);
		}
		public ThrowexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterThrowexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitThrowexpression(this);
		}
	}

	[RuleVersion(0)]
	public ThrowexpressionContext throwexpression() {
		ThrowexpressionContext _localctx = new ThrowexpressionContext(Context, State);
		EnterRule(_localctx, 374, RULE_throwexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2356; Match(Throw);
			State = 2358;
			switch ( Interpreter.AdaptivePredict(TokenStream,306,Context) ) {
			case 1:
				{
				State = 2357; assignmentexpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionspecificationContext : ParserRuleContext {
		public DynamicexceptionspecificationContext dynamicexceptionspecification() {
			return GetRuleContext<DynamicexceptionspecificationContext>(0);
		}
		public NoexceptspecificationContext noexceptspecification() {
			return GetRuleContext<NoexceptspecificationContext>(0);
		}
		public ExceptionspecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionspecification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExceptionspecification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExceptionspecification(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionspecificationContext exceptionspecification() {
		ExceptionspecificationContext _localctx = new ExceptionspecificationContext(Context, State);
		EnterRule(_localctx, 376, RULE_exceptionspecification);
		try {
			State = 2362;
			switch (TokenStream.La(1)) {
			case Throw:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2360; dynamicexceptionspecification();
				}
				break;
			case Noexcept:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2361; noexceptspecification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DynamicexceptionspecificationContext : ParserRuleContext {
		public ITerminalNode Throw() { return GetToken(CPP14Parser.Throw, 0); }
		public TypeidlistContext typeidlist() {
			return GetRuleContext<TypeidlistContext>(0);
		}
		public DynamicexceptionspecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamicexceptionspecification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDynamicexceptionspecification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDynamicexceptionspecification(this);
		}
	}

	[RuleVersion(0)]
	public DynamicexceptionspecificationContext dynamicexceptionspecification() {
		DynamicexceptionspecificationContext _localctx = new DynamicexceptionspecificationContext(Context, State);
		EnterRule(_localctx, 378, RULE_dynamicexceptionspecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2364; Match(Throw);
			State = 2365; Match(LeftParen);
			State = 2367;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Decltype) | (1L << Double) | (1L << Enum) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << Signed) | (1L << Struct))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (Typename - 68)) | (1L << (Union - 68)) | (1L << (Unsigned - 68)) | (1L << (Void - 68)) | (1L << (Volatile - 68)) | (1L << (Wchar - 68)) | (1L << (Doublecolon - 68)) | (1L << (Identifier - 68)))) != 0)) {
				{
				State = 2366; typeidlist(0);
				}
			}

			State = 2369; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeidlistContext : ParserRuleContext {
		public TypeidContext typeid() {
			return GetRuleContext<TypeidContext>(0);
		}
		public TypeidlistContext typeidlist() {
			return GetRuleContext<TypeidlistContext>(0);
		}
		public TypeidlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeidlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTypeidlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTypeidlist(this);
		}
	}

	[RuleVersion(0)]
	public TypeidlistContext typeidlist() {
		return typeidlist(0);
	}

	private TypeidlistContext typeidlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeidlistContext _localctx = new TypeidlistContext(Context, _parentState);
		TypeidlistContext _prevctx = _localctx;
		int _startState = 380;
		EnterRecursionRule(_localctx, 380, RULE_typeidlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2372; typeid();
			State = 2374;
			switch ( Interpreter.AdaptivePredict(TokenStream,309,Context) ) {
			case 1:
				{
				State = 2373; Match(Ellipsis);
				}
				break;
			}
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2384;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,311,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeidlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_typeidlist);
					State = 2376;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2377; Match(Comma);
					State = 2378; typeid();
					State = 2380;
					switch ( Interpreter.AdaptivePredict(TokenStream,310,Context) ) {
					case 1:
						{
						State = 2379; Match(Ellipsis);
						}
						break;
					}
					}
					} 
				}
				State = 2386;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,311,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NoexceptspecificationContext : ParserRuleContext {
		public ITerminalNode Noexcept() { return GetToken(CPP14Parser.Noexcept, 0); }
		public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public NoexceptspecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noexceptspecification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNoexceptspecification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNoexceptspecification(this);
		}
	}

	[RuleVersion(0)]
	public NoexceptspecificationContext noexceptspecification() {
		NoexceptspecificationContext _localctx = new NoexceptspecificationContext(Context, State);
		EnterRule(_localctx, 382, RULE_noexceptspecification);
		try {
			State = 2393;
			switch ( Interpreter.AdaptivePredict(TokenStream,312,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2387; Match(Noexcept);
				State = 2388; Match(LeftParen);
				State = 2389; constantexpression();
				State = 2390; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2392; Match(Noexcept);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightShiftContext : ParserRuleContext {
		public ITerminalNode[] Greater() { return GetTokens(CPP14Parser.Greater); }
		public ITerminalNode Greater(int i) {
			return GetToken(CPP14Parser.Greater, i);
		}
		public RightShiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightShift; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterRightShift(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitRightShift(this);
		}
	}

	[RuleVersion(0)]
	public RightShiftContext rightShift() {
		RightShiftContext _localctx = new RightShiftContext(Context, State);
		EnterRule(_localctx, 384, RULE_rightShift);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2395; Match(Greater);
			State = 2396; Match(Greater);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightShiftAssignContext : ParserRuleContext {
		public ITerminalNode[] Greater() { return GetTokens(CPP14Parser.Greater); }
		public ITerminalNode Greater(int i) {
			return GetToken(CPP14Parser.Greater, i);
		}
		public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		public RightShiftAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightShiftAssign; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterRightShiftAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitRightShiftAssign(this);
		}
	}

	[RuleVersion(0)]
	public RightShiftAssignContext rightShiftAssign() {
		RightShiftAssignContext _localctx = new RightShiftAssignContext(Context, State);
		EnterRule(_localctx, 386, RULE_rightShiftAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2398; Match(Greater);
			State = 2399; Match(Greater);
			State = 2400; Match(Assign);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public ITerminalNode New() { return GetToken(CPP14Parser.New, 0); }
		public ITerminalNode Delete() { return GetToken(CPP14Parser.Delete, 0); }
		public RightShiftContext rightShift() {
			return GetRuleContext<RightShiftContext>(0);
		}
		public RightShiftAssignContext rightShiftAssign() {
			return GetRuleContext<RightShiftAssignContext>(0);
		}
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 388, RULE_operator);
		try {
			State = 2450;
			switch ( Interpreter.AdaptivePredict(TokenStream,313,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2402; Match(New);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2403; Match(Delete);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2404; Match(New);
				State = 2405; Match(LeftBracket);
				State = 2406; Match(RightBracket);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2407; Match(Delete);
				State = 2408; Match(LeftBracket);
				State = 2409; Match(RightBracket);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2410; Match(Plus);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2411; Match(Minus);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2412; Match(Star);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2413; Match(Div);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2414; Match(Mod);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2415; Match(Caret);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2416; Match(And);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2417; Match(Or);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2418; Match(Tilde);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2419; Match(Not);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2420; Match(Assign);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2421; Match(Less);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2422; Match(Greater);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2423; Match(PlusAssign);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2424; Match(MinusAssign);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2425; Match(StarAssign);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2426; Match(DivAssign);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 2427; Match(ModAssign);
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 2428; Match(XorAssign);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 2429; Match(AndAssign);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 2430; Match(OrAssign);
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 2431; Match(LeftShift);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 2432; rightShift();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 2433; rightShiftAssign();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 2434; Match(LeftShiftAssign);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 2435; Match(Equal);
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 2436; Match(NotEqual);
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 2437; Match(LessEqual);
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 2438; Match(GreaterEqual);
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 2439; Match(AndAnd);
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 2440; Match(OrOr);
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 2441; Match(PlusPlus);
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 2442; Match(MinusMinus);
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 2443; Match(Comma);
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 2444; Match(ArrowStar);
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 2445; Match(Arrow);
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 2446; Match(LeftParen);
				State = 2447; Match(RightParen);
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 2448; Match(LeftBracket);
				State = 2449; Match(RightBracket);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode Integerliteral() { return GetToken(CPP14Parser.Integerliteral, 0); }
		public ITerminalNode Characterliteral() { return GetToken(CPP14Parser.Characterliteral, 0); }
		public ITerminalNode Floatingliteral() { return GetToken(CPP14Parser.Floatingliteral, 0); }
		public ITerminalNode Stringliteral() { return GetToken(CPP14Parser.Stringliteral, 0); }
		public BooleanliteralContext booleanliteral() {
			return GetRuleContext<BooleanliteralContext>(0);
		}
		public PointerliteralContext pointerliteral() {
			return GetRuleContext<PointerliteralContext>(0);
		}
		public UserdefinedliteralContext userdefinedliteral() {
			return GetRuleContext<UserdefinedliteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 390, RULE_literal);
		try {
			State = 2459;
			switch (TokenStream.La(1)) {
			case Integerliteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2452; Match(Integerliteral);
				}
				break;
			case Characterliteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2453; Match(Characterliteral);
				}
				break;
			case Floatingliteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2454; Match(Floatingliteral);
				}
				break;
			case Stringliteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2455; Match(Stringliteral);
				}
				break;
			case False:
			case True:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2456; booleanliteral();
				}
				break;
			case Nullptr:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2457; pointerliteral();
				}
				break;
			case Userdefinedintegerliteral:
			case Userdefinedfloatingliteral:
			case Userdefinedstringliteral:
			case Userdefinedcharacterliteral:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2458; userdefinedliteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanliteralContext : ParserRuleContext {
		public ITerminalNode False() { return GetToken(CPP14Parser.False, 0); }
		public ITerminalNode True() { return GetToken(CPP14Parser.True, 0); }
		public BooleanliteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanliteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBooleanliteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBooleanliteral(this);
		}
	}

	[RuleVersion(0)]
	public BooleanliteralContext booleanliteral() {
		BooleanliteralContext _localctx = new BooleanliteralContext(Context, State);
		EnterRule(_localctx, 392, RULE_booleanliteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2461;
			_la = TokenStream.La(1);
			if ( !(_la==False || _la==True) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerliteralContext : ParserRuleContext {
		public ITerminalNode Nullptr() { return GetToken(CPP14Parser.Nullptr, 0); }
		public PointerliteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerliteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPointerliteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPointerliteral(this);
		}
	}

	[RuleVersion(0)]
	public PointerliteralContext pointerliteral() {
		PointerliteralContext _localctx = new PointerliteralContext(Context, State);
		EnterRule(_localctx, 394, RULE_pointerliteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2463; Match(Nullptr);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserdefinedliteralContext : ParserRuleContext {
		public ITerminalNode Userdefinedintegerliteral() { return GetToken(CPP14Parser.Userdefinedintegerliteral, 0); }
		public ITerminalNode Userdefinedfloatingliteral() { return GetToken(CPP14Parser.Userdefinedfloatingliteral, 0); }
		public ITerminalNode Userdefinedstringliteral() { return GetToken(CPP14Parser.Userdefinedstringliteral, 0); }
		public ITerminalNode Userdefinedcharacterliteral() { return GetToken(CPP14Parser.Userdefinedcharacterliteral, 0); }
		public UserdefinedliteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userdefinedliteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUserdefinedliteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUserdefinedliteral(this);
		}
	}

	[RuleVersion(0)]
	public UserdefinedliteralContext userdefinedliteral() {
		UserdefinedliteralContext _localctx = new UserdefinedliteralContext(Context, State);
		EnterRule(_localctx, 396, RULE_userdefinedliteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2465;
			_la = TokenStream.La(1);
			if ( !(((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (Userdefinedintegerliteral - 134)) | (1L << (Userdefinedfloatingliteral - 134)) | (1L << (Userdefinedstringliteral - 134)) | (1L << (Userdefinedcharacterliteral - 134)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return nestednamespecifier_sempred((NestednamespecifierContext)_localctx, predIndex);
		case 10: return capturelist_sempred((CapturelistContext)_localctx, predIndex);
		case 15: return postfixexpression_sempred((PostfixexpressionContext)_localctx, predIndex);
		case 24: return noptrnewdeclarator_sempred((NoptrnewdeclaratorContext)_localctx, predIndex);
		case 29: return pmexpression_sempred((PmexpressionContext)_localctx, predIndex);
		case 30: return multiplicativeexpression_sempred((MultiplicativeexpressionContext)_localctx, predIndex);
		case 31: return additiveexpression_sempred((AdditiveexpressionContext)_localctx, predIndex);
		case 32: return shiftexpression_sempred((ShiftexpressionContext)_localctx, predIndex);
		case 33: return relationalexpression_sempred((RelationalexpressionContext)_localctx, predIndex);
		case 34: return equalityexpression_sempred((EqualityexpressionContext)_localctx, predIndex);
		case 35: return andexpression_sempred((AndexpressionContext)_localctx, predIndex);
		case 36: return exclusiveorexpression_sempred((ExclusiveorexpressionContext)_localctx, predIndex);
		case 37: return inclusiveorexpression_sempred((InclusiveorexpressionContext)_localctx, predIndex);
		case 38: return logicalandexpression_sempred((LogicalandexpressionContext)_localctx, predIndex);
		case 39: return logicalorexpression_sempred((LogicalorexpressionContext)_localctx, predIndex);
		case 43: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 49: return statementseq_sempred((StatementseqContext)_localctx, predIndex);
		case 58: return declarationseq_sempred((DeclarationseqContext)_localctx, predIndex);
		case 85: return enumeratorlist_sempred((EnumeratorlistContext)_localctx, predIndex);
		case 103: return attributespecifierseq_sempred((AttributespecifierseqContext)_localctx, predIndex);
		case 106: return attributelist_sempred((AttributelistContext)_localctx, predIndex);
		case 112: return balancedtokenseq_sempred((BalancedtokenseqContext)_localctx, predIndex);
		case 114: return initdeclaratorlist_sempred((InitdeclaratorlistContext)_localctx, predIndex);
		case 118: return noptrdeclarator_sempred((NoptrdeclaratorContext)_localctx, predIndex);
		case 129: return noptrabstractdeclarator_sempred((NoptrabstractdeclaratorContext)_localctx, predIndex);
		case 131: return noptrabstractpackdeclarator_sempred((NoptrabstractpackdeclaratorContext)_localctx, predIndex);
		case 133: return parameterdeclarationlist_sempred((ParameterdeclarationlistContext)_localctx, predIndex);
		case 140: return initializerlist_sempred((InitializerlistContext)_localctx, predIndex);
		case 150: return memberdeclaratorlist_sempred((MemberdeclaratorlistContext)_localctx, predIndex);
		case 152: return virtspecifierseq_sempred((VirtspecifierseqContext)_localctx, predIndex);
		case 156: return basespecifierlist_sempred((BasespecifierlistContext)_localctx, predIndex);
		case 171: return templateparameterlist_sempred((TemplateparameterlistContext)_localctx, predIndex);
		case 177: return templateargumentlist_sempred((TemplateargumentlistContext)_localctx, predIndex);
		case 190: return typeidlist_sempred((TypeidlistContext)_localctx, predIndex);
		}
		return true;
	}
	private bool nestednamespecifier_sempred(NestednamespecifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool capturelist_sempred(CapturelistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool postfixexpression_sempred(PostfixexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 19);
		case 4: return Precpred(Context, 18);
		case 5: return Precpred(Context, 17);
		case 6: return Precpred(Context, 12);
		case 7: return Precpred(Context, 11);
		case 8: return Precpred(Context, 10);
		case 9: return Precpred(Context, 9);
		case 10: return Precpred(Context, 8);
		case 11: return Precpred(Context, 7);
		}
		return true;
	}
	private bool noptrnewdeclarator_sempred(NoptrnewdeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Precpred(Context, 1);
		}
		return true;
	}
	private bool pmexpression_sempred(PmexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Precpred(Context, 2);
		case 14: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicativeexpression_sempred(MultiplicativeexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Precpred(Context, 3);
		case 16: return Precpred(Context, 2);
		case 17: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additiveexpression_sempred(AdditiveexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18: return Precpred(Context, 2);
		case 19: return Precpred(Context, 1);
		}
		return true;
	}
	private bool shiftexpression_sempred(ShiftexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20: return Precpred(Context, 2);
		case 21: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relationalexpression_sempred(RelationalexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return Precpred(Context, 4);
		case 23: return Precpred(Context, 3);
		case 24: return Precpred(Context, 2);
		case 25: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equalityexpression_sempred(EqualityexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 26: return Precpred(Context, 2);
		case 27: return Precpred(Context, 1);
		}
		return true;
	}
	private bool andexpression_sempred(AndexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 28: return Precpred(Context, 1);
		}
		return true;
	}
	private bool exclusiveorexpression_sempred(ExclusiveorexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 29: return Precpred(Context, 1);
		}
		return true;
	}
	private bool inclusiveorexpression_sempred(InclusiveorexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalandexpression_sempred(LogicalandexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 31: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalorexpression_sempred(LogicalorexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 32: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33: return Precpred(Context, 1);
		}
		return true;
	}
	private bool statementseq_sempred(StatementseqContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34: return Precpred(Context, 1);
		}
		return true;
	}
	private bool declarationseq_sempred(DeclarationseqContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35: return Precpred(Context, 1);
		}
		return true;
	}
	private bool enumeratorlist_sempred(EnumeratorlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 36: return Precpred(Context, 1);
		}
		return true;
	}
	private bool attributespecifierseq_sempred(AttributespecifierseqContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37: return Precpred(Context, 1);
		}
		return true;
	}
	private bool attributelist_sempred(AttributelistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38: return Precpred(Context, 3);
		case 39: return Precpred(Context, 1);
		}
		return true;
	}
	private bool balancedtokenseq_sempred(BalancedtokenseqContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40: return Precpred(Context, 1);
		}
		return true;
	}
	private bool initdeclaratorlist_sempred(InitdeclaratorlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41: return Precpred(Context, 1);
		}
		return true;
	}
	private bool noptrdeclarator_sempred(NoptrdeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 42: return Precpred(Context, 3);
		case 43: return Precpred(Context, 2);
		}
		return true;
	}
	private bool noptrabstractdeclarator_sempred(NoptrabstractdeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 44: return Precpred(Context, 5);
		case 45: return Precpred(Context, 3);
		}
		return true;
	}
	private bool noptrabstractpackdeclarator_sempred(NoptrabstractpackdeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 46: return Precpred(Context, 3);
		case 47: return Precpred(Context, 2);
		}
		return true;
	}
	private bool parameterdeclarationlist_sempred(ParameterdeclarationlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 48: return Precpred(Context, 1);
		}
		return true;
	}
	private bool initializerlist_sempred(InitializerlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 49: return Precpred(Context, 1);
		}
		return true;
	}
	private bool memberdeclaratorlist_sempred(MemberdeclaratorlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 50: return Precpred(Context, 1);
		}
		return true;
	}
	private bool virtspecifierseq_sempred(VirtspecifierseqContext _localctx, int predIndex) {
		switch (predIndex) {
		case 51: return Precpred(Context, 1);
		}
		return true;
	}
	private bool basespecifierlist_sempred(BasespecifierlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 52: return Precpred(Context, 1);
		}
		return true;
	}
	private bool templateparameterlist_sempred(TemplateparameterlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53: return Precpred(Context, 1);
		}
		return true;
	}
	private bool templateargumentlist_sempred(TemplateargumentlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54: return Precpred(Context, 1);
		}
		return true;
	}
	private bool typeidlist_sempred(TypeidlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 55: return Precpred(Context, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x8F\x9A6\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE"+
		"\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3"+
		"\x4\xB4\t\xB4\x4\xB5\t\xB5\x4\xB6\t\xB6\x4\xB7\t\xB7\x4\xB8\t\xB8\x4\xB9"+
		"\t\xB9\x4\xBA\t\xBA\x4\xBB\t\xBB\x4\xBC\t\xBC\x4\xBD\t\xBD\x4\xBE\t\xBE"+
		"\x4\xBF\t\xBF\x4\xC0\t\xC0\x4\xC1\t\xC1\x4\xC2\t\xC2\x4\xC3\t\xC3\x4\xC4"+
		"\t\xC4\x4\xC5\t\xC5\x4\xC6\t\xC6\x4\xC7\t\xC7\x4\xC8\t\xC8\x3\x2\x5\x2"+
		"\x192\n\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x5\x3\x19E\n\x3\x3\x4\x3\x4\x5\x4\x1A2\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x1AD\n\x5\x3\x6\x3\x6\x5\x6\x1B1\n\x6"+
		"\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5"+
		"\a\x1C0\n\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x1C7\n\a\x3\a\x3\a\x3\a\a\a"+
		"\x1CC\n\a\f\a\xE\a\x1CF\v\a\x3\b\x3\b\x5\b\x1D3\n\b\x3\b\x3\b\x3\t\x3"+
		"\t\x5\t\x1D9\n\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x1E3\n\n"+
		"\x3\v\x3\v\x3\f\x3\f\x3\f\x5\f\x1EA\n\f\x3\f\x3\f\x3\f\x3\f\x5\f\x1F0"+
		"\n\f\a\f\x1F2\n\f\f\f\xE\f\x1F5\v\f\x3\r\x3\r\x5\r\x1F9\n\r\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x5\xE\x1FF\n\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x206"+
		"\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x20C\n\x10\x3\x10\x5\x10\x20F"+
		"\n\x10\x3\x10\x5\x10\x212\n\x10\x3\x10\x5\x10\x215\n\x10\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x5\x11\x21C\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x5\x11\x223\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x5\x11\x257\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x266"+
		"\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x26C\n\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x5\x11\x272\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\a\x11\x27F\n\x11\f\x11\xE\x11\x282"+
		"\v\x11\x3\x12\x3\x12\x3\x13\x5\x13\x287\n\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5"+
		"\x13\x296\n\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\x29C\n\x13\x3\x14\x3"+
		"\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3"+
		"\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3"+
		"\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x2BA\n\x14\x3\x15"+
		"\x3\x15\x3\x16\x5\x16\x2BF\n\x16\x3\x16\x3\x16\x5\x16\x2C3\n\x16\x3\x16"+
		"\x3\x16\x5\x16\x2C7\n\x16\x3\x16\x5\x16\x2CA\n\x16\x3\x16\x3\x16\x5\x16"+
		"\x2CE\n\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x2D4\n\x16\x5\x16\x2D6"+
		"\n\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x5\x18\x2DE\n\x18\x3"+
		"\x19\x3\x19\x5\x19\x2E2\n\x19\x3\x19\x5\x19\x2E5\n\x19\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x5\x1A\x2EC\n\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A"+
		"\x5\x1A\x2F3\n\x1A\a\x1A\x2F5\n\x1A\f\x1A\xE\x1A\x2F8\v\x1A\x3\x1B\x3"+
		"\x1B\x5\x1B\x2FC\n\x1B\x3\x1B\x3\x1B\x5\x1B\x300\n\x1B\x3\x1C\x5\x1C\x303"+
		"\n\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x308\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x5\x1C\x30E\n\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x31B\n\x1E\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\a\x1F\x326\n\x1F\f\x1F\xE\x1F"+
		"\x329\v\x1F\x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \a \x337\n"+
		" \f \xE \x33A\v \x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\a!\x345\n!\f!\xE"+
		"!\x348\v!\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\a\"\x354\n"+
		"\"\f\"\xE\"\x357\v\"\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3"+
		"#\x3#\x3#\a#\x368\n#\f#\xE#\x36B\v#\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3"+
		"$\a$\x376\n$\f$\xE$\x379\v$\x3%\x3%\x3%\x3%\x3%\x3%\a%\x381\n%\f%\xE%"+
		"\x384\v%\x3&\x3&\x3&\x3&\x3&\x3&\a&\x38C\n&\f&\xE&\x38F\v&\x3\'\x3\'\x3"+
		"\'\x3\'\x3\'\x3\'\a\'\x397\n\'\f\'\xE\'\x39A\v\'\x3(\x3(\x3(\x3(\x3(\x3"+
		"(\a(\x3A2\n(\f(\xE(\x3A5\v(\x3)\x3)\x3)\x3)\x3)\x3)\a)\x3AD\n)\f)\xE)"+
		"\x3B0\v)\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x5*\x3B9\n*\x3+\x3+\x3+\x3+\x3+\x3"+
		"+\x5+\x3C1\n+\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x5,\x3CE\n,"+
		"\x3-\x3-\x3-\x3-\x3-\x3-\a-\x3D6\n-\f-\xE-\x3D9\v-\x3.\x3.\x3/\x3/\x5"+
		"/\x3DF\n/\x3/\x3/\x5/\x3E3\n/\x3/\x3/\x5/\x3E7\n/\x3/\x3/\x5/\x3EB\n/"+
		"\x3/\x3/\x5/\x3EF\n/\x3/\x3/\x3/\x5/\x3F4\n/\x3/\x5/\x3F7\n/\x3\x30\x5"+
		"\x30\x3FA\n\x30\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30\x400\n\x30\x3\x30\x3"+
		"\x30\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30\x408\n\x30\x3\x30\x3\x30\x3\x30"+
		"\x5\x30\x40D\n\x30\x3\x31\x5\x31\x410\n\x31\x3\x31\x3\x31\x3\x32\x3\x32"+
		"\x5\x32\x416\n\x32\x3\x32\x3\x32\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\a"+
		"\x33\x41F\n\x33\f\x33\xE\x33\x422\v\x33\x3\x34\x3\x34\x3\x34\x3\x34\x3"+
		"\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3"+
		"\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x5\x34\x438\n\x34\x3\x35\x3\x35"+
		"\x5\x35\x43C\n\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x444"+
		"\n\x35\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x44A\n\x35\x3\x36\x3\x36\x3"+
		"\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3"+
		"\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x5\x36\x45E\n\x36\x3\x36\x3\x36"+
		"\x5\x36\x462\n\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3"+
		"\x36\x3\x36\x3\x36\x3\x36\x5\x36\x46F\n\x36\x3\x37\x3\x37\x5\x37\x473"+
		"\n\x37\x3\x38\x5\x38\x476\n\x38\x3\x38\x3\x38\x3\x38\x3\x39\x3\x39\x5"+
		"\x39\x47D\n\x39\x3:\x3:\x3:\x3:\x3:\x3:\x5:\x485\n:\x3:\x3:\x3:\x3:\x3"+
		":\x3:\x3:\x3:\x5:\x48F\n:\x3;\x3;\x3<\x3<\x3<\x3<\x3<\a<\x498\n<\f<\xE"+
		"<\x49B\v<\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x5=\x4A6\n=\x3>\x3>\x3>"+
		"\x3>\x3>\x3>\x3>\x3>\x5>\x4B0\n>\x3?\x3?\x3?\x5?\x4B5\n?\x3?\x3?\x3?\x3"+
		"?\x3@\x5@\x4BC\n@\x3@\x5@\x4BF\n@\x3@\x3@\x3@\x5@\x4C4\n@\x3@\x3@\x3@"+
		"\x5@\x4C9\n@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3"+
		"\x42\x3\x42\x3\x43\x3\x43\x3\x43\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3"+
		"\x44\x5\x44\x4DE\n\x44\x3\x45\x3\x45\x5\x45\x4E2\n\x45\x3\x45\x3\x45\x3"+
		"\x45\x5\x45\x4E7\n\x45\x3\x46\x3\x46\x3G\x3G\x3H\x3H\x3I\x3I\x3I\x5I\x4F2"+
		"\nI\x3J\x3J\x3J\x3J\x5J\x4F8\nJ\x3K\x3K\x5K\x4FC\nK\x3K\x3K\x3K\x5K\x501"+
		"\nK\x3L\x3L\x5L\x505\nL\x3L\x3L\x3L\x5L\x50A\nL\x3M\x5M\x50D\nM\x3M\x3"+
		"M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M"+
		"\x3M\x5M\x523\nM\x3N\x3N\x3N\x3N\x5N\x529\nN\x3O\x3O\x3O\x3O\x3O\x3O\x3"+
		"O\x3O\x3O\x5O\x534\nO\x3P\x3P\x5P\x538\nP\x3P\x5P\x53B\nP\x3P\x3P\x3P"+
		"\x3P\x3P\x3P\x3P\x3P\x5P\x545\nP\x3P\x3P\x3P\x3P\x5P\x54B\nP\x3P\x5P\x54E"+
		"\nP\x3Q\x3Q\x3R\x3R\x3R\x5R\x555\nR\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x5"+
		"R\x55F\nR\x3S\x3S\x5S\x563\nS\x3S\x5S\x566\nS\x3S\x5S\x569\nS\x3S\x3S"+
		"\x5S\x56D\nS\x3S\x3S\x3S\x5S\x572\nS\x5S\x574\nS\x3T\x3T\x5T\x578\nT\x3"+
		"T\x3T\x5T\x57C\nT\x3T\x3T\x3U\x3U\x3U\x3U\x3U\x5U\x585\nU\x3V\x3V\x3V"+
		"\x3W\x3W\x3W\x3W\x3W\x3W\aW\x590\nW\fW\xEW\x593\vW\x3X\x3X\x3X\x3X\x3"+
		"X\x5X\x59A\nX\x3Y\x3Y\x3Z\x3Z\x5Z\x5A0\nZ\x3[\x3[\x3\\\x3\\\x5\\\x5A6"+
		"\n\\\x3]\x3]\x5]\x5AA\n]\x3^\x5^\x5AD\n^\x3^\x3^\x3^\x3^\x3^\x3^\x3_\x5"+
		"_\x5B6\n_\x3_\x3_\x3_\x3_\x3_\x3_\x3`\x5`\x5BF\n`\x3`\x3`\x3`\x3`\x3`"+
		"\x3\x61\x5\x61\x5C7\n\x61\x3\x62\x3\x62\x3\x63\x3\x63\x3\x63\x3\x63\x3"+
		"\x63\x3\x63\x3\x64\x5\x64\x5D2\n\x64\x3\x64\x3\x64\x3\x65\x3\x65\x5\x65"+
		"\x5D8\n\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3"+
		"\x65\x5\x65\x5E3\n\x65\x3\x66\x5\x66\x5E6\n\x66\x3\x66\x3\x66\x3\x66\x5"+
		"\x66\x5EB\n\x66\x3\x66\x3\x66\x3\x66\x3g\x3g\x3g\x3g\x3g\x3g\x3h\x3h\x3"+
		"h\x3h\x5h\x5FA\nh\x3h\x3h\x3h\x3h\x5h\x600\nh\x3i\x3i\x3i\x3i\x3i\ai\x607"+
		"\ni\fi\xEi\x60A\vi\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x5j\x613\nj\x3k\x3k\x3"+
		"k\x3k\x5k\x619\nk\x3k\x3k\x3k\x3k\x3k\x3k\x5k\x621\nk\x3k\x3k\x5k\x625"+
		"\nk\x3l\x3l\x5l\x629\nl\x3l\x3l\x3l\x5l\x62E\nl\x3l\x3l\x3l\x5l\x633\n"+
		"l\x3l\x3l\x3l\x3l\x3l\al\x63A\nl\fl\xEl\x63D\vl\x3m\x3m\x5m\x641\nm\x3"+
		"n\x3n\x5n\x645\nn\x3o\x3o\x3o\x3o\x3p\x3p\x3q\x3q\x3q\x3q\x3r\x3r\x5r"+
		"\x653\nr\x3r\x3r\ar\x657\nr\fr\xEr\x65A\vr\x3s\x3s\x3s\x3s\x3s\x3s\x3"+
		"s\x3s\x3s\x3s\x3s\x3s\x5s\x668\ns\x3t\x3t\x3t\x3t\x3t\x3t\at\x670\nt\f"+
		"t\xEt\x673\vt\x3u\x3u\x5u\x677\nu\x3v\x3v\x3v\x3v\x3v\x5v\x67E\nv\x3w"+
		"\x3w\x3w\x3w\x5w\x684\nw\x3x\x3x\x3x\x5x\x689\nx\x3x\x3x\x3x\x3x\x5x\x68F"+
		"\nx\x3x\x3x\x3x\x3x\x3x\x5x\x696\nx\x3x\x3x\x5x\x69A\nx\ax\x69C\nx\fx"+
		"\xEx\x69F\vx\x3y\x3y\x3y\x3y\x5y\x6A5\ny\x3y\x5y\x6A8\ny\x3y\x5y\x6AB"+
		"\ny\x3y\x5y\x6AE\ny\x3z\x3z\x3z\x5z\x6B3\nz\x3{\x3{\x5{\x6B7\n{\x3{\x5"+
		"{\x6BA\n{\x3{\x3{\x5{\x6BE\n{\x3{\x3{\x5{\x6C2\n{\x3{\x3{\x3{\x5{\x6C7"+
		"\n{\x3{\x5{\x6CA\n{\x5{\x6CC\n{\x3|\x3|\x5|\x6D0\n|\x3}\x3}\x3~\x3~\x3"+
		"\x7F\x5\x7F\x6D7\n\x7F\x3\x7F\x3\x7F\x3\x80\x3\x80\x5\x80\x6DD\n\x80\x3"+
		"\x81\x3\x81\x5\x81\x6E1\n\x81\x3\x81\x3\x81\x3\x81\x3\x81\x5\x81\x6E7"+
		"\n\x81\x3\x82\x3\x82\x3\x82\x5\x82\x6EC\n\x82\x5\x82\x6EE\n\x82\x3\x83"+
		"\x3\x83\x3\x83\x3\x83\x5\x83\x6F4\n\x83\x3\x83\x3\x83\x5\x83\x6F8\n\x83"+
		"\x3\x83\x3\x83\x3\x83\x3\x83\x5\x83\x6FE\n\x83\x3\x83\x3\x83\x3\x83\x3"+
		"\x83\x3\x83\x5\x83\x705\n\x83\x3\x83\x3\x83\x5\x83\x709\n\x83\a\x83\x70B"+
		"\n\x83\f\x83\xE\x83\x70E\v\x83\x3\x84\x3\x84\x3\x84\x3\x84\x5\x84\x714"+
		"\n\x84\x3\x85\x3\x85\x3\x85\x3\x85\x3\x85\x3\x85\x3\x85\x3\x85\x5\x85"+
		"\x71E\n\x85\x3\x85\x3\x85\x5\x85\x722\n\x85\a\x85\x724\n\x85\f\x85\xE"+
		"\x85\x727\v\x85\x3\x86\x5\x86\x72A\n\x86\x3\x86\x5\x86\x72D\n\x86\x3\x86"+
		"\x3\x86\x3\x86\x3\x86\x5\x86\x733\n\x86\x3\x87\x3\x87\x3\x87\x3\x87\x3"+
		"\x87\x3\x87\a\x87\x73B\n\x87\f\x87\xE\x87\x73E\v\x87\x3\x88\x5\x88\x741"+
		"\n\x88\x3\x88\x3\x88\x3\x88\x3\x88\x5\x88\x747\n\x88\x3\x88\x3\x88\x3"+
		"\x88\x3\x88\x3\x88\x3\x88\x5\x88\x74F\n\x88\x3\x88\x3\x88\x5\x88\x753"+
		"\n\x88\x3\x88\x5\x88\x756\n\x88\x3\x88\x3\x88\x5\x88\x75A\n\x88\x3\x88"+
		"\x3\x88\x3\x88\x5\x88\x75F\n\x88\x3\x89\x5\x89\x762\n\x89\x3\x89\x5\x89"+
		"\x765\n\x89\x3\x89\x3\x89\x5\x89\x769\n\x89\x3\x89\x3\x89\x3\x8A\x5\x8A"+
		"\x76E\n\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x5"+
		"\x8A\x778\n\x8A\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x5\x8B\x77F\n\x8B\x3"+
		"\x8C\x3\x8C\x3\x8C\x5\x8C\x784\n\x8C\x3\x8D\x3\x8D\x5\x8D\x788\n\x8D\x3"+
		"\x8E\x3\x8E\x3\x8E\x5\x8E\x78D\n\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x5\x8E"+
		"\x793\n\x8E\a\x8E\x795\n\x8E\f\x8E\xE\x8E\x798\v\x8E\x3\x8F\x3\x8F\x3"+
		"\x8F\x5\x8F\x79D\n\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x5\x8F\x7A3\n\x8F\x3"+
		"\x90\x3\x90\x5\x90\x7A7\n\x90\x3\x91\x3\x91\x3\x91\x5\x91\x7AC\n\x91\x3"+
		"\x91\x3\x91\x3\x92\x3\x92\x5\x92\x7B2\n\x92\x3\x92\x3\x92\x5\x92\x7B6"+
		"\n\x92\x3\x92\x5\x92\x7B9\n\x92\x3\x92\x3\x92\x5\x92\x7BD\n\x92\x3\x92"+
		"\x5\x92\x7C0\n\x92\x5\x92\x7C2\n\x92\x3\x93\x5\x93\x7C5\n\x93\x3\x93\x3"+
		"\x93\x3\x94\x3\x94\x3\x95\x3\x95\x3\x96\x3\x96\x5\x96\x7CF\n\x96\x3\x96"+
		"\x3\x96\x3\x96\x5\x96\x7D4\n\x96\x5\x96\x7D6\n\x96\x3\x97\x5\x97\x7D9"+
		"\n\x97\x3\x97\x5\x97\x7DC\n\x97\x3\x97\x5\x97\x7DF\n\x97\x3\x97\x3\x97"+
		"\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97\x5\x97\x7E8\n\x97\x3\x98\x3\x98\x3"+
		"\x98\x3\x98\x3\x98\x3\x98\a\x98\x7F0\n\x98\f\x98\xE\x98\x7F3\v\x98\x3"+
		"\x99\x3\x99\x5\x99\x7F7\n\x99\x3\x99\x5\x99\x7FA\n\x99\x3\x99\x3\x99\x5"+
		"\x99\x7FE\n\x99\x3\x99\x5\x99\x801\n\x99\x3\x99\x5\x99\x804\n\x99\x3\x99"+
		"\x3\x99\x5\x99\x808\n\x99\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\a\x9A\x80F"+
		"\n\x9A\f\x9A\xE\x9A\x812\v\x9A\x3\x9B\x3\x9B\x3\x9C\x3\x9C\x3\x9C\x3\x9C"+
		"\x3\x9D\x3\x9D\x3\x9D\x3\x9E\x3\x9E\x3\x9E\x5\x9E\x820\n\x9E\x3\x9E\x3"+
		"\x9E\x3\x9E\x3\x9E\x5\x9E\x826\n\x9E\a\x9E\x828\n\x9E\f\x9E\xE\x9E\x82B"+
		"\v\x9E\x3\x9F\x5\x9F\x82E\n\x9F\x3\x9F\x3\x9F\x5\x9F\x832\n\x9F\x3\x9F"+
		"\x3\x9F\x5\x9F\x836\n\x9F\x3\x9F\x3\x9F\x5\x9F\x83A\n\x9F\x3\x9F\x3\x9F"+
		"\x5\x9F\x83E\n\x9F\x3\x9F\x3\x9F\x5\x9F\x842\n\x9F\x3\xA0\x5\xA0\x845"+
		"\n\xA0\x3\xA0\x3\xA0\x5\xA0\x849\n\xA0\x3\xA1\x3\xA1\x3\xA2\x3\xA2\x3"+
		"\xA3\x3\xA3\x3\xA3\x3\xA4\x3\xA4\x5\xA4\x854\n\xA4\x3\xA5\x3\xA5\x5\xA5"+
		"\x858\n\xA5\x3\xA6\x3\xA6\x3\xA6\x3\xA7\x3\xA7\x5\xA7\x85F\n\xA7\x3\xA7"+
		"\x3\xA7\x5\xA7\x863\n\xA7\x3\xA7\x3\xA7\x3\xA7\x5\xA7\x868\n\xA7\x3\xA8"+
		"\x3\xA8\x3\xA8\x5\xA8\x86D\n\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x5"+
		"\xA8\x874\n\xA8\x3\xA9\x3\xA9\x5\xA9\x878\n\xA9\x3\xAA\x3\xAA\x3\xAA\x3"+
		"\xAB\x3\xAB\x3\xAB\x3\xAB\x3\xAB\x5\xAB\x882\n\xAB\x3\xAC\x3\xAC\x3\xAC"+
		"\x3\xAC\x3\xAC\x3\xAC\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\a\xAD"+
		"\x890\n\xAD\f\xAD\xE\xAD\x893\v\xAD\x3\xAE\x3\xAE\x5\xAE\x897\n\xAE\x3"+
		"\xAF\x3\xAF\x5\xAF\x89B\n\xAF\x3\xAF\x5\xAF\x89E\n\xAF\x3\xAF\x3\xAF\x5"+
		"\xAF\x8A2\n\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x5\xAF\x8A8\n\xAF\x3\xAF\x5"+
		"\xAF\x8AB\n\xAF\x3\xAF\x3\xAF\x5\xAF\x8AF\n\xAF\x3\xAF\x3\xAF\x3\xAF\x3"+
		"\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x5\xAF\x8B9\n\xAF\x3\xAF\x5\xAF\x8BC"+
		"\n\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x5\xAF\x8C4\n\xAF\x3"+
		"\xAF\x3\xAF\x3\xAF\x5\xAF\x8C9\n\xAF\x3\xB0\x3\xB0\x3\xB0\x5\xB0\x8CE"+
		"\n\xB0\x3\xB0\x3\xB0\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x5\xB1\x8D6\n\xB1\x3"+
		"\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x5\xB1\x8DD\n\xB1\x3\xB1\x3\xB1\x5\xB1"+
		"\x8E1\n\xB1\x3\xB2\x3\xB2\x3\xB3\x3\xB3\x3\xB3\x5\xB3\x8E8\n\xB3\x3\xB3"+
		"\x3\xB3\x3\xB3\x3\xB3\x5\xB3\x8EE\n\xB3\a\xB3\x8F0\n\xB3\f\xB3\xE\xB3"+
		"\x8F3\v\xB3\x3\xB4\x3\xB4\x3\xB4\x5\xB4\x8F8\n\xB4\x3\xB5\x3\xB5\x3\xB5"+
		"\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x5\xB5\x901\n\xB5\x3\xB5\x3\xB5\x5\xB5\x905"+
		"\n\xB5\x3\xB6\x5\xB6\x908\n\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB7\x3\xB7\x3"+
		"\xB7\x3\xB7\x3\xB7\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB9\x3\xB9\x5\xB9\x918"+
		"\n\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xBA\x3\xBA\x5\xBA\x91F\n\xBA\x3\xBB\x3"+
		"\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBC\x5\xBC\x928\n\xBC\x3\xBC\x3\xBC"+
		"\x3\xBC\x3\xBC\x5\xBC\x92E\n\xBC\x3\xBC\x3\xBC\x5\xBC\x932\n\xBC\x3\xBC"+
		"\x5\xBC\x935\n\xBC\x3\xBD\x3\xBD\x5\xBD\x939\n\xBD\x3\xBE\x3\xBE\x5\xBE"+
		"\x93D\n\xBE\x3\xBF\x3\xBF\x3\xBF\x5\xBF\x942\n\xBF\x3\xBF\x3\xBF\x3\xC0"+
		"\x3\xC0\x3\xC0\x5\xC0\x949\n\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x5\xC0\x94F"+
		"\n\xC0\a\xC0\x951\n\xC0\f\xC0\xE\xC0\x954\v\xC0\x3\xC1\x3\xC1\x3\xC1\x3"+
		"\xC1\x3\xC1\x3\xC1\x5\xC1\x95C\n\xC1\x3\xC2\x3\xC2\x3\xC2\x3\xC3\x3\xC3"+
		"\x3\xC3\x3\xC3\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4"+
		"\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4"+
		"\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4"+
		"\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4"+
		"\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4"+
		"\x5\xC4\x995\n\xC4\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x5"+
		"\xC5\x99E\n\xC5\x3\xC6\x3\xC6\x3\xC7\x3\xC7\x3\xC8\x3\xC8\x3\xC8\x2$\f"+
		"\x16 \x32<>@\x42\x44\x46HJLNPX\x64v\xAC\xD0\xD6\xE2\xE6\xEE\x104\x108"+
		"\x10C\x11A\x12E\x132\x13A\x158\x164\x17E\xC9\x2\x4\x6\b\n\f\xE\x10\x12"+
		"\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46"+
		"HJLNPRTVXZ\\^`\x62\x64\x66hjlnprtvxz|~\x80\x82\x84\x86\x88\x8A\x8C\x8E"+
		"\x90\x92\x94\x96\x98\x9A\x9C\x9E\xA0\xA2\xA4\xA6\xA8\xAA\xAC\xAE\xB0\xB2"+
		"\xB4\xB6\xB8\xBA\xBC\xBE\xC0\xC2\xC4\xC6\xC8\xCA\xCC\xCE\xD0\xD2\xD4\xD6"+
		"\xD8\xDA\xDC\xDE\xE0\xE2\xE4\xE6\xE8\xEA\xEC\xEE\xF0\xF2\xF4\xF6\xF8\xFA"+
		"\xFC\xFE\x100\x102\x104\x106\x108\x10A\x10C\x10E\x110\x112\x114\x116\x118"+
		"\x11A\x11C\x11E\x120\x122\x124\x126\x128\x12A\x12C\x12E\x130\x132\x134"+
		"\x136\x138\x13A\x13C\x13E\x140\x142\x144\x146\x148\x14A\x14C\x14E\x150"+
		"\x152\x154\x156\x158\x15A\x15C\x15E\x160\x162\x164\x166\x168\x16A\x16C"+
		"\x16E\x170\x172\x174\x176\x178\x17A\x17C\x17E\x180\x182\x184\x186\x188"+
		"\x18A\x18C\x18E\x2\r\x4\x2[[__\x4\x2UW[^\a\x2\x1E\x1E))\x33\x33\x39\x39"+
		"@@\x5\x2\x1C\x1C&&JJ\x4\x2\x10\x10LL\x4\x2[[pp\x5\x2\xF\xF<<GG\x4\x2 "+
		" //\x3\x2\x30\x32\x4\x2\x1F\x1F\x42\x42\x3\x2\x88\x8B\xAC7\x2\x191\x3"+
		"\x2\x2\x2\x4\x19D\x3\x2\x2\x2\x6\x1A1\x3\x2\x2\x2\b\x1AC\x3\x2\x2\x2\n"+
		"\x1AE\x3\x2\x2\x2\f\x1BF\x3\x2\x2\x2\xE\x1D0\x3\x2\x2\x2\x10\x1D6\x3\x2"+
		"\x2\x2\x12\x1E2\x3\x2\x2\x2\x14\x1E4\x3\x2\x2\x2\x16\x1E6\x3\x2\x2\x2"+
		"\x18\x1F8\x3\x2\x2\x2\x1A\x1FE\x3\x2\x2\x2\x1C\x205\x3\x2\x2\x2\x1E\x207"+
		"\x3\x2\x2\x2 \x256\x3\x2\x2\x2\"\x283\x3\x2\x2\x2$\x29B\x3\x2\x2\x2&\x2B9"+
		"\x3\x2\x2\x2(\x2BB\x3\x2\x2\x2*\x2D5\x3\x2\x2\x2,\x2D7\x3\x2\x2\x2.\x2DB"+
		"\x3\x2\x2\x2\x30\x2E4\x3\x2\x2\x2\x32\x2E6\x3\x2\x2\x2\x34\x2FF\x3\x2"+
		"\x2\x2\x36\x30D\x3\x2\x2\x2\x38\x30F\x3\x2\x2\x2:\x31A\x3\x2\x2\x2<\x31C"+
		"\x3\x2\x2\x2>\x32A\x3\x2\x2\x2@\x33B\x3\x2\x2\x2\x42\x349\x3\x2\x2\x2"+
		"\x44\x358\x3\x2\x2\x2\x46\x36C\x3\x2\x2\x2H\x37A\x3\x2\x2\x2J\x385\x3"+
		"\x2\x2\x2L\x390\x3\x2\x2\x2N\x39B\x3\x2\x2\x2P\x3A6\x3\x2\x2\x2R\x3B8"+
		"\x3\x2\x2\x2T\x3C0\x3\x2\x2\x2V\x3CD\x3\x2\x2\x2X\x3CF\x3\x2\x2\x2Z\x3DA"+
		"\x3\x2\x2\x2\\\x3F6\x3\x2\x2\x2^\x40C\x3\x2\x2\x2`\x40F\x3\x2\x2\x2\x62"+
		"\x413\x3\x2\x2\x2\x64\x419\x3\x2\x2\x2\x66\x437\x3\x2\x2\x2h\x449\x3\x2"+
		"\x2\x2j\x46E\x3\x2\x2\x2l\x472\x3\x2\x2\x2n\x475\x3\x2\x2\x2p\x47C\x3"+
		"\x2\x2\x2r\x48E\x3\x2\x2\x2t\x490\x3\x2\x2\x2v\x492\x3\x2\x2\x2x\x4A5"+
		"\x3\x2\x2\x2z\x4AF\x3\x2\x2\x2|\x4B1\x3\x2\x2\x2~\x4C8\x3\x2\x2\x2\x80"+
		"\x4CA\x3\x2\x2\x2\x82\x4D2\x3\x2\x2\x2\x84\x4D4\x3\x2\x2\x2\x86\x4DD\x3"+
		"\x2\x2\x2\x88\x4E6\x3\x2\x2\x2\x8A\x4E8\x3\x2\x2\x2\x8C\x4EA\x3\x2\x2"+
		"\x2\x8E\x4EC\x3\x2\x2\x2\x90\x4F1\x3\x2\x2\x2\x92\x4F7\x3\x2\x2\x2\x94"+
		"\x500\x3\x2\x2\x2\x96\x509\x3\x2\x2\x2\x98\x522\x3\x2\x2\x2\x9A\x528\x3"+
		"\x2\x2\x2\x9C\x533\x3\x2\x2\x2\x9E\x54D\x3\x2\x2\x2\xA0\x54F\x3\x2\x2"+
		"\x2\xA2\x55E\x3\x2\x2\x2\xA4\x573\x3\x2\x2\x2\xA6\x575\x3\x2\x2\x2\xA8"+
		"\x584\x3\x2\x2\x2\xAA\x586\x3\x2\x2\x2\xAC\x589\x3\x2\x2\x2\xAE\x599\x3"+
		"\x2\x2\x2\xB0\x59B\x3\x2\x2\x2\xB2\x59F\x3\x2\x2\x2\xB4\x5A1\x3\x2\x2"+
		"\x2\xB6\x5A5\x3\x2\x2\x2\xB8\x5A9\x3\x2\x2\x2\xBA\x5AC\x3\x2\x2\x2\xBC"+
		"\x5B5\x3\x2\x2\x2\xBE\x5BE\x3\x2\x2\x2\xC0\x5C6\x3\x2\x2\x2\xC2\x5C8\x3"+
		"\x2\x2\x2\xC4\x5CA\x3\x2\x2\x2\xC6\x5D1\x3\x2\x2\x2\xC8\x5E2\x3\x2\x2"+
		"\x2\xCA\x5E5\x3\x2\x2\x2\xCC\x5EF\x3\x2\x2\x2\xCE\x5FF\x3\x2\x2\x2\xD0"+
		"\x601\x3\x2\x2\x2\xD2\x612\x3\x2\x2\x2\xD4\x624\x3\x2\x2\x2\xD6\x62D\x3"+
		"\x2\x2\x2\xD8\x63E\x3\x2\x2\x2\xDA\x644\x3\x2\x2\x2\xDC\x646\x3\x2\x2"+
		"\x2\xDE\x64A\x3\x2\x2\x2\xE0\x64C\x3\x2\x2\x2\xE2\x650\x3\x2\x2\x2\xE4"+
		"\x667\x3\x2\x2\x2\xE6\x669\x3\x2\x2\x2\xE8\x674\x3\x2\x2\x2\xEA\x67D\x3"+
		"\x2\x2\x2\xEC\x683\x3\x2\x2\x2\xEE\x68E\x3\x2\x2\x2\xF0\x6A0\x3\x2\x2"+
		"\x2\xF2\x6AF\x3\x2\x2\x2\xF4\x6CB\x3\x2\x2\x2\xF6\x6CD\x3\x2\x2\x2\xF8"+
		"\x6D1\x3\x2\x2\x2\xFA\x6D3\x3\x2\x2\x2\xFC\x6D6\x3\x2\x2\x2\xFE\x6DA\x3"+
		"\x2\x2\x2\x100\x6E6\x3\x2\x2\x2\x102\x6ED\x3\x2\x2\x2\x104\x6FD\x3\x2"+
		"\x2\x2\x106\x713\x3\x2\x2\x2\x108\x715\x3\x2\x2\x2\x10A\x732\x3\x2\x2"+
		"\x2\x10C\x734\x3\x2\x2\x2\x10E\x75E\x3\x2\x2\x2\x110\x761\x3\x2\x2\x2"+
		"\x112\x777\x3\x2\x2\x2\x114\x77E\x3\x2\x2\x2\x116\x783\x3\x2\x2\x2\x118"+
		"\x787\x3\x2\x2\x2\x11A\x789\x3\x2\x2\x2\x11C\x7A2\x3\x2\x2\x2\x11E\x7A6"+
		"\x3\x2\x2\x2\x120\x7A8\x3\x2\x2\x2\x122\x7C1\x3\x2\x2\x2\x124\x7C4\x3"+
		"\x2\x2\x2\x126\x7C8\x3\x2\x2\x2\x128\x7CA\x3\x2\x2\x2\x12A\x7D5\x3\x2"+
		"\x2\x2\x12C\x7E7\x3\x2\x2\x2\x12E\x7E9\x3\x2\x2\x2\x130\x807\x3\x2\x2"+
		"\x2\x132\x809\x3\x2\x2\x2\x134\x813\x3\x2\x2\x2\x136\x815\x3\x2\x2\x2"+
		"\x138\x819\x3\x2\x2\x2\x13A\x81C\x3\x2\x2\x2\x13C\x841\x3\x2\x2\x2\x13E"+
		"\x848\x3\x2\x2\x2\x140\x84A\x3\x2\x2\x2\x142\x84C\x3\x2\x2\x2\x144\x84E"+
		"\x3\x2\x2\x2\x146\x851\x3\x2\x2\x2\x148\x855\x3\x2\x2\x2\x14A\x859\x3"+
		"\x2\x2\x2\x14C\x867\x3\x2\x2\x2\x14E\x873\x3\x2\x2\x2\x150\x877\x3\x2"+
		"\x2\x2\x152\x879\x3\x2\x2\x2\x154\x881\x3\x2\x2\x2\x156\x883\x3\x2\x2"+
		"\x2\x158\x889\x3\x2\x2\x2\x15A\x896\x3\x2\x2\x2\x15C\x8C8\x3\x2\x2\x2"+
		"\x15E\x8CA\x3\x2\x2\x2\x160\x8E0\x3\x2\x2\x2\x162\x8E2\x3\x2\x2\x2\x164"+
		"\x8E4\x3\x2\x2\x2\x166\x8F7\x3\x2\x2\x2\x168\x904\x3\x2\x2\x2\x16A\x907"+
		"\x3\x2\x2\x2\x16C\x90C\x3\x2\x2\x2\x16E\x911\x3\x2\x2\x2\x170\x915\x3"+
		"\x2\x2\x2\x172\x91C\x3\x2\x2\x2\x174\x920\x3\x2\x2\x2\x176\x934\x3\x2"+
		"\x2\x2\x178\x936\x3\x2\x2\x2\x17A\x93C\x3\x2\x2\x2\x17C\x93E\x3\x2\x2"+
		"\x2\x17E\x945\x3\x2\x2\x2\x180\x95B\x3\x2\x2\x2\x182\x95D\x3\x2\x2\x2"+
		"\x184\x960\x3\x2\x2\x2\x186\x994\x3\x2\x2\x2\x188\x99D\x3\x2\x2\x2\x18A"+
		"\x99F\x3\x2\x2\x2\x18C\x9A1\x3\x2\x2\x2\x18E\x9A3\x3\x2\x2\x2\x190\x192"+
		"\x5v<\x2\x191\x190\x3\x2\x2\x2\x191\x192\x3\x2\x2\x2\x192\x193\x3\x2\x2"+
		"\x2\x193\x194\a\x2\x2\x3\x194\x3\x3\x2\x2\x2\x195\x19E\x5\x188\xC5\x2"+
		"\x196\x19E\a?\x2\x2\x197\x198\aO\x2\x2\x198\x199\x5X-\x2\x199\x19A\aP"+
		"\x2\x2\x19A\x19E\x3\x2\x2\x2\x19B\x19E\x5\x6\x4\x2\x19C\x19E\x5\xE\b\x2"+
		"\x19D\x195\x3\x2\x2\x2\x19D\x196\x3\x2\x2\x2\x19D\x197\x3\x2\x2\x2\x19D"+
		"\x19B\x3\x2\x2\x2\x19D\x19C\x3\x2\x2\x2\x19E\x5\x3\x2\x2\x2\x19F\x1A2"+
		"\x5\b\x5\x2\x1A0\x1A2\x5\n\x6\x2\x1A1\x19F\x3\x2\x2\x2\x1A1\x1A0\x3\x2"+
		"\x2\x2\x1A2\a\x3\x2\x2\x2\x1A3\x1AD\a~\x2\x2\x1A4\x1AD\x5\x152\xAA\x2"+
		"\x1A5\x1AD\x5\x144\xA3\x2\x1A6\x1AD\x5\x154\xAB\x2\x1A7\x1A8\a]\x2\x2"+
		"\x1A8\x1AD\x5\x11E\x90\x2\x1A9\x1AA\a]\x2\x2\x1AA\x1AD\x5\x9CO\x2\x1AB"+
		"\x1AD\x5\x160\xB1\x2\x1AC\x1A3\x3\x2\x2\x2\x1AC\x1A4\x3\x2\x2\x2\x1AC"+
		"\x1A5\x3\x2\x2\x2\x1AC\x1A6\x3\x2\x2\x2\x1AC\x1A7\x3\x2\x2\x2\x1AC\x1A9"+
		"\x3\x2\x2\x2\x1AC\x1AB\x3\x2\x2\x2\x1AD\t\x3\x2\x2\x2\x1AE\x1B0\x5\f\a"+
		"\x2\x1AF\x1B1\a>\x2\x2\x1B0\x1AF\x3\x2\x2\x2\x1B0\x1B1\x3\x2\x2\x2\x1B1"+
		"\x1B2\x3\x2\x2\x2\x1B2\x1B3\x5\b\x5\x2\x1B3\v\x3\x2\x2\x2\x1B4\x1B5\b"+
		"\a\x1\x2\x1B5\x1C0\ay\x2\x2\x1B6\x1B7\x5\x9AN\x2\x1B7\x1B8\ay\x2\x2\x1B8"+
		"\x1C0\x3\x2\x2\x2\x1B9\x1BA\x5\xB2Z\x2\x1BA\x1BB\ay\x2\x2\x1BB\x1C0\x3"+
		"\x2\x2\x2\x1BC\x1BD\x5\x9CO\x2\x1BD\x1BE\ay\x2\x2\x1BE\x1C0\x3\x2\x2\x2"+
		"\x1BF\x1B4\x3\x2\x2\x2\x1BF\x1B6\x3\x2\x2\x2\x1BF\x1B9\x3\x2\x2\x2\x1BF"+
		"\x1BC\x3\x2\x2\x2\x1C0\x1CD\x3\x2\x2\x2\x1C1\x1C2\f\x4\x2\x2\x1C2\x1C3"+
		"\a~\x2\x2\x1C3\x1CC\ay\x2\x2\x1C4\x1C6\f\x3\x2\x2\x1C5\x1C7\a>\x2\x2\x1C6"+
		"\x1C5\x3\x2\x2\x2\x1C6\x1C7\x3\x2\x2\x2\x1C7\x1C8\x3\x2\x2\x2\x1C8\x1C9"+
		"\x5\x15E\xB0\x2\x1C9\x1CA\ay\x2\x2\x1CA\x1CC\x3\x2\x2\x2\x1CB\x1C1\x3"+
		"\x2\x2\x2\x1CB\x1C4\x3\x2\x2\x2\x1CC\x1CF\x3\x2\x2\x2\x1CD\x1CB\x3\x2"+
		"\x2\x2\x1CD\x1CE\x3\x2\x2\x2\x1CE\r\x3\x2\x2\x2\x1CF\x1CD\x3\x2\x2\x2"+
		"\x1D0\x1D2\x5\x10\t\x2\x1D1\x1D3\x5\x1E\x10\x2\x1D2\x1D1\x3\x2\x2\x2\x1D2"+
		"\x1D3\x3\x2\x2\x2\x1D3\x1D4\x3\x2\x2\x2\x1D4\x1D5\x5\x62\x32\x2\x1D5\xF"+
		"\x3\x2\x2\x2\x1D6\x1D8\aQ\x2\x2\x1D7\x1D9\x5\x12\n\x2\x1D8\x1D7\x3\x2"+
		"\x2\x2\x1D8\x1D9\x3\x2\x2\x2\x1D9\x1DA\x3\x2\x2\x2\x1DA\x1DB\aR\x2\x2"+
		"\x1DB\x11\x3\x2\x2\x2\x1DC\x1E3\x5\x14\v\x2\x1DD\x1E3\x5\x16\f\x2\x1DE"+
		"\x1DF\x5\x14\v\x2\x1DF\x1E0\at\x2\x2\x1E0\x1E1\x5\x16\f\x2\x1E1\x1E3\x3"+
		"\x2\x2\x2\x1E2\x1DC\x3\x2\x2\x2\x1E2\x1DD\x3\x2\x2\x2\x1E2\x1DE\x3\x2"+
		"\x2\x2\x1E3\x13\x3\x2\x2\x2\x1E4\x1E5\t\x2\x2\x2\x1E5\x15\x3\x2\x2\x2"+
		"\x1E6\x1E7\b\f\x1\x2\x1E7\x1E9\x5\x18\r\x2\x1E8\x1EA\a}\x2\x2\x1E9\x1E8"+
		"\x3\x2\x2\x2\x1E9\x1EA\x3\x2\x2\x2\x1EA\x1F3\x3\x2\x2\x2\x1EB\x1EC\f\x3"+
		"\x2\x2\x1EC\x1ED\at\x2\x2\x1ED\x1EF\x5\x18\r\x2\x1EE\x1F0\a}\x2\x2\x1EF"+
		"\x1EE\x3\x2\x2\x2\x1EF\x1F0\x3\x2\x2\x2\x1F0\x1F2\x3\x2\x2\x2\x1F1\x1EB"+
		"\x3\x2\x2\x2\x1F2\x1F5\x3\x2\x2\x2\x1F3\x1F1\x3\x2\x2\x2\x1F3\x1F4\x3"+
		"\x2\x2\x2\x1F4\x17\x3\x2\x2\x2\x1F5\x1F3\x3\x2\x2\x2\x1F6\x1F9\x5\x1A"+
		"\xE\x2\x1F7\x1F9\x5\x1C\xF\x2\x1F8\x1F6\x3\x2\x2\x2\x1F8\x1F7\x3\x2\x2"+
		"\x2\x1F9\x19\x3\x2\x2\x2\x1FA\x1FF\a~\x2\x2\x1FB\x1FC\a[\x2\x2\x1FC\x1FF"+
		"\a~\x2\x2\x1FD\x1FF\a?\x2\x2\x1FE\x1FA\x3\x2\x2\x2\x1FE\x1FB\x3\x2\x2"+
		"\x2\x1FE\x1FD\x3\x2\x2\x2\x1FF\x1B\x3\x2\x2\x2\x200\x201\a~\x2\x2\x201"+
		"\x206\x5\x114\x8B\x2\x202\x203\a[\x2\x2\x203\x204\a~\x2\x2\x204\x206\x5"+
		"\x114\x8B\x2\x205\x200\x3\x2\x2\x2\x205\x202\x3\x2\x2\x2\x206\x1D\x3\x2"+
		"\x2\x2\x207\x208\aO\x2\x2\x208\x209\x5\x10A\x86\x2\x209\x20B\aP\x2\x2"+
		"\x20A\x20C\a)\x2\x2\x20B\x20A\x3\x2\x2\x2\x20B\x20C\x3\x2\x2\x2\x20C\x20E"+
		"\x3\x2\x2\x2\x20D\x20F\x5\x17A\xBE\x2\x20E\x20D\x3\x2\x2\x2\x20E\x20F"+
		"\x3\x2\x2\x2\x20F\x211\x3\x2\x2\x2\x210\x212\x5\xD0i\x2\x211\x210\x3\x2"+
		"\x2\x2\x211\x212\x3\x2\x2\x2\x212\x214\x3\x2\x2\x2\x213\x215\x5\xF2z\x2"+
		"\x214\x213\x3\x2\x2\x2\x214\x215\x3\x2\x2\x2\x215\x1F\x3\x2\x2\x2\x216"+
		"\x217\b\x11\x1\x2\x217\x257\x5\x4\x3\x2\x218\x219\x5\x98M\x2\x219\x21B"+
		"\aO\x2\x2\x21A\x21C\x5\"\x12\x2\x21B\x21A\x3\x2\x2\x2\x21B\x21C\x3\x2"+
		"\x2\x2\x21C\x21D\x3\x2\x2\x2\x21D\x21E\aP\x2\x2\x21E\x257\x3\x2\x2\x2"+
		"\x21F\x220\x5\x168\xB5\x2\x220\x222\aO\x2\x2\x221\x223\x5\"\x12\x2\x222"+
		"\x221\x3\x2\x2\x2\x222\x223\x3\x2\x2\x2\x223\x224\x3\x2\x2\x2\x224\x225"+
		"\aP\x2\x2\x225\x257\x3\x2\x2\x2\x226\x227\x5\x98M\x2\x227\x228\x5\x11C"+
		"\x8F\x2\x228\x257\x3\x2\x2\x2\x229\x22A\x5\x168\xB5\x2\x22A\x22B\x5\x11C"+
		"\x8F\x2\x22B\x257\x3\x2\x2\x2\x22C\x22D\a\x19\x2\x2\x22D\x22E\a`\x2\x2"+
		"\x22E\x22F\x5\xFE\x80\x2\x22F\x230\a\x61\x2\x2\x230\x231\aO\x2\x2\x231"+
		"\x232\x5X-\x2\x232\x233\aP\x2\x2\x233\x257\x3\x2\x2\x2\x234\x235\a;\x2"+
		"\x2\x235\x236\a`\x2\x2\x236\x237\x5\xFE\x80\x2\x237\x238\a\x61\x2\x2\x238"+
		"\x239\aO\x2\x2\x239\x23A\x5X-\x2\x23A\x23B\aP\x2\x2\x23B\x257\x3\x2\x2"+
		"\x2\x23C\x23D\a\x34\x2\x2\x23D\x23E\a`\x2\x2\x23E\x23F\x5\xFE\x80\x2\x23F"+
		"\x240\a\x61\x2\x2\x240\x241\aO\x2\x2\x241\x242\x5X-\x2\x242\x243\aP\x2"+
		"\x2\x243\x257\x3\x2\x2\x2\x244\x245\a\x12\x2\x2\x245\x246\a`\x2\x2\x246"+
		"\x247\x5\xFE\x80\x2\x247\x248\a\x61\x2\x2\x248\x249\aO\x2\x2\x249\x24A"+
		"\x5X-\x2\x24A\x24B\aP\x2\x2\x24B\x257\x3\x2\x2\x2\x24C\x24D\a\x45\x2\x2"+
		"\x24D\x24E\aO\x2\x2\x24E\x24F\x5X-\x2\x24F\x250\aP\x2\x2\x250\x257\x3"+
		"\x2\x2\x2\x251\x252\a\x45\x2\x2\x252\x253\aO\x2\x2\x253\x254\x5\xFE\x80"+
		"\x2\x254\x255\aP\x2\x2\x255\x257\x3\x2\x2\x2\x256\x216\x3\x2\x2\x2\x256"+
		"\x218\x3\x2\x2\x2\x256\x21F\x3\x2\x2\x2\x256\x226\x3\x2\x2\x2\x256\x229"+
		"\x3\x2\x2\x2\x256\x22C\x3\x2\x2\x2\x256\x234\x3\x2\x2\x2\x256\x23C\x3"+
		"\x2\x2\x2\x256\x244\x3\x2\x2\x2\x256\x24C\x3\x2\x2\x2\x256\x251\x3\x2"+
		"\x2\x2\x257\x280\x3\x2\x2\x2\x258\x259\f\x15\x2\x2\x259\x25A\aQ\x2\x2"+
		"\x25A\x25B\x5X-\x2\x25B\x25C\aR\x2\x2\x25C\x27F\x3\x2\x2\x2\x25D\x25E"+
		"\f\x14\x2\x2\x25E\x25F\aQ\x2\x2\x25F\x260\x5\x11C\x8F\x2\x260\x261\aR"+
		"\x2\x2\x261\x27F\x3\x2\x2\x2\x262\x263\f\x13\x2\x2\x263\x265\aO\x2\x2"+
		"\x264\x266\x5\"\x12\x2\x265\x264\x3\x2\x2\x2\x265\x266\x3\x2\x2\x2\x266"+
		"\x267\x3\x2\x2\x2\x267\x27F\aP\x2\x2\x268\x269\f\xE\x2\x2\x269\x26B\a"+
		"{\x2\x2\x26A\x26C\a>\x2\x2\x26B\x26A\x3\x2\x2\x2\x26B\x26C\x3\x2\x2\x2"+
		"\x26C\x26D\x3\x2\x2\x2\x26D\x27F\x5\x6\x4\x2\x26E\x26F\f\r\x2\x2\x26F"+
		"\x271\av\x2\x2\x270\x272\a>\x2\x2\x271\x270\x3\x2\x2\x2\x271\x272\x3\x2"+
		"\x2\x2\x272\x273\x3\x2\x2\x2\x273\x27F\x5\x6\x4\x2\x274\x275\f\f\x2\x2"+
		"\x275\x276\a{\x2\x2\x276\x27F\x5$\x13\x2\x277\x278\f\v\x2\x2\x278\x279"+
		"\av\x2\x2\x279\x27F\x5$\x13\x2\x27A\x27B\f\n\x2\x2\x27B\x27F\ar\x2\x2"+
		"\x27C\x27D\f\t\x2\x2\x27D\x27F\as\x2\x2\x27E\x258\x3\x2\x2\x2\x27E\x25D"+
		"\x3\x2\x2\x2\x27E\x262\x3\x2\x2\x2\x27E\x268\x3\x2\x2\x2\x27E\x26E\x3"+
		"\x2\x2\x2\x27E\x274\x3\x2\x2\x2\x27E\x277\x3\x2\x2\x2\x27E\x27A\x3\x2"+
		"\x2\x2\x27E\x27C\x3\x2\x2\x2\x27F\x282\x3\x2\x2\x2\x280\x27E\x3\x2\x2"+
		"\x2\x280\x281\x3\x2\x2\x2\x281!\x3\x2\x2\x2\x282\x280\x3\x2\x2\x2\x283"+
		"\x284\x5\x11A\x8E\x2\x284#\x3\x2\x2\x2\x285\x287\x5\f\a\x2\x286\x285\x3"+
		"\x2\x2\x2\x286\x287\x3\x2\x2\x2\x287\x288\x3\x2\x2\x2\x288\x289\x5\x9A"+
		"N\x2\x289\x28A\ay\x2\x2\x28A\x28B\a]\x2\x2\x28B\x28C\x5\x9AN\x2\x28C\x29C"+
		"\x3\x2\x2\x2\x28D\x28E\x5\f\a\x2\x28E\x28F\a>\x2\x2\x28F\x290\x5\x15E"+
		"\xB0\x2\x290\x291\ay\x2\x2\x291\x292\a]\x2\x2\x292\x293\x5\x9AN\x2\x293"+
		"\x29C\x3\x2\x2\x2\x294\x296\x5\f\a\x2\x295\x294\x3\x2\x2\x2\x295\x296"+
		"\x3\x2\x2\x2\x296\x297\x3\x2\x2\x2\x297\x298\a]\x2\x2\x298\x29C\x5\x9A"+
		"N\x2\x299\x29A\a]\x2\x2\x29A\x29C\x5\x9CO\x2\x29B\x286\x3\x2\x2\x2\x29B"+
		"\x28D\x3\x2\x2\x2\x29B\x295\x3\x2\x2\x2\x29B\x299\x3\x2\x2\x2\x29C%\x3"+
		"\x2\x2\x2\x29D\x2BA\x5 \x11\x2\x29E\x29F\ar\x2\x2\x29F\x2BA\x5:\x1E\x2"+
		"\x2A0\x2A1\as\x2\x2\x2A1\x2BA\x5:\x1E\x2\x2A2\x2A3\x5(\x15\x2\x2A3\x2A4"+
		"\x5:\x1E\x2\x2A4\x2BA\x3\x2\x2\x2\x2A5\x2A6\a\x38\x2\x2\x2A6\x2BA\x5&"+
		"\x14\x2\x2A7\x2A8\a\x38\x2\x2\x2A8\x2A9\aO\x2\x2\x2A9\x2AA\x5\xFE\x80"+
		"\x2\x2AA\x2AB\aP\x2\x2\x2AB\x2BA\x3\x2\x2\x2\x2AC\x2AD\a\x38\x2\x2\x2AD"+
		"\x2AE\a}\x2\x2\x2AE\x2AF\aO\x2\x2\x2AF\x2B0\a~\x2\x2\x2B0\x2BA\aP\x2\x2"+
		"\x2B1\x2B2\a\x5\x2\x2\x2B2\x2B3\aO\x2\x2\x2B3\x2B4\x5\xFE\x80\x2\x2B4"+
		"\x2B5\aP\x2\x2\x2B5\x2BA\x3\x2\x2\x2\x2B6\x2BA\x5\x38\x1D\x2\x2B7\x2BA"+
		"\x5*\x16\x2\x2B8\x2BA\x5\x36\x1C\x2\x2B9\x29D\x3\x2\x2\x2\x2B9\x29E\x3"+
		"\x2\x2\x2\x2B9\x2A0\x3\x2\x2\x2\x2B9\x2A2\x3\x2\x2\x2\x2B9\x2A5\x3\x2"+
		"\x2\x2\x2B9\x2A7\x3\x2\x2\x2\x2B9\x2AC\x3\x2\x2\x2\x2B9\x2B1\x3\x2\x2"+
		"\x2\x2B9\x2B6\x3\x2\x2\x2\x2B9\x2B7\x3\x2\x2\x2\x2B9\x2B8\x3\x2\x2\x2"+
		"\x2BA\'\x3\x2\x2\x2\x2BB\x2BC\t\x3\x2\x2\x2BC)\x3\x2\x2\x2\x2BD\x2BF\a"+
		"y\x2\x2\x2BE\x2BD\x3\x2\x2\x2\x2BE\x2BF\x3\x2\x2\x2\x2BF\x2C0\x3\x2\x2"+
		"\x2\x2C0\x2C2\a+\x2\x2\x2C1\x2C3\x5,\x17\x2\x2C2\x2C1\x3\x2\x2\x2\x2C2"+
		"\x2C3\x3\x2\x2\x2\x2C3\x2C4\x3\x2\x2\x2\x2C4\x2C6\x5.\x18\x2\x2C5\x2C7"+
		"\x5\x34\x1B\x2\x2C6\x2C5\x3\x2\x2\x2\x2C6\x2C7\x3\x2\x2\x2\x2C7\x2D6\x3"+
		"\x2\x2\x2\x2C8\x2CA\ay\x2\x2\x2C9\x2C8\x3\x2\x2\x2\x2C9\x2CA\x3\x2\x2"+
		"\x2\x2CA\x2CB\x3\x2\x2\x2\x2CB\x2CD\a+\x2\x2\x2CC\x2CE\x5,\x17\x2\x2CD"+
		"\x2CC\x3\x2\x2\x2\x2CD\x2CE\x3\x2\x2\x2\x2CE\x2CF\x3\x2\x2\x2\x2CF\x2D0"+
		"\aO\x2\x2\x2D0\x2D1\x5\xFE\x80\x2\x2D1\x2D3\aP\x2\x2\x2D2\x2D4\x5\x34"+
		"\x1B\x2\x2D3\x2D2\x3\x2\x2\x2\x2D3\x2D4\x3\x2\x2\x2\x2D4\x2D6\x3\x2\x2"+
		"\x2\x2D5\x2BE\x3\x2\x2\x2\x2D5\x2C9\x3\x2\x2\x2\x2D6+\x3\x2\x2\x2\x2D7"+
		"\x2D8\aO\x2\x2\x2D8\x2D9\x5\"\x12\x2\x2D9\x2DA\aP\x2\x2\x2DA-\x3\x2\x2"+
		"\x2\x2DB\x2DD\x5\x94K\x2\x2DC\x2DE\x5\x30\x19\x2\x2DD\x2DC\x3\x2\x2\x2"+
		"\x2DD\x2DE\x3\x2\x2\x2\x2DE/\x3\x2\x2\x2\x2DF\x2E1\x5\xF4{\x2\x2E0\x2E2"+
		"\x5\x30\x19\x2\x2E1\x2E0\x3\x2\x2\x2\x2E1\x2E2\x3\x2\x2\x2\x2E2\x2E5\x3"+
		"\x2\x2\x2\x2E3\x2E5\x5\x32\x1A\x2\x2E4\x2DF\x3\x2\x2\x2\x2E4\x2E3\x3\x2"+
		"\x2\x2\x2E5\x31\x3\x2\x2\x2\x2E6\x2E7\b\x1A\x1\x2\x2E7\x2E8\aQ\x2\x2\x2E8"+
		"\x2E9\x5X-\x2\x2E9\x2EB\aR\x2\x2\x2EA\x2EC\x5\xD0i\x2\x2EB\x2EA\x3\x2"+
		"\x2\x2\x2EB\x2EC\x3\x2\x2\x2\x2EC\x2F6\x3\x2\x2\x2\x2ED\x2EE\f\x3\x2\x2"+
		"\x2EE\x2EF\aQ\x2\x2\x2EF\x2F0\x5Z.\x2\x2F0\x2F2\aR\x2\x2\x2F1\x2F3\x5"+
		"\xD0i\x2\x2F2\x2F1\x3\x2\x2\x2\x2F2\x2F3\x3\x2\x2\x2\x2F3\x2F5\x3\x2\x2"+
		"\x2\x2F4\x2ED\x3\x2\x2\x2\x2F5\x2F8\x3\x2\x2\x2\x2F6\x2F4\x3\x2\x2\x2"+
		"\x2F6\x2F7\x3\x2\x2\x2\x2F7\x33\x3\x2\x2\x2\x2F8\x2F6\x3\x2\x2\x2\x2F9"+
		"\x2FB\aO\x2\x2\x2FA\x2FC\x5\"\x12\x2\x2FB\x2FA\x3\x2\x2\x2\x2FB\x2FC\x3"+
		"\x2\x2\x2\x2FC\x2FD\x3\x2\x2\x2\x2FD\x300\aP\x2\x2\x2FE\x300\x5\x11C\x8F"+
		"\x2\x2FF\x2F9\x3\x2\x2\x2\x2FF\x2FE\x3\x2\x2\x2\x300\x35\x3\x2\x2\x2\x301"+
		"\x303\ay\x2\x2\x302\x301\x3\x2\x2\x2\x302\x303\x3\x2\x2\x2\x303\x304\x3"+
		"\x2\x2\x2\x304\x305\a\x16\x2\x2\x305\x30E\x5:\x1E\x2\x306\x308\ay\x2\x2"+
		"\x307\x306\x3\x2\x2\x2\x307\x308\x3\x2\x2\x2\x308\x309\x3\x2\x2\x2\x309"+
		"\x30A\a\x16\x2\x2\x30A\x30B\aQ\x2\x2\x30B\x30C\aR\x2\x2\x30C\x30E\x5:"+
		"\x1E\x2\x30D\x302\x3\x2\x2\x2\x30D\x307\x3\x2\x2\x2\x30E\x37\x3\x2\x2"+
		"\x2\x30F\x310\a,\x2\x2\x310\x311\aO\x2\x2\x311\x312\x5X-\x2\x312\x313"+
		"\aP\x2\x2\x313\x39\x3\x2\x2\x2\x314\x31B\x5&\x14\x2\x315\x316\aO\x2\x2"+
		"\x316\x317\x5\xFE\x80\x2\x317\x318\aP\x2\x2\x318\x319\x5:\x1E\x2\x319"+
		"\x31B\x3\x2\x2\x2\x31A\x314\x3\x2\x2\x2\x31A\x315\x3\x2\x2\x2\x31B;\x3"+
		"\x2\x2\x2\x31C\x31D\b\x1F\x1\x2\x31D\x31E\x5:\x1E\x2\x31E\x327\x3\x2\x2"+
		"\x2\x31F\x320\f\x4\x2\x2\x320\x321\a|\x2\x2\x321\x326\x5:\x1E\x2\x322"+
		"\x323\f\x3\x2\x2\x323\x324\au\x2\x2\x324\x326\x5:\x1E\x2\x325\x31F\x3"+
		"\x2\x2\x2\x325\x322\x3\x2\x2\x2\x326\x329\x3\x2\x2\x2\x327\x325\x3\x2"+
		"\x2\x2\x327\x328\x3\x2\x2\x2\x328=\x3\x2\x2\x2\x329\x327\x3\x2\x2\x2\x32A"+
		"\x32B\b \x1\x2\x32B\x32C\x5<\x1F\x2\x32C\x338\x3\x2\x2\x2\x32D\x32E\f"+
		"\x5\x2\x2\x32E\x32F\aW\x2\x2\x32F\x337\x5<\x1F\x2\x330\x331\f\x4\x2\x2"+
		"\x331\x332\aX\x2\x2\x332\x337\x5<\x1F\x2\x333\x334\f\x3\x2\x2\x334\x335"+
		"\aY\x2\x2\x335\x337\x5<\x1F\x2\x336\x32D\x3\x2\x2\x2\x336\x330\x3\x2\x2"+
		"\x2\x336\x333\x3\x2\x2\x2\x337\x33A\x3\x2\x2\x2\x338\x336\x3\x2\x2\x2"+
		"\x338\x339\x3\x2\x2\x2\x339?\x3\x2\x2\x2\x33A\x338\x3\x2\x2\x2\x33B\x33C"+
		"\b!\x1\x2\x33C\x33D\x5> \x2\x33D\x346\x3\x2\x2\x2\x33E\x33F\f\x4\x2\x2"+
		"\x33F\x340\aU\x2\x2\x340\x345\x5> \x2\x341\x342\f\x3\x2\x2\x342\x343\a"+
		"V\x2\x2\x343\x345\x5> \x2\x344\x33E\x3\x2\x2\x2\x344\x341\x3\x2\x2\x2"+
		"\x345\x348\x3\x2\x2\x2\x346\x344\x3\x2\x2\x2\x346\x347\x3\x2\x2\x2\x347"+
		"\x41\x3\x2\x2\x2\x348\x346\x3\x2\x2\x2\x349\x34A\b\"\x1\x2\x34A\x34B\x5"+
		"@!\x2\x34B\x355\x3\x2\x2\x2\x34C\x34D\f\x4\x2\x2\x34D\x34E\aj\x2\x2\x34E"+
		"\x354\x5@!\x2\x34F\x350\f\x3\x2\x2\x350\x351\x5\x182\xC2\x2\x351\x352"+
		"\x5@!\x2\x352\x354\x3\x2\x2\x2\x353\x34C\x3\x2\x2\x2\x353\x34F\x3\x2\x2"+
		"\x2\x354\x357\x3\x2\x2\x2\x355\x353\x3\x2\x2\x2\x355\x356\x3\x2\x2\x2"+
		"\x356\x43\x3\x2\x2\x2\x357\x355\x3\x2\x2\x2\x358\x359\b#\x1\x2\x359\x35A"+
		"\x5\x42\"\x2\x35A\x369\x3\x2\x2\x2\x35B\x35C\f\x6\x2\x2\x35C\x35D\a`\x2"+
		"\x2\x35D\x368\x5\x42\"\x2\x35E\x35F\f\x5\x2\x2\x35F\x360\a\x61\x2\x2\x360"+
		"\x368\x5\x42\"\x2\x361\x362\f\x4\x2\x2\x362\x363\an\x2\x2\x363\x368\x5"+
		"\x42\"\x2\x364\x365\f\x3\x2\x2\x365\x366\ao\x2\x2\x366\x368\x5\x42\"\x2"+
		"\x367\x35B\x3\x2\x2\x2\x367\x35E\x3\x2\x2\x2\x367\x361\x3\x2\x2\x2\x367"+
		"\x364\x3\x2\x2\x2\x368\x36B\x3\x2\x2\x2\x369\x367\x3\x2\x2\x2\x369\x36A"+
		"\x3\x2\x2\x2\x36A\x45\x3\x2\x2\x2\x36B\x369\x3\x2\x2\x2\x36C\x36D\b$\x1"+
		"\x2\x36D\x36E\x5\x44#\x2\x36E\x377\x3\x2\x2\x2\x36F\x370\f\x4\x2\x2\x370"+
		"\x371\al\x2\x2\x371\x376\x5\x44#\x2\x372\x373\f\x3\x2\x2\x373\x374\am"+
		"\x2\x2\x374\x376\x5\x44#\x2\x375\x36F\x3\x2\x2\x2\x375\x372\x3\x2\x2\x2"+
		"\x376\x379\x3\x2\x2\x2\x377\x375\x3\x2\x2\x2\x377\x378\x3\x2\x2\x2\x378"+
		"G\x3\x2\x2\x2\x379\x377\x3\x2\x2\x2\x37A\x37B\b%\x1\x2\x37B\x37C\x5\x46"+
		"$\x2\x37C\x382\x3\x2\x2\x2\x37D\x37E\f\x3\x2\x2\x37E\x37F\a[\x2\x2\x37F"+
		"\x381\x5\x46$\x2\x380\x37D\x3\x2\x2\x2\x381\x384\x3\x2\x2\x2\x382\x380"+
		"\x3\x2\x2\x2\x382\x383\x3\x2\x2\x2\x383I\x3\x2\x2\x2\x384\x382\x3\x2\x2"+
		"\x2\x385\x386\b&\x1\x2\x386\x387\x5H%\x2\x387\x38D\x3\x2\x2\x2\x388\x389"+
		"\f\x3\x2\x2\x389\x38A\aZ\x2\x2\x38A\x38C\x5H%\x2\x38B\x388\x3\x2\x2\x2"+
		"\x38C\x38F\x3\x2\x2\x2\x38D\x38B\x3\x2\x2\x2\x38D\x38E\x3\x2\x2\x2\x38E"+
		"K\x3\x2\x2\x2\x38F\x38D\x3\x2\x2\x2\x390\x391\b\'\x1\x2\x391\x392\x5J"+
		"&\x2\x392\x398\x3\x2\x2\x2\x393\x394\f\x3\x2\x2\x394\x395\a\\\x2\x2\x395"+
		"\x397\x5J&\x2\x396\x393\x3\x2\x2\x2\x397\x39A\x3\x2\x2\x2\x398\x396\x3"+
		"\x2\x2\x2\x398\x399\x3\x2\x2\x2\x399M\x3\x2\x2\x2\x39A\x398\x3\x2\x2\x2"+
		"\x39B\x39C\b(\x1\x2\x39C\x39D\x5L\'\x2\x39D\x3A3\x3\x2\x2\x2\x39E\x39F"+
		"\f\x3\x2\x2\x39F\x3A0\ap\x2\x2\x3A0\x3A2\x5L\'\x2\x3A1\x39E\x3\x2\x2\x2"+
		"\x3A2\x3A5\x3\x2\x2\x2\x3A3\x3A1\x3\x2\x2\x2\x3A3\x3A4\x3\x2\x2\x2\x3A4"+
		"O\x3\x2\x2\x2\x3A5\x3A3\x3\x2\x2\x2\x3A6\x3A7\b)\x1\x2\x3A7\x3A8\x5N("+
		"\x2\x3A8\x3AE\x3\x2\x2\x2\x3A9\x3AA\f\x3\x2\x2\x3AA\x3AB\aq\x2\x2\x3AB"+
		"\x3AD\x5N(\x2\x3AC\x3A9\x3\x2\x2\x2\x3AD\x3B0\x3\x2\x2\x2\x3AE\x3AC\x3"+
		"\x2\x2\x2\x3AE\x3AF\x3\x2\x2\x2\x3AFQ\x3\x2\x2\x2\x3B0\x3AE\x3\x2\x2\x2"+
		"\x3B1\x3B9\x5P)\x2\x3B2\x3B3\x5P)\x2\x3B3\x3B4\aw\x2\x2\x3B4\x3B5\x5X"+
		"-\x2\x3B5\x3B6\ax\x2\x2\x3B6\x3B7\x5T+\x2\x3B7\x3B9\x3\x2\x2\x2\x3B8\x3B1"+
		"\x3\x2\x2\x2\x3B8\x3B2\x3\x2\x2\x2\x3B9S\x3\x2\x2\x2\x3BA\x3C1\x5R*\x2"+
		"\x3BB\x3BC\x5P)\x2\x3BC\x3BD\x5V,\x2\x3BD\x3BE\x5\x118\x8D\x2\x3BE\x3C1"+
		"\x3\x2\x2\x2\x3BF\x3C1\x5\x178\xBD\x2\x3C0\x3BA\x3\x2\x2\x2\x3C0\x3BB"+
		"\x3\x2\x2\x2\x3C0\x3BF\x3\x2\x2\x2\x3C1U\x3\x2\x2\x2\x3C2\x3CE\a_\x2\x2"+
		"\x3C3\x3CE\a\x64\x2\x2\x3C4\x3CE\a\x65\x2\x2\x3C5\x3CE\a\x66\x2\x2\x3C6"+
		"\x3CE\a\x62\x2\x2\x3C7\x3CE\a\x63\x2\x2\x3C8\x3CE\x5\x184\xC3\x2\x3C9"+
		"\x3CE\ak\x2\x2\x3CA\x3CE\ah\x2\x2\x3CB\x3CE\ag\x2\x2\x3CC\x3CE\ai\x2\x2"+
		"\x3CD\x3C2\x3\x2\x2\x2\x3CD\x3C3\x3\x2\x2\x2\x3CD\x3C4\x3\x2\x2\x2\x3CD"+
		"\x3C5\x3\x2\x2\x2\x3CD\x3C6\x3\x2\x2\x2\x3CD\x3C7\x3\x2\x2\x2\x3CD\x3C8"+
		"\x3\x2\x2\x2\x3CD\x3C9\x3\x2\x2\x2\x3CD\x3CA\x3\x2\x2\x2\x3CD\x3CB\x3"+
		"\x2\x2\x2\x3CD\x3CC\x3\x2\x2\x2\x3CEW\x3\x2\x2\x2\x3CF\x3D0\b-\x1\x2\x3D0"+
		"\x3D1\x5T+\x2\x3D1\x3D7\x3\x2\x2\x2\x3D2\x3D3\f\x3\x2\x2\x3D3\x3D4\at"+
		"\x2\x2\x3D4\x3D6\x5T+\x2\x3D5\x3D2\x3\x2\x2\x2\x3D6\x3D9\x3\x2\x2\x2\x3D7"+
		"\x3D5\x3\x2\x2\x2\x3D7\x3D8\x3\x2\x2\x2\x3D8Y\x3\x2\x2\x2\x3D9\x3D7\x3"+
		"\x2\x2\x2\x3DA\x3DB\x5R*\x2\x3DB[\x3\x2\x2\x2\x3DC\x3F7\x5^\x30\x2\x3DD"+
		"\x3DF\x5\xD0i\x2\x3DE\x3DD\x3\x2\x2\x2\x3DE\x3DF\x3\x2\x2\x2\x3DF\x3E0"+
		"\x3\x2\x2\x2\x3E0\x3F7\x5`\x31\x2\x3E1\x3E3\x5\xD0i\x2\x3E2\x3E1\x3\x2"+
		"\x2\x2\x3E2\x3E3\x3\x2\x2\x2\x3E3\x3E4\x3\x2\x2\x2\x3E4\x3F7\x5\x62\x32"+
		"\x2\x3E5\x3E7\x5\xD0i\x2\x3E6\x3E5\x3\x2\x2\x2\x3E6\x3E7\x3\x2\x2\x2\x3E7"+
		"\x3E8\x3\x2\x2\x2\x3E8\x3F7\x5\x66\x34\x2\x3E9\x3EB\x5\xD0i\x2\x3EA\x3E9"+
		"\x3\x2\x2\x2\x3EA\x3EB\x3\x2\x2\x2\x3EB\x3EC\x3\x2\x2\x2\x3EC\x3F7\x5"+
		"j\x36\x2\x3ED\x3EF\x5\xD0i\x2\x3EE\x3ED\x3\x2\x2\x2\x3EE\x3EF\x3\x2\x2"+
		"\x2\x3EF\x3F0\x3\x2\x2\x2\x3F0\x3F7\x5r:\x2\x3F1\x3F7\x5t;\x2\x3F2\x3F4"+
		"\x5\xD0i\x2\x3F3\x3F2\x3\x2\x2\x2\x3F3\x3F4\x3\x2\x2\x2\x3F4\x3F5\x3\x2"+
		"\x2\x2\x3F5\x3F7\x5\x16E\xB8\x2\x3F6\x3DC\x3\x2\x2\x2\x3F6\x3DE\x3\x2"+
		"\x2\x2\x3F6\x3E2\x3\x2\x2\x2\x3F6\x3E6\x3\x2\x2\x2\x3F6\x3EA\x3\x2\x2"+
		"\x2\x3F6\x3EE\x3\x2\x2\x2\x3F6\x3F1\x3\x2\x2\x2\x3F6\x3F3\x3\x2\x2\x2"+
		"\x3F7]\x3\x2\x2\x2\x3F8\x3FA\x5\xD0i\x2\x3F9\x3F8\x3\x2\x2\x2\x3F9\x3FA"+
		"\x3\x2\x2\x2\x3FA\x3FB\x3\x2\x2\x2\x3FB\x3FC\a~\x2\x2\x3FC\x3FD\ax\x2"+
		"\x2\x3FD\x40D\x5\\/\x2\x3FE\x400\x5\xD0i\x2\x3FF\x3FE\x3\x2\x2\x2\x3FF"+
		"\x400\x3\x2\x2\x2\x400\x401\x3\x2\x2\x2\x401\x402\a\n\x2\x2\x402\x403"+
		"\x5Z.\x2\x403\x404\ax\x2\x2\x404\x405\x5\\/\x2\x405\x40D\x3\x2\x2\x2\x406"+
		"\x408\x5\xD0i\x2\x407\x406\x3\x2\x2\x2\x407\x408\x3\x2\x2\x2\x408\x409"+
		"\x3\x2\x2\x2\x409\x40A\a\x15\x2\x2\x40A\x40B\ax\x2\x2\x40B\x40D\x5\\/"+
		"\x2\x40C\x3F9\x3\x2\x2\x2\x40C\x3FF\x3\x2\x2\x2\x40C\x407\x3\x2\x2\x2"+
		"\x40D_\x3\x2\x2\x2\x40E\x410\x5X-\x2\x40F\x40E\x3\x2\x2\x2\x40F\x410\x3"+
		"\x2\x2\x2\x410\x411\x3\x2\x2\x2\x411\x412\az\x2\x2\x412\x61\x3\x2\x2\x2"+
		"\x413\x415\aS\x2\x2\x414\x416\x5\x64\x33\x2\x415\x414\x3\x2\x2\x2\x415"+
		"\x416\x3\x2\x2\x2\x416\x417\x3\x2\x2\x2\x417\x418\aT\x2\x2\x418\x63\x3"+
		"\x2\x2\x2\x419\x41A\b\x33\x1\x2\x41A\x41B\x5\\/\x2\x41B\x420\x3\x2\x2"+
		"\x2\x41C\x41D\f\x3\x2\x2\x41D\x41F\x5\\/\x2\x41E\x41C\x3\x2\x2\x2\x41F"+
		"\x422\x3\x2\x2\x2\x420\x41E\x3\x2\x2\x2\x420\x421\x3\x2\x2\x2\x421\x65"+
		"\x3\x2\x2\x2\x422\x420\x3\x2\x2\x2\x423\x424\a%\x2\x2\x424\x425\aO\x2"+
		"\x2\x425\x426\x5h\x35\x2\x426\x427\aP\x2\x2\x427\x428\x5\\/\x2\x428\x438"+
		"\x3\x2\x2\x2\x429\x42A\a%\x2\x2\x42A\x42B\aO\x2\x2\x42B\x42C\x5h\x35\x2"+
		"\x42C\x42D\aP\x2\x2\x42D\x42E\x5\\/\x2\x42E\x42F\a\x1A\x2\x2\x42F\x430"+
		"\x5\\/\x2\x430\x438\x3\x2\x2\x2\x431\x432\a=\x2\x2\x432\x433\aO\x2\x2"+
		"\x433\x434\x5h\x35\x2\x434\x435\aP\x2\x2\x435\x436\x5\\/\x2\x436\x438"+
		"\x3\x2\x2\x2\x437\x423\x3\x2\x2\x2\x437\x429\x3\x2\x2\x2\x437\x431\x3"+
		"\x2\x2\x2\x438g\x3\x2\x2\x2\x439\x44A\x5X-\x2\x43A\x43C\x5\xD0i\x2\x43B"+
		"\x43A\x3\x2\x2\x2\x43B\x43C\x3\x2\x2\x2\x43C\x43D\x3\x2\x2\x2\x43D\x43E"+
		"\x5\x88\x45\x2\x43E\x43F\x5\xEAv\x2\x43F\x440\a_\x2\x2\x440\x441\x5\x118"+
		"\x8D\x2\x441\x44A\x3\x2\x2\x2\x442\x444\x5\xD0i\x2\x443\x442\x3\x2\x2"+
		"\x2\x443\x444\x3\x2\x2\x2\x444\x445\x3\x2\x2\x2\x445\x446\x5\x88\x45\x2"+
		"\x446\x447\x5\xEAv\x2\x447\x448\x5\x11C\x8F\x2\x448\x44A\x3\x2\x2\x2\x449"+
		"\x439\x3\x2\x2\x2\x449\x43B\x3\x2\x2\x2\x449\x443\x3\x2\x2\x2\x44Ai\x3"+
		"\x2\x2\x2\x44B\x44C\aN\x2\x2\x44C\x44D\aO\x2\x2\x44D\x44E\x5h\x35\x2\x44E"+
		"\x44F\aP\x2\x2\x44F\x450\x5\\/\x2\x450\x46F\x3\x2\x2\x2\x451\x452\a\x17"+
		"\x2\x2\x452\x453\x5\\/\x2\x453\x454\aN\x2\x2\x454\x455\aO\x2\x2\x455\x456"+
		"\x5X-\x2\x456\x457\aP\x2\x2\x457\x458\az\x2\x2\x458\x46F\x3\x2\x2\x2\x459"+
		"\x45A\a\"\x2\x2\x45A\x45B\aO\x2\x2\x45B\x45D\x5l\x37\x2\x45C\x45E\x5h"+
		"\x35\x2\x45D\x45C\x3\x2\x2\x2\x45D\x45E\x3\x2\x2\x2\x45E\x45F\x3\x2\x2"+
		"\x2\x45F\x461\az\x2\x2\x460\x462\x5X-\x2\x461\x460\x3\x2\x2\x2\x461\x462"+
		"\x3\x2\x2\x2\x462\x463\x3\x2\x2\x2\x463\x464\aP\x2\x2\x464\x465\x5\\/"+
		"\x2\x465\x46F\x3\x2\x2\x2\x466\x467\a\"\x2\x2\x467\x468\aO\x2\x2\x468"+
		"\x469\x5n\x38\x2\x469\x46A\ax\x2\x2\x46A\x46B\x5p\x39\x2\x46B\x46C\aP"+
		"\x2\x2\x46C\x46D\x5\\/\x2\x46D\x46F\x3\x2\x2\x2\x46E\x44B\x3\x2\x2\x2"+
		"\x46E\x451\x3\x2\x2\x2\x46E\x459\x3\x2\x2\x2\x46E\x466\x3\x2\x2\x2\x46F"+
		"k\x3\x2\x2\x2\x470\x473\x5`\x31\x2\x471\x473\x5~@\x2\x472\x470\x3\x2\x2"+
		"\x2\x472\x471\x3\x2\x2\x2\x473m\x3\x2\x2\x2\x474\x476\x5\xD0i\x2\x475"+
		"\x474\x3\x2\x2\x2\x475\x476\x3\x2\x2\x2\x476\x477\x3\x2\x2\x2\x477\x478"+
		"\x5\x88\x45\x2\x478\x479\x5\xEAv\x2\x479o\x3\x2\x2\x2\x47A\x47D\x5X-\x2"+
		"\x47B\x47D\x5\x11C\x8F\x2\x47C\x47A\x3\x2\x2\x2\x47C\x47B\x3\x2\x2\x2"+
		"\x47Dq\x3\x2\x2\x2\x47E\x47F\a\t\x2\x2\x47F\x48F\az\x2\x2\x480\x481\a"+
		"\x13\x2\x2\x481\x48F\az\x2\x2\x482\x484\a\x35\x2\x2\x483\x485\x5X-\x2"+
		"\x484\x483\x3\x2\x2\x2\x484\x485\x3\x2\x2\x2\x485\x486\x3\x2\x2\x2\x486"+
		"\x48F\az\x2\x2\x487\x488\a\x35\x2\x2\x488\x489\x5\x11C\x8F\x2\x489\x48A"+
		"\az\x2\x2\x48A\x48F\x3\x2\x2\x2\x48B\x48C\a$\x2\x2\x48C\x48D\a~\x2\x2"+
		"\x48D\x48F\az\x2\x2\x48E\x47E\x3\x2\x2\x2\x48E\x480\x3\x2\x2\x2\x48E\x482"+
		"\x3\x2\x2\x2\x48E\x487\x3\x2\x2\x2\x48E\x48B\x3\x2\x2\x2\x48Fs\x3\x2\x2"+
		"\x2\x490\x491\x5z>\x2\x491u\x3\x2\x2\x2\x492\x493\b<\x1\x2\x493\x494\x5"+
		"x=\x2\x494\x499\x3\x2\x2\x2\x495\x496\f\x3\x2\x2\x496\x498\x5x=\x2\x497"+
		"\x495\x3\x2\x2\x2\x498\x49B\x3\x2\x2\x2\x499\x497\x3\x2\x2\x2\x499\x49A"+
		"\x3\x2\x2\x2\x49Aw\x3\x2\x2\x2\x49B\x499\x3\x2\x2\x2\x49C\x4A6\x5z>\x2"+
		"\x49D\x4A6\x5\x110\x89\x2\x49E\x4A6\x5\x156\xAC\x2\x49F\x4A6\x5\x16A\xB6"+
		"\x2\x4A0\x4A6\x5\x16C\xB7\x2\x4A1\x4A6\x5\xCEh\x2\x4A2\x4A6\x5\xB6\\\x2"+
		"\x4A3\x4A6\x5\x82\x42\x2\x4A4\x4A6\x5\x84\x43\x2\x4A5\x49C\x3\x2\x2\x2"+
		"\x4A5\x49D\x3\x2\x2\x2\x4A5\x49E\x3\x2\x2\x2\x4A5\x49F\x3\x2\x2\x2\x4A5"+
		"\x4A0\x3\x2\x2\x2\x4A5\x4A1\x3\x2\x2\x2\x4A5\x4A2\x3\x2\x2\x2\x4A5\x4A3"+
		"\x3\x2\x2\x2\x4A5\x4A4\x3\x2\x2\x2\x4A6y\x3\x2\x2\x2\x4A7\x4B0\x5~@\x2"+
		"\x4A8\x4B0\x5\xCCg\x2\x4A9\x4B0\x5\xC4\x63\x2\x4AA\x4B0\x5\xC8\x65\x2"+
		"\x4AB\x4B0\x5\xCA\x66\x2\x4AC\x4B0\x5\x80\x41\x2\x4AD\x4B0\x5|?\x2\x4AE"+
		"\x4B0\x5\xA6T\x2\x4AF\x4A7\x3\x2\x2\x2\x4AF\x4A8\x3\x2\x2\x2\x4AF\x4A9"+
		"\x3\x2\x2\x2\x4AF\x4AA\x3\x2\x2\x2\x4AF\x4AB\x3\x2\x2\x2\x4AF\x4AC\x3"+
		"\x2\x2\x2\x4AF\x4AD\x3\x2\x2\x2\x4AF\x4AE\x3\x2\x2\x2\x4B0{\x3\x2\x2\x2"+
		"\x4B1\x4B2\aI\x2\x2\x4B2\x4B4\a~\x2\x2\x4B3\x4B5\x5\xD0i\x2\x4B4\x4B3"+
		"\x3\x2\x2\x2\x4B4\x4B5\x3\x2\x2\x2\x4B5\x4B6\x3\x2\x2\x2\x4B6\x4B7\a_"+
		"\x2\x2\x4B7\x4B8\x5\xFE\x80\x2\x4B8\x4B9\az\x2\x2\x4B9}\x3\x2\x2\x2\x4BA"+
		"\x4BC\x5\x88\x45\x2\x4BB\x4BA\x3\x2\x2\x2\x4BB\x4BC\x3\x2\x2\x2\x4BC\x4BE"+
		"\x3\x2\x2\x2\x4BD\x4BF\x5\xE6t\x2\x4BE\x4BD\x3\x2\x2\x2\x4BE\x4BF\x3\x2"+
		"\x2\x2\x4BF\x4C0\x3\x2\x2\x2\x4C0\x4C9\az\x2\x2\x4C1\x4C3\x5\xD0i\x2\x4C2"+
		"\x4C4\x5\x88\x45\x2\x4C3\x4C2\x3\x2\x2\x2\x4C3\x4C4\x3\x2\x2\x2\x4C4\x4C5"+
		"\x3\x2\x2\x2\x4C5\x4C6\x5\xE6t\x2\x4C6\x4C7\az\x2\x2\x4C7\x4C9\x3\x2\x2"+
		"\x2\x4C8\x4BB\x3\x2\x2\x2\x4C8\x4C1\x3\x2\x2\x2\x4C9\x7F\x3\x2\x2\x2\x4CA"+
		"\x4CB\a:\x2\x2\x4CB\x4CC\aO\x2\x2\x4CC\x4CD\x5Z.\x2\x4CD\x4CE\at\x2\x2"+
		"\x4CE\x4CF\a\x87\x2\x2\x4CF\x4D0\aP\x2\x2\x4D0\x4D1\az\x2\x2\x4D1\x81"+
		"\x3\x2\x2\x2\x4D2\x4D3\az\x2\x2\x4D3\x83\x3\x2\x2\x2\x4D4\x4D5\x5\xD0"+
		"i\x2\x4D5\x4D6\az\x2\x2\x4D6\x85\x3\x2\x2\x2\x4D7\x4DE\x5\x8A\x46\x2\x4D8"+
		"\x4DE\x5\x90I\x2\x4D9\x4DE\x5\x8CG\x2\x4DA\x4DE\a#\x2\x2\x4DB\x4DE\a\x44"+
		"\x2\x2\x4DC\x4DE\a\x11\x2\x2\x4DD\x4D7\x3\x2\x2\x2\x4DD\x4D8\x3\x2\x2"+
		"\x2\x4DD\x4D9\x3\x2\x2\x2\x4DD\x4DA\x3\x2\x2\x2\x4DD\x4DB\x3\x2\x2\x2"+
		"\x4DD\x4DC\x3\x2\x2\x2\x4DE\x87\x3\x2\x2\x2\x4DF\x4E1\x5\x86\x44\x2\x4E0"+
		"\x4E2\x5\xD0i\x2\x4E1\x4E0\x3\x2\x2\x2\x4E1\x4E2\x3\x2\x2\x2\x4E2\x4E7"+
		"\x3\x2\x2\x2\x4E3\x4E4\x5\x86\x44\x2\x4E4\x4E5\x5\x88\x45\x2\x4E5\x4E7"+
		"\x3\x2\x2\x2\x4E6\x4DF\x3\x2\x2\x2\x4E6\x4E3\x3\x2\x2\x2\x4E7\x89\x3\x2"+
		"\x2\x2\x4E8\x4E9\t\x4\x2\x2\x4E9\x8B\x3\x2\x2\x2\x4EA\x4EB\t\x5\x2\x2"+
		"\x4EB\x8D\x3\x2\x2\x2\x4EC\x4ED\a~\x2\x2\x4ED\x8F\x3\x2\x2\x2\x4EE\x4F2"+
		"\x5\x92J\x2\x4EF\x4F2\x5\x120\x91\x2\x4F0\x4F2\x5\xA2R\x2\x4F1\x4EE\x3"+
		"\x2\x2\x2\x4F1\x4EF\x3\x2\x2\x2\x4F1\x4F0\x3\x2\x2\x2\x4F2\x91\x3\x2\x2"+
		"\x2\x4F3\x4F8\x5\x98M\x2\x4F4\x4F8\x5\x9EP\x2\x4F5\x4F8\x5\x168\xB5\x2"+
		"\x4F6\x4F8\x5\xF8}\x2\x4F7\x4F3\x3\x2\x2\x2\x4F7\x4F4\x3\x2\x2\x2\x4F7"+
		"\x4F5\x3\x2\x2\x2\x4F7\x4F6\x3\x2\x2\x2\x4F8\x93\x3\x2\x2\x2\x4F9\x4FB"+
		"\x5\x90I\x2\x4FA\x4FC\x5\xD0i\x2\x4FB\x4FA\x3\x2\x2\x2\x4FB\x4FC\x3\x2"+
		"\x2\x2\x4FC\x501\x3\x2\x2\x2\x4FD\x4FE\x5\x90I\x2\x4FE\x4FF\x5\x94K\x2"+
		"\x4FF\x501\x3\x2\x2\x2\x500\x4F9\x3\x2\x2\x2\x500\x4FD\x3\x2\x2\x2\x501"+
		"\x95\x3\x2\x2\x2\x502\x504\x5\x92J\x2\x503\x505\x5\xD0i\x2\x504\x503\x3"+
		"\x2\x2\x2\x504\x505\x3\x2\x2\x2\x505\x50A\x3\x2\x2\x2\x506\x507\x5\x92"+
		"J\x2\x507\x508\x5\x96L\x2\x508\x50A\x3\x2\x2\x2\x509\x502\x3\x2\x2\x2"+
		"\x509\x506\x3\x2\x2\x2\x50A\x97\x3\x2\x2\x2\x50B\x50D\x5\f\a\x2\x50C\x50B"+
		"\x3\x2\x2\x2\x50C\x50D\x3\x2\x2\x2\x50D\x50E\x3\x2\x2\x2\x50E\x523\x5"+
		"\x9AN\x2\x50F\x510\x5\f\a\x2\x510\x511\a>\x2\x2\x511\x512\x5\x15E\xB0"+
		"\x2\x512\x523\x3\x2\x2\x2\x513\x523\a\f\x2\x2\x514\x523\a\r\x2\x2\x515"+
		"\x523\a\xE\x2\x2\x516\x523\aM\x2\x2\x517\x523\a\b\x2\x2\x518\x523\a\x36"+
		"\x2\x2\x519\x523\a\'\x2\x2\x51A\x523\a(\x2\x2\x51B\x523\a\x37\x2\x2\x51C"+
		"\x523\aH\x2\x2\x51D\x523\a!\x2\x2\x51E\x523\a\x18\x2\x2\x51F\x523\aK\x2"+
		"\x2\x520\x523\a\a\x2\x2\x521\x523\x5\x9CO\x2\x522\x50C\x3\x2\x2\x2\x522"+
		"\x50F\x3\x2\x2\x2\x522\x513\x3\x2\x2\x2\x522\x514\x3\x2\x2\x2\x522\x515"+
		"\x3\x2\x2\x2\x522\x516\x3\x2\x2\x2\x522\x517\x3\x2\x2\x2\x522\x518\x3"+
		"\x2\x2\x2\x522\x519\x3\x2\x2\x2\x522\x51A\x3\x2\x2\x2\x522\x51B\x3\x2"+
		"\x2\x2\x522\x51C\x3\x2\x2\x2\x522\x51D\x3\x2\x2\x2\x522\x51E\x3\x2\x2"+
		"\x2\x522\x51F\x3\x2\x2\x2\x522\x520\x3\x2\x2\x2\x522\x521\x3\x2\x2\x2"+
		"\x523\x99\x3\x2\x2\x2\x524\x529\x5\x11E\x90\x2\x525\x529\x5\xA0Q\x2\x526"+
		"\x529\x5\x8EH\x2\x527\x529\x5\x15E\xB0\x2\x528\x524\x3\x2\x2\x2\x528\x525"+
		"\x3\x2\x2\x2\x528\x526\x3\x2\x2\x2\x528\x527\x3\x2\x2\x2\x529\x9B\x3\x2"+
		"\x2\x2\x52A\x52B\a\x14\x2\x2\x52B\x52C\aO\x2\x2\x52C\x52D\x5X-\x2\x52D"+
		"\x52E\aP\x2\x2\x52E\x534\x3\x2\x2\x2\x52F\x530\a\x14\x2\x2\x530\x531\a"+
		"O\x2\x2\x531\x532\a\a\x2\x2\x532\x534\aP\x2\x2\x533\x52A\x3\x2\x2\x2\x533"+
		"\x52F\x3\x2\x2\x2\x534\x9D\x3\x2\x2\x2\x535\x537\x5\x128\x95\x2\x536\x538"+
		"\x5\xD0i\x2\x537\x536\x3\x2\x2\x2\x537\x538\x3\x2\x2\x2\x538\x53A\x3\x2"+
		"\x2\x2\x539\x53B\x5\f\a\x2\x53A\x539\x3\x2\x2\x2\x53A\x53B\x3\x2\x2\x2"+
		"\x53B\x53C\x3\x2\x2\x2\x53C\x53D\a~\x2\x2\x53D\x54E\x3\x2\x2\x2\x53E\x53F"+
		"\x5\x128\x95\x2\x53F\x540\x5\x15E\xB0\x2\x540\x54E\x3\x2\x2\x2\x541\x542"+
		"\x5\x128\x95\x2\x542\x544\x5\f\a\x2\x543\x545\a>\x2\x2\x544\x543\x3\x2"+
		"\x2\x2\x544\x545\x3\x2\x2\x2\x545\x546\x3\x2\x2\x2\x546\x547\x5\x15E\xB0"+
		"\x2\x547\x54E\x3\x2\x2\x2\x548\x54A\a\x1B\x2\x2\x549\x54B\x5\f\a\x2\x54A"+
		"\x549\x3\x2\x2\x2\x54A\x54B\x3\x2\x2\x2\x54B\x54C\x3\x2\x2\x2\x54C\x54E"+
		"\a~\x2\x2\x54D\x535\x3\x2\x2\x2\x54D\x53E\x3\x2\x2\x2\x54D\x541\x3\x2"+
		"\x2\x2\x54D\x548\x3\x2\x2\x2\x54E\x9F\x3\x2\x2\x2\x54F\x550\a~\x2\x2\x550"+
		"\xA1\x3\x2\x2\x2\x551\x552\x5\xA4S\x2\x552\x554\aS\x2\x2\x553\x555\x5"+
		"\xACW\x2\x554\x553\x3\x2\x2\x2\x554\x555\x3\x2\x2\x2\x555\x556\x3\x2\x2"+
		"\x2\x556\x557\aT\x2\x2\x557\x55F\x3\x2\x2\x2\x558\x559\x5\xA4S\x2\x559"+
		"\x55A\aS\x2\x2\x55A\x55B\x5\xACW\x2\x55B\x55C\at\x2\x2\x55C\x55D\aT\x2"+
		"\x2\x55D\x55F\x3\x2\x2\x2\x55E\x551\x3\x2\x2\x2\x55E\x558\x3\x2\x2\x2"+
		"\x55F\xA3\x3\x2\x2\x2\x560\x562\x5\xA8U\x2\x561\x563\x5\xD0i\x2\x562\x561"+
		"\x3\x2\x2\x2\x562\x563\x3\x2\x2\x2\x563\x565\x3\x2\x2\x2\x564\x566\a~"+
		"\x2\x2\x565\x564\x3\x2\x2\x2\x565\x566\x3\x2\x2\x2\x566\x568\x3\x2\x2"+
		"\x2\x567\x569\x5\xAAV\x2\x568\x567\x3\x2\x2\x2\x568\x569\x3\x2\x2\x2\x569"+
		"\x574\x3\x2\x2\x2\x56A\x56C\x5\xA8U\x2\x56B\x56D\x5\xD0i\x2\x56C\x56B"+
		"\x3\x2\x2\x2\x56C\x56D\x3\x2\x2\x2\x56D\x56E\x3\x2\x2\x2\x56E\x56F\x5"+
		"\f\a\x2\x56F\x571\a~\x2\x2\x570\x572\x5\xAAV\x2\x571\x570\x3\x2\x2\x2"+
		"\x571\x572\x3\x2\x2\x2\x572\x574\x3\x2\x2\x2\x573\x560\x3\x2\x2\x2\x573"+
		"\x56A\x3\x2\x2\x2\x574\xA5\x3\x2\x2\x2\x575\x577\x5\xA8U\x2\x576\x578"+
		"\x5\xD0i\x2\x577\x576\x3\x2\x2\x2\x577\x578\x3\x2\x2\x2\x578\x579\x3\x2"+
		"\x2\x2\x579\x57B\a~\x2\x2\x57A\x57C\x5\xAAV\x2\x57B\x57A\x3\x2\x2\x2\x57B"+
		"\x57C\x3\x2\x2\x2\x57C\x57D\x3\x2\x2\x2\x57D\x57E\az\x2\x2\x57E\xA7\x3"+
		"\x2\x2\x2\x57F\x585\a\x1B\x2\x2\x580\x581\a\x1B\x2\x2\x581\x585\a\xF\x2"+
		"\x2\x582\x583\a\x1B\x2\x2\x583\x585\a<\x2\x2\x584\x57F\x3\x2\x2\x2\x584"+
		"\x580\x3\x2\x2\x2\x584\x582\x3\x2\x2\x2\x585\xA9\x3\x2\x2\x2\x586\x587"+
		"\ax\x2\x2\x587\x588\x5\x94K\x2\x588\xAB\x3\x2\x2\x2\x589\x58A\bW\x1\x2"+
		"\x58A\x58B\x5\xAEX\x2\x58B\x591\x3\x2\x2\x2\x58C\x58D\f\x3\x2\x2\x58D"+
		"\x58E\at\x2\x2\x58E\x590\x5\xAEX\x2\x58F\x58C\x3\x2\x2\x2\x590\x593\x3"+
		"\x2\x2\x2\x591\x58F\x3\x2\x2\x2\x591\x592\x3\x2\x2\x2\x592\xAD\x3\x2\x2"+
		"\x2\x593\x591\x3\x2\x2\x2\x594\x59A\x5\xB0Y\x2\x595\x596\x5\xB0Y\x2\x596"+
		"\x597\a_\x2\x2\x597\x598\x5Z.\x2\x598\x59A\x3\x2\x2\x2\x599\x594\x3\x2"+
		"\x2\x2\x599\x595\x3\x2\x2\x2\x59A\xAF\x3\x2\x2\x2\x59B\x59C\a~\x2\x2\x59C"+
		"\xB1\x3\x2\x2\x2\x59D\x5A0\x5\xB4[\x2\x59E\x5A0\x5\xC2\x62\x2\x59F\x59D"+
		"\x3\x2\x2\x2\x59F\x59E\x3\x2\x2\x2\x5A0\xB3\x3\x2\x2\x2\x5A1\x5A2\a~\x2"+
		"\x2\x5A2\xB5\x3\x2\x2\x2\x5A3\x5A6\x5\xB8]\x2\x5A4\x5A6\x5\xBE`\x2\x5A5"+
		"\x5A3\x3\x2\x2\x2\x5A5\x5A4\x3\x2\x2\x2\x5A6\xB7\x3\x2\x2\x2\x5A7\x5AA"+
		"\x5\xBA^\x2\x5A8\x5AA\x5\xBC_\x2\x5A9\x5A7\x3\x2\x2\x2\x5A9\x5A8\x3\x2"+
		"\x2\x2\x5AA\xB9\x3\x2\x2\x2\x5AB\x5AD\a&\x2\x2\x5AC\x5AB\x3\x2\x2\x2\x5AC"+
		"\x5AD\x3\x2\x2\x2\x5AD\x5AE\x3\x2\x2\x2\x5AE\x5AF\a*\x2\x2\x5AF\x5B0\a"+
		"~\x2\x2\x5B0\x5B1\aS\x2\x2\x5B1\x5B2\x5\xC0\x61\x2\x5B2\x5B3\aT\x2\x2"+
		"\x5B3\xBB\x3\x2\x2\x2\x5B4\x5B6\a&\x2\x2\x5B5\x5B4\x3\x2\x2\x2\x5B5\x5B6"+
		"\x3\x2\x2\x2\x5B6\x5B7\x3\x2\x2\x2\x5B7\x5B8\a*\x2\x2\x5B8\x5B9\x5\xB4"+
		"[\x2\x5B9\x5BA\aS\x2\x2\x5BA\x5BB\x5\xC0\x61\x2\x5BB\x5BC\aT\x2\x2\x5BC"+
		"\xBD\x3\x2\x2\x2\x5BD\x5BF\a&\x2\x2\x5BE\x5BD\x3\x2\x2\x2\x5BE\x5BF\x3"+
		"\x2\x2\x2\x5BF\x5C0\x3\x2\x2\x2\x5C0\x5C1\a*\x2\x2\x5C1\x5C2\aS\x2\x2"+
		"\x5C2\x5C3\x5\xC0\x61\x2\x5C3\x5C4\aT\x2\x2\x5C4\xBF\x3\x2\x2\x2\x5C5"+
		"\x5C7\x5v<\x2\x5C6\x5C5\x3\x2\x2\x2\x5C6\x5C7\x3\x2\x2\x2\x5C7\xC1\x3"+
		"\x2\x2\x2\x5C8\x5C9\a~\x2\x2\x5C9\xC3\x3\x2\x2\x2\x5CA\x5CB\a*\x2\x2\x5CB"+
		"\x5CC\a~\x2\x2\x5CC\x5CD\a_\x2\x2\x5CD\x5CE\x5\xC6\x64\x2\x5CE\x5CF\a"+
		"z\x2\x2\x5CF\xC5\x3\x2\x2\x2\x5D0\x5D2\x5\f\a\x2\x5D1\x5D0\x3\x2\x2\x2"+
		"\x5D1\x5D2\x3\x2\x2\x2\x5D2\x5D3\x3\x2\x2\x2\x5D3\x5D4\x5\xB2Z\x2\x5D4"+
		"\xC7\x3\x2\x2\x2\x5D5\x5D7\aI\x2\x2\x5D6\x5D8\a\x46\x2\x2\x5D7\x5D6\x3"+
		"\x2\x2\x2\x5D7\x5D8\x3\x2\x2\x2\x5D8\x5D9\x3\x2\x2\x2\x5D9\x5DA\x5\f\a"+
		"\x2\x5DA\x5DB\x5\b\x5\x2\x5DB\x5DC\az\x2\x2\x5DC\x5E3\x3\x2\x2\x2\x5DD"+
		"\x5DE\aI\x2\x2\x5DE\x5DF\ay\x2\x2\x5DF\x5E0\x5\b\x5\x2\x5E0\x5E1\az\x2"+
		"\x2\x5E1\x5E3\x3\x2\x2\x2\x5E2\x5D5\x3\x2\x2\x2\x5E2\x5DD\x3\x2\x2\x2"+
		"\x5E3\xC9\x3\x2\x2\x2\x5E4\x5E6\x5\xD0i\x2\x5E5\x5E4\x3\x2\x2\x2\x5E5"+
		"\x5E6\x3\x2\x2\x2\x5E6\x5E7\x3\x2\x2\x2\x5E7\x5E8\aI\x2\x2\x5E8\x5EA\a"+
		"*\x2\x2\x5E9\x5EB\x5\f\a\x2\x5EA\x5E9\x3\x2\x2\x2\x5EA\x5EB\x3\x2\x2\x2"+
		"\x5EB\x5EC\x3\x2\x2\x2\x5EC\x5ED\x5\xB2Z\x2\x5ED\x5EE\az\x2\x2\x5EE\xCB"+
		"\x3\x2\x2\x2\x5EF\x5F0\a\x6\x2\x2\x5F0\x5F1\aO\x2\x2\x5F1\x5F2\a\x87\x2"+
		"\x2\x5F2\x5F3\aP\x2\x2\x5F3\x5F4\az\x2\x2\x5F4\xCD\x3\x2\x2\x2\x5F5\x5F6"+
		"\a\x1E\x2\x2\x5F6\x5F7\a\x87\x2\x2\x5F7\x5F9\aS\x2\x2\x5F8\x5FA\x5v<\x2"+
		"\x5F9\x5F8\x3\x2\x2\x2\x5F9\x5FA\x3\x2\x2\x2\x5FA\x5FB\x3\x2\x2\x2\x5FB"+
		"\x600\aT\x2\x2\x5FC\x5FD\a\x1E\x2\x2\x5FD\x5FE\a\x87\x2\x2\x5FE\x600\x5"+
		"x=\x2\x5FF\x5F5\x3\x2\x2\x2\x5FF\x5FC\x3\x2\x2\x2\x600\xCF\x3\x2\x2\x2"+
		"\x601\x602\bi\x1\x2\x602\x603\x5\xD2j\x2\x603\x608\x3\x2\x2\x2\x604\x605"+
		"\f\x3\x2\x2\x605\x607\x5\xD2j\x2\x606\x604\x3\x2\x2\x2\x607\x60A\x3\x2"+
		"\x2\x2\x608\x606\x3\x2\x2\x2\x608\x609\x3\x2\x2\x2\x609\xD1\x3\x2\x2\x2"+
		"\x60A\x608\x3\x2\x2\x2\x60B\x60C\aQ\x2\x2\x60C\x60D\aQ\x2\x2\x60D\x60E"+
		"\x5\xD6l\x2\x60E\x60F\aR\x2\x2\x60F\x610\aR\x2\x2\x610\x613\x3\x2\x2\x2"+
		"\x611\x613\x5\xD4k\x2\x612\x60B\x3\x2\x2\x2\x612\x611\x3\x2\x2\x2\x613"+
		"\xD3\x3\x2\x2\x2\x614\x615\a\x4\x2\x2\x615\x616\aO\x2\x2\x616\x618\x5"+
		"\xFE\x80\x2\x617\x619\a}\x2\x2\x618\x617\x3\x2\x2\x2\x618\x619\x3\x2\x2"+
		"\x2\x619\x61A\x3\x2\x2\x2\x61A\x61B\aP\x2\x2\x61B\x625\x3\x2\x2\x2\x61C"+
		"\x61D\a\x4\x2\x2\x61D\x61E\aO\x2\x2\x61E\x620\x5Z.\x2\x61F\x621\a}\x2"+
		"\x2\x620\x61F\x3\x2\x2\x2\x620\x621\x3\x2\x2\x2\x621\x622\x3\x2\x2\x2"+
		"\x622\x623\aP\x2\x2\x623\x625\x3\x2\x2\x2\x624\x614\x3\x2\x2\x2\x624\x61C"+
		"\x3\x2\x2\x2\x625\xD5\x3\x2\x2\x2\x626\x628\bl\x1\x2\x627\x629\x5\xD8"+
		"m\x2\x628\x627\x3\x2\x2\x2\x628\x629\x3\x2\x2\x2\x629\x62E\x3\x2\x2\x2"+
		"\x62A\x62B\x5\xD8m\x2\x62B\x62C\a}\x2\x2\x62C\x62E\x3\x2\x2\x2\x62D\x626"+
		"\x3\x2\x2\x2\x62D\x62A\x3\x2\x2\x2\x62E\x63B\x3\x2\x2\x2\x62F\x630\f\x5"+
		"\x2\x2\x630\x632\at\x2\x2\x631\x633\x5\xD8m\x2\x632\x631\x3\x2\x2\x2\x632"+
		"\x633\x3\x2\x2\x2\x633\x63A\x3\x2\x2\x2\x634\x635\f\x3\x2\x2\x635\x636"+
		"\at\x2\x2\x636\x637\x5\xD8m\x2\x637\x638\a}\x2\x2\x638\x63A\x3\x2\x2\x2"+
		"\x639\x62F\x3\x2\x2\x2\x639\x634\x3\x2\x2\x2\x63A\x63D\x3\x2\x2\x2\x63B"+
		"\x639\x3\x2\x2\x2\x63B\x63C\x3\x2\x2\x2\x63C\xD7\x3\x2\x2\x2\x63D\x63B"+
		"\x3\x2\x2\x2\x63E\x640\x5\xDAn\x2\x63F\x641\x5\xE0q\x2\x640\x63F\x3\x2"+
		"\x2\x2\x640\x641\x3\x2\x2\x2\x641\xD9\x3\x2\x2\x2\x642\x645\a~\x2\x2\x643"+
		"\x645\x5\xDCo\x2\x644\x642\x3\x2\x2\x2\x644\x643\x3\x2\x2\x2\x645\xDB"+
		"\x3\x2\x2\x2\x646\x647\x5\xDEp\x2\x647\x648\ay\x2\x2\x648\x649\a~\x2\x2"+
		"\x649\xDD\x3\x2\x2\x2\x64A\x64B\a~\x2\x2\x64B\xDF\x3\x2\x2\x2\x64C\x64D"+
		"\aO\x2\x2\x64D\x64E\x5\xE2r\x2\x64E\x64F\aP\x2\x2\x64F\xE1\x3\x2\x2\x2"+
		"\x650\x652\br\x1\x2\x651\x653\x5\xE4s\x2\x652\x651\x3\x2\x2\x2\x652\x653"+
		"\x3\x2\x2\x2\x653\x658\x3\x2\x2\x2\x654\x655\f\x3\x2\x2\x655\x657\x5\xE4"+
		"s\x2\x656\x654\x3\x2\x2\x2\x657\x65A\x3\x2\x2\x2\x658\x656\x3\x2\x2\x2"+
		"\x658\x659\x3\x2\x2\x2\x659\xE3\x3\x2\x2\x2\x65A\x658\x3\x2\x2\x2\x65B"+
		"\x65C\aO\x2\x2\x65C\x65D\x5\xE2r\x2\x65D\x65E\aP\x2\x2\x65E\x668\x3\x2"+
		"\x2\x2\x65F\x660\aQ\x2\x2\x660\x661\x5\xE2r\x2\x661\x662\aR\x2\x2\x662"+
		"\x668\x3\x2\x2\x2\x663\x664\aS\x2\x2\x664\x665\x5\xE2r\x2\x665\x666\a"+
		"T\x2\x2\x666\x668\x3\x2\x2\x2\x667\x65B\x3\x2\x2\x2\x667\x65F\x3\x2\x2"+
		"\x2\x667\x663\x3\x2\x2\x2\x668\xE5\x3\x2\x2\x2\x669\x66A\bt\x1\x2\x66A"+
		"\x66B\x5\xE8u\x2\x66B\x671\x3\x2\x2\x2\x66C\x66D\f\x3\x2\x2\x66D\x66E"+
		"\at\x2\x2\x66E\x670\x5\xE8u\x2\x66F\x66C\x3\x2\x2\x2\x670\x673\x3\x2\x2"+
		"\x2\x671\x66F\x3\x2\x2\x2\x671\x672\x3\x2\x2\x2\x672\xE7\x3\x2\x2\x2\x673"+
		"\x671\x3\x2\x2\x2\x674\x676\x5\xEAv\x2\x675\x677\x5\x114\x8B\x2\x676\x675"+
		"\x3\x2\x2\x2\x676\x677\x3\x2\x2\x2\x677\xE9\x3\x2\x2\x2\x678\x67E\x5\xEC"+
		"w\x2\x679\x67A\x5\xEEx\x2\x67A\x67B\x5\xF0y\x2\x67B\x67C\x5\xF2z\x2\x67C"+
		"\x67E\x3\x2\x2\x2\x67D\x678\x3\x2\x2\x2\x67D\x679\x3\x2\x2\x2\x67E\xEB"+
		"\x3\x2\x2\x2\x67F\x684\x5\xEEx\x2\x680\x681\x5\xF4{\x2\x681\x682\x5\xEC"+
		"w\x2\x682\x684\x3\x2\x2\x2\x683\x67F\x3\x2\x2\x2\x683\x680\x3\x2\x2\x2"+
		"\x684\xED\x3\x2\x2\x2\x685\x686\bx\x1\x2\x686\x688\x5\xFC\x7F\x2\x687"+
		"\x689\x5\xD0i\x2\x688\x687\x3\x2\x2\x2\x688\x689\x3\x2\x2\x2\x689\x68F"+
		"\x3\x2\x2\x2\x68A\x68B\aO\x2\x2\x68B\x68C\x5\xECw\x2\x68C\x68D\aP\x2\x2"+
		"\x68D\x68F\x3\x2\x2\x2\x68E\x685\x3\x2\x2\x2\x68E\x68A\x3\x2\x2\x2\x68F"+
		"\x69D\x3\x2\x2\x2\x690\x691\f\x5\x2\x2\x691\x69C\x5\xF0y\x2\x692\x693"+
		"\f\x4\x2\x2\x693\x695\aQ\x2\x2\x694\x696\x5Z.\x2\x695\x694\x3\x2\x2\x2"+
		"\x695\x696\x3\x2\x2\x2\x696\x697\x3\x2\x2\x2\x697\x699\aR\x2\x2\x698\x69A"+
		"\x5\xD0i\x2\x699\x698\x3\x2\x2\x2\x699\x69A\x3\x2\x2\x2\x69A\x69C\x3\x2"+
		"\x2\x2\x69B\x690\x3\x2\x2\x2\x69B\x692\x3\x2\x2\x2\x69C\x69F\x3\x2\x2"+
		"\x2\x69D\x69B\x3\x2\x2\x2\x69D\x69E\x3\x2\x2\x2\x69E\xEF\x3\x2\x2\x2\x69F"+
		"\x69D\x3\x2\x2\x2\x6A0\x6A1\aO\x2\x2\x6A1\x6A2\x5\x10A\x86\x2\x6A2\x6A4"+
		"\aP\x2\x2\x6A3\x6A5\x5\xF6|\x2\x6A4\x6A3\x3\x2\x2\x2\x6A4\x6A5\x3\x2\x2"+
		"\x2\x6A5\x6A7\x3\x2\x2\x2\x6A6\x6A8\x5\xFA~\x2\x6A7\x6A6\x3\x2\x2\x2\x6A7"+
		"\x6A8\x3\x2\x2\x2\x6A8\x6AA\x3\x2\x2\x2\x6A9\x6AB\x5\x17A\xBE\x2\x6AA"+
		"\x6A9\x3\x2\x2\x2\x6AA\x6AB\x3\x2\x2\x2\x6AB\x6AD\x3\x2\x2\x2\x6AC\x6AE"+
		"\x5\xD0i\x2\x6AD\x6AC\x3\x2\x2\x2\x6AD\x6AE\x3\x2\x2\x2\x6AE\xF1\x3\x2"+
		"\x2\x2\x6AF\x6B0\av\x2\x2\x6B0\x6B2\x5\x96L\x2\x6B1\x6B3\x5\x100\x81\x2"+
		"\x6B2\x6B1\x3\x2\x2\x2\x6B2\x6B3\x3\x2\x2\x2\x6B3\xF3\x3\x2\x2\x2\x6B4"+
		"\x6B6\aW\x2\x2\x6B5\x6B7\x5\xD0i\x2\x6B6\x6B5\x3\x2\x2\x2\x6B6\x6B7\x3"+
		"\x2\x2\x2\x6B7\x6B9\x3\x2\x2\x2\x6B8\x6BA\x5\xF6|\x2\x6B9\x6B8\x3\x2\x2"+
		"\x2\x6B9\x6BA\x3\x2\x2\x2\x6BA\x6CC\x3\x2\x2\x2\x6BB\x6BD\a[\x2\x2\x6BC"+
		"\x6BE\x5\xD0i\x2\x6BD\x6BC\x3\x2\x2\x2\x6BD\x6BE\x3\x2\x2\x2\x6BE\x6CC"+
		"\x3\x2\x2\x2\x6BF\x6C1\ap\x2\x2\x6C0\x6C2\x5\xD0i\x2\x6C1\x6C0\x3\x2\x2"+
		"\x2\x6C1\x6C2\x3\x2\x2\x2\x6C2\x6CC\x3\x2\x2\x2\x6C3\x6C4\x5\f\a\x2\x6C4"+
		"\x6C6\aW\x2\x2\x6C5\x6C7\x5\xD0i\x2\x6C6\x6C5\x3\x2\x2\x2\x6C6\x6C7\x3"+
		"\x2\x2\x2\x6C7\x6C9\x3\x2\x2\x2\x6C8\x6CA\x5\xF6|\x2\x6C9\x6C8\x3\x2\x2"+
		"\x2\x6C9\x6CA\x3\x2\x2\x2\x6CA\x6CC\x3\x2\x2\x2\x6CB\x6B4\x3\x2\x2\x2"+
		"\x6CB\x6BB\x3\x2\x2\x2\x6CB\x6BF\x3\x2\x2\x2\x6CB\x6C3\x3\x2\x2\x2\x6CC"+
		"\xF5\x3\x2\x2\x2\x6CD\x6CF\x5\xF8}\x2\x6CE\x6D0\x5\xF6|\x2\x6CF\x6CE\x3"+
		"\x2\x2\x2\x6CF\x6D0\x3\x2\x2\x2\x6D0\xF7\x3\x2\x2\x2\x6D1\x6D2\t\x6\x2"+
		"\x2\x6D2\xF9\x3\x2\x2\x2\x6D3\x6D4\t\a\x2\x2\x6D4\xFB\x3\x2\x2\x2\x6D5"+
		"\x6D7\a}\x2\x2\x6D6\x6D5\x3\x2\x2\x2\x6D6\x6D7\x3\x2\x2\x2\x6D7\x6D8\x3"+
		"\x2\x2\x2\x6D8\x6D9\x5\x6\x4\x2\x6D9\xFD\x3\x2\x2\x2\x6DA\x6DC\x5\x94"+
		"K\x2\x6DB\x6DD\x5\x100\x81\x2\x6DC\x6DB\x3\x2\x2\x2\x6DC\x6DD\x3\x2\x2"+
		"\x2\x6DD\xFF\x3\x2\x2\x2\x6DE\x6E7\x5\x102\x82\x2\x6DF\x6E1\x5\x104\x83"+
		"\x2\x6E0\x6DF\x3\x2\x2\x2\x6E0\x6E1\x3\x2\x2\x2\x6E1\x6E2\x3\x2\x2\x2"+
		"\x6E2\x6E3\x5\xF0y\x2\x6E3\x6E4\x5\xF2z\x2\x6E4\x6E7\x3\x2\x2\x2\x6E5"+
		"\x6E7\x5\x106\x84\x2\x6E6\x6DE\x3\x2\x2\x2\x6E6\x6E0\x3\x2\x2\x2\x6E6"+
		"\x6E5\x3\x2\x2\x2\x6E7\x101\x3\x2\x2\x2\x6E8\x6EE\x5\x104\x83\x2\x6E9"+
		"\x6EB\x5\xF4{\x2\x6EA\x6EC\x5\x102\x82\x2\x6EB\x6EA\x3\x2\x2\x2\x6EB\x6EC"+
		"\x3\x2\x2\x2\x6EC\x6EE\x3\x2\x2\x2\x6ED\x6E8\x3\x2\x2\x2\x6ED\x6E9\x3"+
		"\x2\x2\x2\x6EE\x103\x3\x2\x2\x2\x6EF\x6F0\b\x83\x1\x2\x6F0\x6FE\x5\xF0"+
		"y\x2\x6F1\x6F3\aQ\x2\x2\x6F2\x6F4\x5Z.\x2\x6F3\x6F2\x3\x2\x2\x2\x6F3\x6F4"+
		"\x3\x2\x2\x2\x6F4\x6F5\x3\x2\x2\x2\x6F5\x6F7\aR\x2\x2\x6F6\x6F8\x5\xD0"+
		"i\x2\x6F7\x6F6\x3\x2\x2\x2\x6F7\x6F8\x3\x2\x2\x2\x6F8\x6FE\x3\x2\x2\x2"+
		"\x6F9\x6FA\aO\x2\x2\x6FA\x6FB\x5\x102\x82\x2\x6FB\x6FC\aP\x2\x2\x6FC\x6FE"+
		"\x3\x2\x2\x2\x6FD\x6EF\x3\x2\x2\x2\x6FD\x6F1\x3\x2\x2\x2\x6FD\x6F9\x3"+
		"\x2\x2\x2\x6FE\x70C\x3\x2\x2\x2\x6FF\x700\f\a\x2\x2\x700\x70B\x5\xF0y"+
		"\x2\x701\x702\f\x5\x2\x2\x702\x704\aQ\x2\x2\x703\x705\x5Z.\x2\x704\x703"+
		"\x3\x2\x2\x2\x704\x705\x3\x2\x2\x2\x705\x706\x3\x2\x2\x2\x706\x708\aR"+
		"\x2\x2\x707\x709\x5\xD0i\x2\x708\x707\x3\x2\x2\x2\x708\x709\x3\x2\x2\x2"+
		"\x709\x70B\x3\x2\x2\x2\x70A\x6FF\x3\x2\x2\x2\x70A\x701\x3\x2\x2\x2\x70B"+
		"\x70E\x3\x2\x2\x2\x70C\x70A\x3\x2\x2\x2\x70C\x70D\x3\x2\x2\x2\x70D\x105"+
		"\x3\x2\x2\x2\x70E\x70C\x3\x2\x2\x2\x70F\x714\x5\x108\x85\x2\x710\x711"+
		"\x5\xF4{\x2\x711\x712\x5\x106\x84\x2\x712\x714\x3\x2\x2\x2\x713\x70F\x3"+
		"\x2\x2\x2\x713\x710\x3\x2\x2\x2\x714\x107\x3\x2\x2\x2\x715\x716\b\x85"+
		"\x1\x2\x716\x717\a}\x2\x2\x717\x725\x3\x2\x2\x2\x718\x719\f\x5\x2\x2\x719"+
		"\x724\x5\xF0y\x2\x71A\x71B\f\x4\x2\x2\x71B\x71D\aQ\x2\x2\x71C\x71E\x5"+
		"Z.\x2\x71D\x71C\x3\x2\x2\x2\x71D\x71E\x3\x2\x2\x2\x71E\x71F\x3\x2\x2\x2"+
		"\x71F\x721\aR\x2\x2\x720\x722\x5\xD0i\x2\x721\x720\x3\x2\x2\x2\x721\x722"+
		"\x3\x2\x2\x2\x722\x724\x3\x2\x2\x2\x723\x718\x3\x2\x2\x2\x723\x71A\x3"+
		"\x2\x2\x2\x724\x727\x3\x2\x2\x2\x725\x723\x3\x2\x2\x2\x725\x726\x3\x2"+
		"\x2\x2\x726\x109\x3\x2\x2\x2\x727\x725\x3\x2\x2\x2\x728\x72A\x5\x10C\x87"+
		"\x2\x729\x728\x3\x2\x2\x2\x729\x72A\x3\x2\x2\x2\x72A\x72C\x3\x2\x2\x2"+
		"\x72B\x72D\a}\x2\x2\x72C\x72B\x3\x2\x2\x2\x72C\x72D\x3\x2\x2\x2\x72D\x733"+
		"\x3\x2\x2\x2\x72E\x72F\x5\x10C\x87\x2\x72F\x730\at\x2\x2\x730\x731\a}"+
		"\x2\x2\x731\x733\x3\x2\x2\x2\x732\x729\x3\x2\x2\x2\x732\x72E\x3\x2\x2"+
		"\x2\x733\x10B\x3\x2\x2\x2\x734\x735\b\x87\x1\x2\x735\x736\x5\x10E\x88"+
		"\x2\x736\x73C\x3\x2\x2\x2\x737\x738\f\x3\x2\x2\x738\x739\at\x2\x2\x739"+
		"\x73B\x5\x10E\x88\x2\x73A\x737\x3\x2\x2\x2\x73B\x73E\x3\x2\x2\x2\x73C"+
		"\x73A\x3\x2\x2\x2\x73C\x73D\x3\x2\x2\x2\x73D\x10D\x3\x2\x2\x2\x73E\x73C"+
		"\x3\x2\x2\x2\x73F\x741\x5\xD0i\x2\x740\x73F\x3\x2\x2\x2\x740\x741\x3\x2"+
		"\x2\x2\x741\x742\x3\x2\x2\x2\x742\x743\x5\x88\x45\x2\x743\x744\x5\xEA"+
		"v\x2\x744\x75F\x3\x2\x2\x2\x745\x747\x5\xD0i\x2\x746\x745\x3\x2\x2\x2"+
		"\x746\x747\x3\x2\x2\x2\x747\x748\x3\x2\x2\x2\x748\x749\x5\x88\x45\x2\x749"+
		"\x74A\x5\xEAv\x2\x74A\x74B\a_\x2\x2\x74B\x74C\x5\x118\x8D\x2\x74C\x75F"+
		"\x3\x2\x2\x2\x74D\x74F\x5\xD0i\x2\x74E\x74D\x3\x2\x2\x2\x74E\x74F\x3\x2"+
		"\x2\x2\x74F\x750\x3\x2\x2\x2\x750\x752\x5\x88\x45\x2\x751\x753\x5\x100"+
		"\x81\x2\x752\x751\x3\x2\x2\x2\x752\x753\x3\x2\x2\x2\x753\x75F\x3\x2\x2"+
		"\x2\x754\x756\x5\xD0i\x2\x755\x754\x3\x2\x2\x2\x755\x756\x3\x2\x2\x2\x756"+
		"\x757\x3\x2\x2\x2\x757\x759\x5\x88\x45\x2\x758\x75A\x5\x100\x81\x2\x759"+
		"\x758\x3\x2\x2\x2\x759\x75A\x3\x2\x2\x2\x75A\x75B\x3\x2\x2\x2\x75B\x75C"+
		"\a_\x2\x2\x75C\x75D\x5\x118\x8D\x2\x75D\x75F\x3\x2\x2\x2\x75E\x740\x3"+
		"\x2\x2\x2\x75E\x746\x3\x2\x2\x2\x75E\x74E\x3\x2\x2\x2\x75E\x755\x3\x2"+
		"\x2\x2\x75F\x10F\x3\x2\x2\x2\x760\x762\x5\xD0i\x2\x761\x760\x3\x2\x2\x2"+
		"\x761\x762\x3\x2\x2\x2\x762\x764\x3\x2\x2\x2\x763\x765\x5\x88\x45\x2\x764"+
		"\x763\x3\x2\x2\x2\x764\x765\x3\x2\x2\x2\x765\x766\x3\x2\x2\x2\x766\x768"+
		"\x5\xEAv\x2\x767\x769\x5\x132\x9A\x2\x768\x767\x3\x2\x2\x2\x768\x769\x3"+
		"\x2\x2\x2\x769\x76A\x3\x2\x2\x2\x76A\x76B\x5\x112\x8A\x2\x76B\x111\x3"+
		"\x2\x2\x2\x76C\x76E\x5\x14A\xA6\x2\x76D\x76C\x3\x2\x2\x2\x76D\x76E\x3"+
		"\x2\x2\x2\x76E\x76F\x3\x2\x2\x2\x76F\x778\x5\x62\x32\x2\x770\x778\x5\x170"+
		"\xB9\x2\x771\x772\a_\x2\x2\x772\x773\a\x15\x2\x2\x773\x778\az\x2\x2\x774"+
		"\x775\a_\x2\x2\x775\x776\a\x16\x2\x2\x776\x778\az\x2\x2\x777\x76D\x3\x2"+
		"\x2\x2\x777\x770\x3\x2\x2\x2\x777\x771\x3\x2\x2\x2\x777\x774\x3\x2\x2"+
		"\x2\x778\x113\x3\x2\x2\x2\x779\x77F\x5\x116\x8C\x2\x77A\x77B\aO\x2\x2"+
		"\x77B\x77C\x5\"\x12\x2\x77C\x77D\aP\x2\x2\x77D\x77F\x3\x2\x2\x2\x77E\x779"+
		"\x3\x2\x2\x2\x77E\x77A\x3\x2\x2\x2\x77F\x115\x3\x2\x2\x2\x780\x781\a_"+
		"\x2\x2\x781\x784\x5\x118\x8D\x2\x782\x784\x5\x11C\x8F\x2\x783\x780\x3"+
		"\x2\x2\x2\x783\x782\x3\x2\x2\x2\x784\x117\x3\x2\x2\x2\x785\x788\x5T+\x2"+
		"\x786\x788\x5\x11C\x8F\x2\x787\x785\x3\x2\x2\x2\x787\x786\x3\x2\x2\x2"+
		"\x788\x119\x3\x2\x2\x2\x789\x78A\b\x8E\x1\x2\x78A\x78C\x5\x118\x8D\x2"+
		"\x78B\x78D\a}\x2\x2\x78C\x78B\x3\x2\x2\x2\x78C\x78D\x3\x2\x2\x2\x78D\x796"+
		"\x3\x2\x2\x2\x78E\x78F\f\x3\x2\x2\x78F\x790\at\x2\x2\x790\x792\x5\x118"+
		"\x8D\x2\x791\x793\a}\x2\x2\x792\x791\x3\x2\x2\x2\x792\x793\x3\x2\x2\x2"+
		"\x793\x795\x3\x2\x2\x2\x794\x78E\x3\x2\x2\x2\x795\x798\x3\x2\x2\x2\x796"+
		"\x794\x3\x2\x2\x2\x796\x797\x3\x2\x2\x2\x797\x11B\x3\x2\x2\x2\x798\x796"+
		"\x3\x2\x2\x2\x799\x79A\aS\x2\x2\x79A\x79C\x5\x11A\x8E\x2\x79B\x79D\at"+
		"\x2\x2\x79C\x79B\x3\x2\x2\x2\x79C\x79D\x3\x2\x2\x2\x79D\x79E\x3\x2\x2"+
		"\x2\x79E\x79F\aT\x2\x2\x79F\x7A3\x3\x2\x2\x2\x7A0\x7A1\aS\x2\x2\x7A1\x7A3"+
		"\aT\x2\x2\x7A2\x799\x3\x2\x2\x2\x7A2\x7A0\x3\x2\x2\x2\x7A3\x11D\x3\x2"+
		"\x2\x2\x7A4\x7A7\a~\x2\x2\x7A5\x7A7\x5\x15E\xB0\x2\x7A6\x7A4\x3\x2\x2"+
		"\x2\x7A6\x7A5\x3\x2\x2\x2\x7A7\x11F\x3\x2\x2\x2\x7A8\x7A9\x5\x122\x92"+
		"\x2\x7A9\x7AB\aS\x2\x2\x7AA\x7AC\x5\x12A\x96\x2\x7AB\x7AA\x3\x2\x2\x2"+
		"\x7AB\x7AC\x3\x2\x2\x2\x7AC\x7AD\x3\x2\x2\x2\x7AD\x7AE\aT\x2\x2\x7AE\x121"+
		"\x3\x2\x2\x2\x7AF\x7B1\x5\x128\x95\x2\x7B0\x7B2\x5\xD0i\x2\x7B1\x7B0\x3"+
		"\x2\x2\x2\x7B1\x7B2\x3\x2\x2\x2\x7B2\x7B3\x3\x2\x2\x2\x7B3\x7B5\x5\x124"+
		"\x93\x2\x7B4\x7B6\x5\x126\x94\x2\x7B5\x7B4\x3\x2\x2\x2\x7B5\x7B6\x3\x2"+
		"\x2\x2\x7B6\x7B8\x3\x2\x2\x2\x7B7\x7B9\x5\x138\x9D\x2\x7B8\x7B7\x3\x2"+
		"\x2\x2\x7B8\x7B9\x3\x2\x2\x2\x7B9\x7C2\x3\x2\x2\x2\x7BA\x7BC\x5\x128\x95"+
		"\x2\x7BB\x7BD\x5\xD0i\x2\x7BC\x7BB\x3\x2\x2\x2\x7BC\x7BD\x3\x2\x2\x2\x7BD"+
		"\x7BF\x3\x2\x2\x2\x7BE\x7C0\x5\x138\x9D\x2\x7BF\x7BE\x3\x2\x2\x2\x7BF"+
		"\x7C0\x3\x2\x2\x2\x7C0\x7C2\x3\x2\x2\x2\x7C1\x7AF\x3\x2\x2\x2\x7C1\x7BA"+
		"\x3\x2\x2\x2\x7C2\x123\x3\x2\x2\x2\x7C3\x7C5\x5\f\a\x2\x7C4\x7C3\x3\x2"+
		"\x2\x2\x7C4\x7C5\x3\x2\x2\x2\x7C5\x7C6\x3\x2\x2\x2\x7C6\x7C7\x5\x11E\x90"+
		"\x2\x7C7\x125\x3\x2\x2\x2\x7C8\x7C9\a \x2\x2\x7C9\x127\x3\x2\x2\x2\x7CA"+
		"\x7CB\t\b\x2\x2\x7CB\x129\x3\x2\x2\x2\x7CC\x7CE\x5\x12C\x97\x2\x7CD\x7CF"+
		"\x5\x12A\x96\x2\x7CE\x7CD\x3\x2\x2\x2\x7CE\x7CF\x3\x2\x2\x2\x7CF\x7D6"+
		"\x3\x2\x2\x2\x7D0\x7D1\x5\x142\xA2\x2\x7D1\x7D3\ax\x2\x2\x7D2\x7D4\x5"+
		"\x12A\x96\x2\x7D3\x7D2\x3\x2\x2\x2\x7D3\x7D4\x3\x2\x2\x2\x7D4\x7D6\x3"+
		"\x2\x2\x2\x7D5\x7CC\x3\x2\x2\x2\x7D5\x7D0\x3\x2\x2\x2\x7D6\x12B\x3\x2"+
		"\x2\x2\x7D7\x7D9\x5\xD0i\x2\x7D8\x7D7\x3\x2\x2\x2\x7D8\x7D9\x3\x2\x2\x2"+
		"\x7D9\x7DB\x3\x2\x2\x2\x7DA\x7DC\x5\x88\x45\x2\x7DB\x7DA\x3\x2\x2\x2\x7DB"+
		"\x7DC\x3\x2\x2\x2\x7DC\x7DE\x3\x2\x2\x2\x7DD\x7DF\x5\x12E\x98\x2\x7DE"+
		"\x7DD\x3\x2\x2\x2\x7DE\x7DF\x3\x2\x2\x2\x7DF\x7E0\x3\x2\x2\x2\x7E0\x7E8"+
		"\az\x2\x2\x7E1\x7E8\x5\x110\x89\x2\x7E2\x7E8\x5\xC8\x65\x2\x7E3\x7E8\x5"+
		"\x80\x41\x2\x7E4\x7E8\x5\x156\xAC\x2\x7E5\x7E8\x5|?\x2\x7E6\x7E8\x5\x82"+
		"\x42\x2\x7E7\x7D8\x3\x2\x2\x2\x7E7\x7E1\x3\x2\x2\x2\x7E7\x7E2\x3\x2\x2"+
		"\x2\x7E7\x7E3\x3\x2\x2\x2\x7E7\x7E4\x3\x2\x2\x2\x7E7\x7E5\x3\x2\x2\x2"+
		"\x7E7\x7E6\x3\x2\x2\x2\x7E8\x12D\x3\x2\x2\x2\x7E9\x7EA\b\x98\x1\x2\x7EA"+
		"\x7EB\x5\x130\x99\x2\x7EB\x7F1\x3\x2\x2\x2\x7EC\x7ED\f\x3\x2\x2\x7ED\x7EE"+
		"\at\x2\x2\x7EE\x7F0\x5\x130\x99\x2\x7EF\x7EC\x3\x2\x2\x2\x7F0\x7F3\x3"+
		"\x2\x2\x2\x7F1\x7EF\x3\x2\x2\x2\x7F1\x7F2\x3\x2\x2\x2\x7F2\x12F\x3\x2"+
		"\x2\x2\x7F3\x7F1\x3\x2\x2\x2\x7F4\x7F6\x5\xEAv\x2\x7F5\x7F7\x5\x132\x9A"+
		"\x2\x7F6\x7F5\x3\x2\x2\x2\x7F6\x7F7\x3\x2\x2\x2\x7F7\x7F9\x3\x2\x2\x2"+
		"\x7F8\x7FA\x5\x136\x9C\x2\x7F9\x7F8\x3\x2\x2\x2\x7F9\x7FA\x3\x2\x2\x2"+
		"\x7FA\x808\x3\x2\x2\x2\x7FB\x7FD\x5\xEAv\x2\x7FC\x7FE\x5\x116\x8C\x2\x7FD"+
		"\x7FC\x3\x2\x2\x2\x7FD\x7FE\x3\x2\x2\x2\x7FE\x808\x3\x2\x2\x2\x7FF\x801"+
		"\a~\x2\x2\x800\x7FF\x3\x2\x2\x2\x800\x801\x3\x2\x2\x2\x801\x803\x3\x2"+
		"\x2\x2\x802\x804\x5\xD0i\x2\x803\x802\x3\x2\x2\x2\x803\x804\x3\x2\x2\x2"+
		"\x804\x805\x3\x2\x2\x2\x805\x806\ax\x2\x2\x806\x808\x5Z.\x2\x807\x7F4"+
		"\x3\x2\x2\x2\x807\x7FB\x3\x2\x2\x2\x807\x800\x3\x2\x2\x2\x808\x131\x3"+
		"\x2\x2\x2\x809\x80A\b\x9A\x1\x2\x80A\x80B\x5\x134\x9B\x2\x80B\x810\x3"+
		"\x2\x2\x2\x80C\x80D\f\x3\x2\x2\x80D\x80F\x5\x134\x9B\x2\x80E\x80C\x3\x2"+
		"\x2\x2\x80F\x812\x3\x2\x2\x2\x810\x80E\x3\x2\x2\x2\x810\x811\x3\x2\x2"+
		"\x2\x811\x133\x3\x2\x2\x2\x812\x810\x3\x2\x2\x2\x813\x814\t\t\x2\x2\x814"+
		"\x135\x3\x2\x2\x2\x815\x816\a_\x2\x2\x816\x817\a\x81\x2\x2\x817\x818\b"+
		"\x9C\x1\x2\x818\x137\x3\x2\x2\x2\x819\x81A\ax\x2\x2\x81A\x81B\x5\x13A"+
		"\x9E\x2\x81B\x139\x3\x2\x2\x2\x81C\x81D\b\x9E\x1\x2\x81D\x81F\x5\x13C"+
		"\x9F\x2\x81E\x820\a}\x2\x2\x81F\x81E\x3\x2\x2\x2\x81F\x820\x3\x2\x2\x2"+
		"\x820\x829\x3\x2\x2\x2\x821\x822\f\x3\x2\x2\x822\x823\at\x2\x2\x823\x825"+
		"\x5\x13C\x9F\x2\x824\x826\a}\x2\x2\x825\x824\x3\x2\x2\x2\x825\x826\x3"+
		"\x2\x2\x2\x826\x828\x3\x2\x2\x2\x827\x821\x3\x2\x2\x2\x828\x82B\x3\x2"+
		"\x2\x2\x829\x827\x3\x2\x2\x2\x829\x82A\x3\x2\x2\x2\x82A\x13B\x3\x2\x2"+
		"\x2\x82B\x829\x3\x2\x2\x2\x82C\x82E\x5\xD0i\x2\x82D\x82C\x3\x2\x2\x2\x82D"+
		"\x82E\x3\x2\x2\x2\x82E\x82F\x3\x2\x2\x2\x82F\x842\x5\x140\xA1\x2\x830"+
		"\x832\x5\xD0i\x2\x831\x830\x3\x2\x2\x2\x831\x832\x3\x2\x2\x2\x832\x833"+
		"\x3\x2\x2\x2\x833\x835\aJ\x2\x2\x834\x836\x5\x142\xA2\x2\x835\x834\x3"+
		"\x2\x2\x2\x835\x836\x3\x2\x2\x2\x836\x837\x3\x2\x2\x2\x837\x842\x5\x140"+
		"\xA1\x2\x838\x83A\x5\xD0i\x2\x839\x838\x3\x2\x2\x2\x839\x83A\x3\x2\x2"+
		"\x2\x83A\x83B\x3\x2\x2\x2\x83B\x83D\x5\x142\xA2\x2\x83C\x83E\aJ\x2\x2"+
		"\x83D\x83C\x3\x2\x2\x2\x83D\x83E\x3\x2\x2\x2\x83E\x83F\x3\x2\x2\x2\x83F"+
		"\x840\x5\x140\xA1\x2\x840\x842\x3\x2\x2\x2\x841\x82D\x3\x2\x2\x2\x841"+
		"\x831\x3\x2\x2\x2\x841\x839\x3\x2\x2\x2\x842\x13D\x3\x2\x2\x2\x843\x845"+
		"\x5\f\a\x2\x844\x843\x3\x2\x2\x2\x844\x845\x3\x2\x2\x2\x845\x846\x3\x2"+
		"\x2\x2\x846\x849\x5\x11E\x90\x2\x847\x849\x5\x9CO\x2\x848\x844\x3\x2\x2"+
		"\x2\x848\x847\x3\x2\x2\x2\x849\x13F\x3\x2\x2\x2\x84A\x84B\x5\x13E\xA0"+
		"\x2\x84B\x141\x3\x2\x2\x2\x84C\x84D\t\n\x2\x2\x84D\x143\x3\x2\x2\x2\x84E"+
		"\x84F\a.\x2\x2\x84F\x850\x5\x146\xA4\x2\x850\x145\x3\x2\x2\x2\x851\x853"+
		"\x5\x94K\x2\x852\x854\x5\x148\xA5\x2\x853\x852\x3\x2\x2\x2\x853\x854\x3"+
		"\x2\x2\x2\x854\x147\x3\x2\x2\x2\x855\x857\x5\xF4{\x2\x856\x858\x5\x148"+
		"\xA5\x2\x857\x856\x3\x2\x2\x2\x857\x858\x3\x2\x2\x2\x858\x149\x3\x2\x2"+
		"\x2\x859\x85A\ax\x2\x2\x85A\x85B\x5\x14C\xA7\x2\x85B\x14B\x3\x2\x2\x2"+
		"\x85C\x85E\x5\x14E\xA8\x2\x85D\x85F\a}\x2\x2\x85E\x85D\x3\x2\x2\x2\x85E"+
		"\x85F\x3\x2\x2\x2\x85F\x868\x3\x2\x2\x2\x860\x862\x5\x14E\xA8\x2\x861"+
		"\x863\a}\x2\x2\x862\x861\x3\x2\x2\x2\x862\x863\x3\x2\x2\x2\x863\x864\x3"+
		"\x2\x2\x2\x864\x865\at\x2\x2\x865\x866\x5\x14C\xA7\x2\x866\x868\x3\x2"+
		"\x2\x2\x867\x85C\x3\x2\x2\x2\x867\x860\x3\x2\x2\x2\x868\x14D\x3\x2\x2"+
		"\x2\x869\x86A\x5\x150\xA9\x2\x86A\x86C\aO\x2\x2\x86B\x86D\x5\"\x12\x2"+
		"\x86C\x86B\x3\x2\x2\x2\x86C\x86D\x3\x2\x2\x2\x86D\x86E\x3\x2\x2\x2\x86E"+
		"\x86F\aP\x2\x2\x86F\x874\x3\x2\x2\x2\x870\x871\x5\x150\xA9\x2\x871\x872"+
		"\x5\x11C\x8F\x2\x872\x874\x3\x2\x2\x2\x873\x869\x3\x2\x2\x2\x873\x870"+
		"\x3\x2\x2\x2\x874\x14F\x3\x2\x2\x2\x875\x878\x5\x13E\xA0\x2\x876\x878"+
		"\a~\x2\x2\x877\x875\x3\x2\x2\x2\x877\x876\x3\x2\x2\x2\x878\x151\x3\x2"+
		"\x2\x2\x879\x87A\a.\x2\x2\x87A\x87B\x5\x186\xC4\x2\x87B\x153\x3\x2\x2"+
		"\x2\x87C\x87D\a.\x2\x2\x87D\x87E\a\x87\x2\x2\x87E\x882\a~\x2\x2\x87F\x880"+
		"\a.\x2\x2\x880\x882\a\x8A\x2\x2\x881\x87C\x3\x2\x2\x2\x881\x87F\x3\x2"+
		"\x2\x2\x882\x155\x3\x2\x2\x2\x883\x884\a>\x2\x2\x884\x885\a`\x2\x2\x885"+
		"\x886\x5\x158\xAD\x2\x886\x887\a\x61\x2\x2\x887\x888\x5x=\x2\x888\x157"+
		"\x3\x2\x2\x2\x889\x88A\b\xAD\x1\x2\x88A\x88B\x5\x15A\xAE\x2\x88B\x891"+
		"\x3\x2\x2\x2\x88C\x88D\f\x3\x2\x2\x88D\x88E\at\x2\x2\x88E\x890\x5\x15A"+
		"\xAE\x2\x88F\x88C\x3\x2\x2\x2\x890\x893\x3\x2\x2\x2\x891\x88F\x3\x2\x2"+
		"\x2\x891\x892\x3\x2\x2\x2\x892\x159\x3\x2\x2\x2\x893\x891\x3\x2\x2\x2"+
		"\x894\x897\x5\x15C\xAF\x2\x895\x897\x5\x10E\x88\x2\x896\x894\x3\x2\x2"+
		"\x2\x896\x895\x3\x2\x2\x2\x897\x15B\x3\x2\x2\x2\x898\x89A\a\xF\x2\x2\x899"+
		"\x89B\a}\x2\x2\x89A\x899\x3\x2\x2\x2\x89A\x89B\x3\x2\x2\x2\x89B\x89D\x3"+
		"\x2\x2\x2\x89C\x89E\a~\x2\x2\x89D\x89C\x3\x2\x2\x2\x89D\x89E\x3\x2\x2"+
		"\x2\x89E\x8C9\x3\x2\x2\x2\x89F\x8A1\a\xF\x2\x2\x8A0\x8A2\a~\x2\x2\x8A1"+
		"\x8A0\x3\x2\x2\x2\x8A1\x8A2\x3\x2\x2\x2\x8A2\x8A3\x3\x2\x2\x2\x8A3\x8A4"+
		"\a_\x2\x2\x8A4\x8C9\x5\xFE\x80\x2\x8A5\x8A7\a\x46\x2\x2\x8A6\x8A8\a}\x2"+
		"\x2\x8A7\x8A6\x3\x2\x2\x2\x8A7\x8A8\x3\x2\x2\x2\x8A8\x8AA\x3\x2\x2\x2"+
		"\x8A9\x8AB\a~\x2\x2\x8AA\x8A9\x3\x2\x2\x2\x8AA\x8AB\x3\x2\x2\x2\x8AB\x8C9"+
		"\x3\x2\x2\x2\x8AC\x8AE\a\x46\x2\x2\x8AD\x8AF\a~\x2\x2\x8AE\x8AD\x3\x2"+
		"\x2\x2\x8AE\x8AF\x3\x2\x2\x2\x8AF\x8B0\x3\x2\x2\x2\x8B0\x8B1\a_\x2\x2"+
		"\x8B1\x8C9\x5\xFE\x80\x2\x8B2\x8B3\a>\x2\x2\x8B3\x8B4\a`\x2\x2\x8B4\x8B5"+
		"\x5\x158\xAD\x2\x8B5\x8B6\a\x61\x2\x2\x8B6\x8B8\a\xF\x2\x2\x8B7\x8B9\a"+
		"}\x2\x2\x8B8\x8B7\x3\x2\x2\x2\x8B8\x8B9\x3\x2\x2\x2\x8B9\x8BB\x3\x2\x2"+
		"\x2\x8BA\x8BC\a~\x2\x2\x8BB\x8BA\x3\x2\x2\x2\x8BB\x8BC\x3\x2\x2\x2\x8BC"+
		"\x8C9\x3\x2\x2\x2\x8BD\x8BE\a>\x2\x2\x8BE\x8BF\a`\x2\x2\x8BF\x8C0\x5\x158"+
		"\xAD\x2\x8C0\x8C1\a\x61\x2\x2\x8C1\x8C3\a\xF\x2\x2\x8C2\x8C4\a~\x2\x2"+
		"\x8C3\x8C2\x3\x2\x2\x2\x8C3\x8C4\x3\x2\x2\x2\x8C4\x8C5\x3\x2\x2\x2\x8C5"+
		"\x8C6\a_\x2\x2\x8C6\x8C7\x5\x6\x4\x2\x8C7\x8C9\x3\x2\x2\x2\x8C8\x898\x3"+
		"\x2\x2\x2\x8C8\x89F\x3\x2\x2\x2\x8C8\x8A5\x3\x2\x2\x2\x8C8\x8AC\x3\x2"+
		"\x2\x2\x8C8\x8B2\x3\x2\x2\x2\x8C8\x8BD\x3\x2\x2\x2\x8C9\x15D\x3\x2\x2"+
		"\x2\x8CA\x8CB\x5\x162\xB2\x2\x8CB\x8CD\a`\x2\x2\x8CC\x8CE\x5\x164\xB3"+
		"\x2\x8CD\x8CC\x3\x2\x2\x2\x8CD\x8CE\x3\x2\x2\x2\x8CE\x8CF\x3\x2\x2\x2"+
		"\x8CF\x8D0\a\x61\x2\x2\x8D0\x15F\x3\x2\x2\x2\x8D1\x8E1\x5\x15E\xB0\x2"+
		"\x8D2\x8D3\x5\x152\xAA\x2\x8D3\x8D5\a`\x2\x2\x8D4\x8D6\x5\x164\xB3\x2"+
		"\x8D5\x8D4\x3\x2\x2\x2\x8D5\x8D6\x3\x2\x2\x2\x8D6\x8D7\x3\x2\x2\x2\x8D7"+
		"\x8D8\a\x61\x2\x2\x8D8\x8E1\x3\x2\x2\x2\x8D9\x8DA\x5\x154\xAB\x2\x8DA"+
		"\x8DC\a`\x2\x2\x8DB\x8DD\x5\x164\xB3\x2\x8DC\x8DB\x3\x2\x2\x2\x8DC\x8DD"+
		"\x3\x2\x2\x2\x8DD\x8DE\x3\x2\x2\x2\x8DE\x8DF\a\x61\x2\x2\x8DF\x8E1\x3"+
		"\x2\x2\x2\x8E0\x8D1\x3\x2\x2\x2\x8E0\x8D2\x3\x2\x2\x2\x8E0\x8D9\x3\x2"+
		"\x2\x2\x8E1\x161\x3\x2\x2\x2\x8E2\x8E3\a~\x2\x2\x8E3\x163\x3\x2\x2\x2"+
		"\x8E4\x8E5\b\xB3\x1\x2\x8E5\x8E7\x5\x166\xB4\x2\x8E6\x8E8\a}\x2\x2\x8E7"+
		"\x8E6\x3\x2\x2\x2\x8E7\x8E8\x3\x2\x2\x2\x8E8\x8F1\x3\x2\x2\x2\x8E9\x8EA"+
		"\f\x3\x2\x2\x8EA\x8EB\at\x2\x2\x8EB\x8ED\x5\x166\xB4\x2\x8EC\x8EE\a}\x2"+
		"\x2\x8ED\x8EC\x3\x2\x2\x2\x8ED\x8EE\x3\x2\x2\x2\x8EE\x8F0\x3\x2\x2\x2"+
		"\x8EF\x8E9\x3\x2\x2\x2\x8F0\x8F3\x3\x2\x2\x2\x8F1\x8EF\x3\x2\x2\x2\x8F1"+
		"\x8F2\x3\x2\x2\x2\x8F2\x165\x3\x2\x2\x2\x8F3\x8F1\x3\x2\x2\x2\x8F4\x8F8"+
		"\x5Z.\x2\x8F5\x8F8\x5\xFE\x80\x2\x8F6\x8F8\x5\x6\x4\x2\x8F7\x8F4\x3\x2"+
		"\x2\x2\x8F7\x8F5\x3\x2\x2\x2\x8F7\x8F6\x3\x2\x2\x2\x8F8\x167\x3\x2\x2"+
		"\x2\x8F9\x8FA\a\x46\x2\x2\x8FA\x8FB\x5\f\a\x2\x8FB\x8FC\a~\x2\x2\x8FC"+
		"\x905\x3\x2\x2\x2\x8FD\x8FE\a\x46\x2\x2\x8FE\x900\x5\f\a\x2\x8FF\x901"+
		"\a>\x2\x2\x900\x8FF\x3\x2\x2\x2\x900\x901\x3\x2\x2\x2\x901\x902\x3\x2"+
		"\x2\x2\x902\x903\x5\x15E\xB0\x2\x903\x905\x3\x2\x2\x2\x904\x8F9\x3\x2"+
		"\x2\x2\x904\x8FD\x3\x2\x2\x2\x905\x169\x3\x2\x2\x2\x906\x908\a\x1E\x2"+
		"\x2\x907\x906\x3\x2\x2\x2\x907\x908\x3\x2\x2\x2\x908\x909\x3\x2\x2\x2"+
		"\x909\x90A\a>\x2\x2\x90A\x90B\x5x=\x2\x90B\x16B\x3\x2\x2\x2\x90C\x90D"+
		"\a>\x2\x2\x90D\x90E\a`\x2\x2\x90E\x90F\a\x61\x2\x2\x90F\x910\x5x=\x2\x910"+
		"\x16D\x3\x2\x2\x2\x911\x912\a\x43\x2\x2\x912\x913\x5\x62\x32\x2\x913\x914"+
		"\x5\x172\xBA\x2\x914\x16F\x3\x2\x2\x2\x915\x917\a\x43\x2\x2\x916\x918"+
		"\x5\x14A\xA6\x2\x917\x916\x3\x2\x2\x2\x917\x918\x3\x2\x2\x2\x918\x919"+
		"\x3\x2\x2\x2\x919\x91A\x5\x62\x32\x2\x91A\x91B\x5\x172\xBA\x2\x91B\x171"+
		"\x3\x2\x2\x2\x91C\x91E\x5\x174\xBB\x2\x91D\x91F\x5\x172\xBA\x2\x91E\x91D"+
		"\x3\x2\x2\x2\x91E\x91F\x3\x2\x2\x2\x91F\x173\x3\x2\x2\x2\x920\x921\a\v"+
		"\x2\x2\x921\x922\aO\x2\x2\x922\x923\x5\x176\xBC\x2\x923\x924\aP\x2\x2"+
		"\x924\x925\x5\x62\x32\x2\x925\x175\x3\x2\x2\x2\x926\x928\x5\xD0i\x2\x927"+
		"\x926\x3\x2\x2\x2\x927\x928\x3\x2\x2\x2\x928\x929\x3\x2\x2\x2\x929\x92A"+
		"\x5\x94K\x2\x92A\x92B\x5\xEAv\x2\x92B\x935\x3\x2\x2\x2\x92C\x92E\x5\xD0"+
		"i\x2\x92D\x92C\x3\x2\x2\x2\x92D\x92E\x3\x2\x2\x2\x92E\x92F\x3\x2\x2\x2"+
		"\x92F\x931\x5\x94K\x2\x930\x932\x5\x100\x81\x2\x931\x930\x3\x2\x2\x2\x931"+
		"\x932\x3\x2\x2\x2\x932\x935\x3\x2\x2\x2\x933\x935\a}\x2\x2\x934\x927\x3"+
		"\x2\x2\x2\x934\x92D\x3\x2\x2\x2\x934\x933\x3\x2\x2\x2\x935\x177\x3\x2"+
		"\x2\x2\x936\x938\a\x41\x2\x2\x937\x939\x5T+\x2\x938\x937\x3\x2\x2\x2\x938"+
		"\x939\x3\x2\x2\x2\x939\x179\x3\x2\x2\x2\x93A\x93D\x5\x17C\xBF\x2\x93B"+
		"\x93D\x5\x180\xC1\x2\x93C\x93A\x3\x2\x2\x2\x93C\x93B\x3\x2\x2\x2\x93D"+
		"\x17B\x3\x2\x2\x2\x93E\x93F\a\x41\x2\x2\x93F\x941\aO\x2\x2\x940\x942\x5"+
		"\x17E\xC0\x2\x941\x940\x3\x2\x2\x2\x941\x942\x3\x2\x2\x2\x942\x943\x3"+
		"\x2\x2\x2\x943\x944\aP\x2\x2\x944\x17D\x3\x2\x2\x2\x945\x946\b\xC0\x1"+
		"\x2\x946\x948\x5\xFE\x80\x2\x947\x949\a}\x2\x2\x948\x947\x3\x2\x2\x2\x948"+
		"\x949\x3\x2\x2\x2\x949\x952\x3\x2\x2\x2\x94A\x94B\f\x3\x2\x2\x94B\x94C"+
		"\at\x2\x2\x94C\x94E\x5\xFE\x80\x2\x94D\x94F\a}\x2\x2\x94E\x94D\x3\x2\x2"+
		"\x2\x94E\x94F\x3\x2\x2\x2\x94F\x951\x3\x2\x2\x2\x950\x94A\x3\x2\x2\x2"+
		"\x951\x954\x3\x2\x2\x2\x952\x950\x3\x2\x2\x2\x952\x953\x3\x2\x2\x2\x953"+
		"\x17F\x3\x2\x2\x2\x954\x952\x3\x2\x2\x2\x955\x956\a,\x2\x2\x956\x957\a"+
		"O\x2\x2\x957\x958\x5Z.\x2\x958\x959\aP\x2\x2\x959\x95C\x3\x2\x2\x2\x95A"+
		"\x95C\a,\x2\x2\x95B\x955\x3\x2\x2\x2\x95B\x95A\x3\x2\x2\x2\x95C\x181\x3"+
		"\x2\x2\x2\x95D\x95E\a\x61\x2\x2\x95E\x95F\a\x61\x2\x2\x95F\x183\x3\x2"+
		"\x2\x2\x960\x961\a\x61\x2\x2\x961\x962\a\x61\x2\x2\x962\x963\a_\x2\x2"+
		"\x963\x185\x3\x2\x2\x2\x964\x995\a+\x2\x2\x965\x995\a\x16\x2\x2\x966\x967"+
		"\a+\x2\x2\x967\x968\aQ\x2\x2\x968\x995\aR\x2\x2\x969\x96A\a\x16\x2\x2"+
		"\x96A\x96B\aQ\x2\x2\x96B\x995\aR\x2\x2\x96C\x995\aU\x2\x2\x96D\x995\a"+
		"V\x2\x2\x96E\x995\aW\x2\x2\x96F\x995\aX\x2\x2\x970\x995\aY\x2\x2\x971"+
		"\x995\aZ\x2\x2\x972\x995\a[\x2\x2\x973\x995\a\\\x2\x2\x974\x995\a]\x2"+
		"\x2\x975\x995\a^\x2\x2\x976\x995\a_\x2\x2\x977\x995\a`\x2\x2\x978\x995"+
		"\a\x61\x2\x2\x979\x995\a\x62\x2\x2\x97A\x995\a\x63\x2\x2\x97B\x995\a\x64"+
		"\x2\x2\x97C\x995\a\x65\x2\x2\x97D\x995\a\x66\x2\x2\x97E\x995\ag\x2\x2"+
		"\x97F\x995\ah\x2\x2\x980\x995\ai\x2\x2\x981\x995\aj\x2\x2\x982\x995\x5"+
		"\x182\xC2\x2\x983\x995\x5\x184\xC3\x2\x984\x995\ak\x2\x2\x985\x995\al"+
		"\x2\x2\x986\x995\am\x2\x2\x987\x995\an\x2\x2\x988\x995\ao\x2\x2\x989\x995"+
		"\ap\x2\x2\x98A\x995\aq\x2\x2\x98B\x995\ar\x2\x2\x98C\x995\as\x2\x2\x98D"+
		"\x995\at\x2\x2\x98E\x995\au\x2\x2\x98F\x995\av\x2\x2\x990\x991\aO\x2\x2"+
		"\x991\x995\aP\x2\x2\x992\x993\aQ\x2\x2\x993\x995\aR\x2\x2\x994\x964\x3"+
		"\x2\x2\x2\x994\x965\x3\x2\x2\x2\x994\x966\x3\x2\x2\x2\x994\x969\x3\x2"+
		"\x2\x2\x994\x96C\x3\x2\x2\x2\x994\x96D\x3\x2\x2\x2\x994\x96E\x3\x2\x2"+
		"\x2\x994\x96F\x3\x2\x2\x2\x994\x970\x3\x2\x2\x2\x994\x971\x3\x2\x2\x2"+
		"\x994\x972\x3\x2\x2\x2\x994\x973\x3\x2\x2\x2\x994\x974\x3\x2\x2\x2\x994"+
		"\x975\x3\x2\x2\x2\x994\x976\x3\x2\x2\x2\x994\x977\x3\x2\x2\x2\x994\x978"+
		"\x3\x2\x2\x2\x994\x979\x3\x2\x2\x2\x994\x97A\x3\x2\x2\x2\x994\x97B\x3"+
		"\x2\x2\x2\x994\x97C\x3\x2\x2\x2\x994\x97D\x3\x2\x2\x2\x994\x97E\x3\x2"+
		"\x2\x2\x994\x97F\x3\x2\x2\x2\x994\x980\x3\x2\x2\x2\x994\x981\x3\x2\x2"+
		"\x2\x994\x982\x3\x2\x2\x2\x994\x983\x3\x2\x2\x2\x994\x984\x3\x2\x2\x2"+
		"\x994\x985\x3\x2\x2\x2\x994\x986\x3\x2\x2\x2\x994\x987\x3\x2\x2\x2\x994"+
		"\x988\x3\x2\x2\x2\x994\x989\x3\x2\x2\x2\x994\x98A\x3\x2\x2\x2\x994\x98B"+
		"\x3\x2\x2\x2\x994\x98C\x3\x2\x2\x2\x994\x98D\x3\x2\x2\x2\x994\x98E\x3"+
		"\x2\x2\x2\x994\x98F\x3\x2\x2\x2\x994\x990\x3\x2\x2\x2\x994\x992\x3\x2"+
		"\x2\x2\x995\x187\x3\x2\x2\x2\x996\x99E\a\x7F\x2\x2\x997\x99E\a\x85\x2"+
		"\x2\x998\x99E\a\x86\x2\x2\x999\x99E\a\x87\x2\x2\x99A\x99E\x5\x18A\xC6"+
		"\x2\x99B\x99E\x5\x18C\xC7\x2\x99C\x99E\x5\x18E\xC8\x2\x99D\x996\x3\x2"+
		"\x2\x2\x99D\x997\x3\x2\x2\x2\x99D\x998\x3\x2\x2\x2\x99D\x999\x3\x2\x2"+
		"\x2\x99D\x99A\x3\x2\x2\x2\x99D\x99B\x3\x2\x2\x2\x99D\x99C\x3\x2\x2\x2"+
		"\x99E\x189\x3\x2\x2\x2\x99F\x9A0\t\v\x2\x2\x9A0\x18B\x3\x2\x2\x2\x9A1"+
		"\x9A2\a-\x2\x2\x9A2\x18D\x3\x2\x2\x2\x9A3\x9A4\t\f\x2\x2\x9A4\x18F\x3"+
		"\x2\x2\x2\x13D\x191\x19D\x1A1\x1AC\x1B0\x1BF\x1C6\x1CB\x1CD\x1D2\x1D8"+
		"\x1E2\x1E9\x1EF\x1F3\x1F8\x1FE\x205\x20B\x20E\x211\x214\x21B\x222\x256"+
		"\x265\x26B\x271\x27E\x280\x286\x295\x29B\x2B9\x2BE\x2C2\x2C6\x2C9\x2CD"+
		"\x2D3\x2D5\x2DD\x2E1\x2E4\x2EB\x2F2\x2F6\x2FB\x2FF\x302\x307\x30D\x31A"+
		"\x325\x327\x336\x338\x344\x346\x353\x355\x367\x369\x375\x377\x382\x38D"+
		"\x398\x3A3\x3AE\x3B8\x3C0\x3CD\x3D7\x3DE\x3E2\x3E6\x3EA\x3EE\x3F3\x3F6"+
		"\x3F9\x3FF\x407\x40C\x40F\x415\x420\x437\x43B\x443\x449\x45D\x461\x46E"+
		"\x472\x475\x47C\x484\x48E\x499\x4A5\x4AF\x4B4\x4BB\x4BE\x4C3\x4C8\x4DD"+
		"\x4E1\x4E6\x4F1\x4F7\x4FB\x500\x504\x509\x50C\x522\x528\x533\x537\x53A"+
		"\x544\x54A\x54D\x554\x55E\x562\x565\x568\x56C\x571\x573\x577\x57B\x584"+
		"\x591\x599\x59F\x5A5\x5A9\x5AC\x5B5\x5BE\x5C6\x5D1\x5D7\x5E2\x5E5\x5EA"+
		"\x5F9\x5FF\x608\x612\x618\x620\x624\x628\x62D\x632\x639\x63B\x640\x644"+
		"\x652\x658\x667\x671\x676\x67D\x683\x688\x68E\x695\x699\x69B\x69D\x6A4"+
		"\x6A7\x6AA\x6AD\x6B2\x6B6\x6B9\x6BD\x6C1\x6C6\x6C9\x6CB\x6CF\x6D6\x6DC"+
		"\x6E0\x6E6\x6EB\x6ED\x6F3\x6F7\x6FD\x704\x708\x70A\x70C\x713\x71D\x721"+
		"\x723\x725\x729\x72C\x732\x73C\x740\x746\x74E\x752\x755\x759\x75E\x761"+
		"\x764\x768\x76D\x777\x77E\x783\x787\x78C\x792\x796\x79C\x7A2\x7A6\x7AB"+
		"\x7B1\x7B5\x7B8\x7BC\x7BF\x7C1\x7C4\x7CE\x7D3\x7D5\x7D8\x7DB\x7DE\x7E7"+
		"\x7F1\x7F6\x7F9\x7FD\x800\x803\x807\x810\x81F\x825\x829\x82D\x831\x835"+
		"\x839\x83D\x841\x844\x848\x853\x857\x85E\x862\x867\x86C\x873\x877\x881"+
		"\x891\x896\x89A\x89D\x8A1\x8A7\x8AA\x8AE\x8B8\x8BB\x8C3\x8C8\x8CD\x8D5"+
		"\x8DC\x8E0\x8E7\x8ED\x8F1\x8F7\x900\x904\x907\x917\x91E\x927\x92D\x931"+
		"\x934\x938\x93C\x941\x948\x94E\x952\x95B\x994\x99D";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
